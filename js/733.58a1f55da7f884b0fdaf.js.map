{"version":3,"sources":["webpack://ros-frontend/./src/Components/RosTable/RosTable.scss","webpack://ros-frontend/./src/Components/RosTable/ExpandedRow.js","webpack://ros-frontend/./src/Components/RosTable/ProgressScoreBar.js","webpack://ros-frontend/./src/Components/EmptyStateDisplay/EmptyStateDisplay.js","webpack://ros-frontend/./src/Components/RosTable/RosTable.js","webpack://ros-frontend/./src/Components/RosTable/RosTable.scss?1741"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","id","ExpandedRow","inventoryId","inlineFieldsArray","label","value","cloudProvider","instanceType","idlingTime","ioWait","TextContent","className","TextList","component","TextListVariants","map","field","index","key","TextListItem","TextListItemVariants","propTypes","ProgressScoreBar","val","valueScore","measureLocation","textLabel","Progress","min","max","valueText","5","4","3","2","EmptyStateDisplay","button","color","error","icon","isSmall","text","title","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","Title","headingLevel","size","EmptyStateBody","join","PropTypes","actionLink","textValue","classAsPerType","linkPath","href","renderRecommendations","applyClasses","RosTable","props","state","columns","cellFormatters","expandable","rows","createRows","onCollapse","bind","event","rowKey","isOpen","this","setState","rowsData","systems","length","row","display_performance_score","cpuScore","cpu_score","memoryScore","memory_score","IOScore","io_score","inventory_id","recommendationCount","recommendation_count","cloud_provider","instance_type","idling_time","io_wait","cells","display_name","parent","heightAuto","colSpan","EmptyTable","Table","aria-label","TableHeader","TableBody","React","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/733.58a1f55da7f884b0fdaf.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".ros .ros-systems-table .pf-c-content.expanded-row{--pf-c-content--dl--RowGap: var(--pf-global--spacer--xs);--pf-c-content--FontSize: var(--pf-global--FontSize--sm)}.ros .ros-systems-table .pf-link:hover{text-decoration:none}.ros .ros-systems-table .recommendations.green-400{color:var(--pf-global--palette--green-400)}.ros .ros-systems-table .recommendations{padding-left:var(--pf-global--spacer--lg);font-weight:var(--pf-global--FontWeight--bold)}.ros .ros-systems-table .pf-c-progress{grid-template-columns:auto}.ros .ros-systems-table .pf-c-progress .pf-c-progress__status{text-align:left}.ros .progress-score-bar{grid-gap:var(--pf-global--spacer--xs)}.ros .progress-score-bar span.pf-c-progress__status-icon{display:none}.ros .progress-score-bar .pf-c-progress__bar:before{background:var(--pf-global--palette--black-400)}.ros .progress-score-bar .pf-c-progress__measure{color:var(--pf-global--palette--black-600)}.ros .green-100 .pf-c-progress__indicator{background:var(--pf-global--palette--green-100)}.ros .green-400 .pf-c-progress__indicator{background:var(--pf-global--palette--green-300)}.ros .gold-400 .pf-c-progress__indicator{background:var(--pf-global--palette--gold-300)}.ros .orange-300 .pf-c-progress__indicator{background:var(--pf-global--palette--orange-300)}.ros .danger-200 .pf-c-progress__indicator{background:var(--pf-global--palette--red-200)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\n\nexport const ExpandedRow = ({ inventoryId, cloudProvider, instanceType, idlingTime, ioWait }) =>  {\n    const inlineFieldsArray = [\n        { label: 'Provider', value: cloudProvider },\n        { label: 'Instance Type', value: instanceType },\n        { label: 'Idling time', value: idlingTime },\n        { label: 'I/O Wait', value: ioWait }\n    ];\n\n    return (\n        <TextContent className='expanded-row'>\n            <TextList id={inventoryId} component={TextListVariants.dl}>\n                { inlineFieldsArray.map((field, index) => (\n                    <React.Fragment key={index} >\n                        <TextListItem component={TextListItemVariants.dt}>{ field.label }</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ field.value }</TextListItem>\n                    </React.Fragment>\n                ))}\n            </TextList>\n        </TextContent>\n    );\n};\n\nExpandedRow.propTypes = {\n    inventoryId: propTypes.string,\n    cloudProvider: propTypes.string,\n    instanceType: propTypes.string,\n    idlingTime: propTypes.string,\n    ioWait: propTypes.string\n};\n","import React from 'react';\nimport { Progress } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const ProgressScoreBar = ({ valueScore, measureLocation }) =>  {\n    const textLabel = `${ valueScore }/5`;\n    const colorclass = (val) =>  ({\n        5: 'green-400',\n        4: 'green-100',\n        3: 'gold-400',\n        2: 'orange-300'\n    }[val] || 'danger-200');\n\n    return (\n        <React.Fragment>\n            <Progress value={ valueScore } min={0} max={5} label={ textLabel }\n                valueText={ textLabel }\n                className={ `progress-score-bar ${colorclass(valueScore)}` }\n                measureLocation={ measureLocation } />\n        </React.Fragment>\n    );\n};\n\nProgressScoreBar.propTypes = {\n    measureLocation: propTypes.string,\n    valueScore: propTypes.number\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\n\nexport const EmptyStateDisplay = ({ button, color, error, icon, isSmall, text, title }) => (\n    <EmptyState variant={ isSmall ? EmptyStateVariant.small : EmptyStateVariant.large }>\n        { icon && <EmptyStateIcon\n            icon={ icon }\n            color={ color ? color : null }\n            className={ isSmall ? 'small-empty-state-icon' : null }\n        /> }\n        <Title\n            headingLevel={ isSmall ? 'h5' : 'h1' }\n            size={ isSmall ? 'md' : 'lg' }\n        >\n            { title }\n        </Title>\n        <EmptyStateBody>\n            { text?.join('\\n') }\n            { error }\n        </EmptyStateBody>\n        { button }\n    </EmptyState>\n);\n\nEmptyStateDisplay.propTypes = {\n    button: PropTypes.object,\n    color: PropTypes.string,\n    error: PropTypes.string,\n    icon: PropTypes.any,\n    isSmall: PropTypes.bool,\n    text: PropTypes.array,\n    title: PropTypes.string\n};\n","import React from 'react';\nimport { Table, TableHeader, TableBody, expandable } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport { flatMap } from 'lodash';\nimport { ExpandedRow } from './ExpandedRow';\nimport { ProgressScoreBar } from './ProgressScoreBar';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { EmptyStateDisplay } from '../EmptyStateDisplay/EmptyStateDisplay';\nimport './RosTable.scss';\n\nconst actionLink = (id, textValue, classAsPerType, linkPath) => (\n    <a href={ linkPath } className={ `pf-link ${classAsPerType} link-${id}` }>{textValue}</a>\n);\n\nconst renderRecommendations = (inventoryId, textValue) => {\n    let applyClasses = 'recommendations';\n    if (textValue === 0) {\n        applyClasses += ' green-400';\n    }\n\n    return actionLink(inventoryId, textValue, applyClasses, '#');\n};\n\nclass RosTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [\n                { title: 'System Name', cellFormatters: [expandable] },\n                { title: 'CPU score' },\n                { title: 'Memory score' },\n                { title: 'I/O score' },\n                { title: 'Recommendations' },\n                { title: 'State' }\n            ],\n            rows: this.createRows()\n        };\n        this.onCollapse = this.onCollapse.bind(this);\n    }\n\n    onCollapse(event, rowKey, isOpen) {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    }\n\n    createRows() {\n        const rowsData = this.props.systems;\n        if (rowsData && rowsData.length !== 0) {\n            return flatMap(rowsData, (row, index) => {\n                const { cpu_score: cpuScore, memory_score: memoryScore, io_score: IOScore } = row.display_performance_score;\n                const { inventory_id: inventoryId, recommendation_count: recommendationCount,\n                    cloud_provider: cloudProvider, instance_type: instanceType,\n                    idling_time: idlingTime, io_wait: ioWait } = row;\n\n                return [\n                    {\n                        id: index,\n                        isOpen: false,\n                        cells: [\n                            { title: actionLink(inventoryId, row.display_name, 'system-link', '#') },\n                            { title: <ProgressScoreBar measureLocation='outside' valueScore={cpuScore} /> },\n                            { title: <ProgressScoreBar measureLocation='outside' valueScore={memoryScore} /> },\n                            { title: <ProgressScoreBar measureLocation='outside' valueScore={IOScore} /> },\n                            { title: renderRecommendations(inventoryId, recommendationCount) },\n                            { title: row.state }\n\n                        ]\n                    },\n                    {\n                        cells: [\n                            {\n                                title: <ExpandedRow {\n                                    ...{ inventoryId, cloudProvider, instanceType, idlingTime, ioWait }\n                                } />\n                            }\n                        ],\n                        parent: index * 2\n                    }\n                ];\n            });\n        } else {\n\n            return [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: <EmptyTable>\n                                <EmptyStateDisplay title=\"No matching records found\" />\n                            </EmptyTable>\n                        }\n                    ]\n                }\n            ];\n        }\n    }\n\n    render() {\n        const { columns, rows } = this.state;\n\n        return (\n            <Table aria-label=\"Expandable table\" onCollapse={this.onCollapse}\n                variant='compact'\n                rows={rows} cells={columns} className=\"ros-systems-table\">\n                <TableHeader />\n                <TableBody />\n            </Table>\n        );\n    }\n}\n\nRosTable.propTypes = {\n    systems: propTypes.array\n};\n\nexport default RosTable;\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./RosTable.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./RosTable.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}