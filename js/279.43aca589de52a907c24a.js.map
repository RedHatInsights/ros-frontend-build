{"version":3,"sources":["webpack://ros-frontend/./src/Utilities/api.js","webpack://ros-frontend/./src/store/actions.js"],"names":["handleErrors","response","ok","Error","statusText","fetchSystemDetail","inventoryId","url","URL","ROS_API_ROOT","SYSTEMS_API_ROOT","window","location","origin","insights","chrome","auth","getUser","then","fetch","res","json","result","fetchSystemRecommendations","options","params","limit","perPage","offset","page","description","trim","search","URLSearchParams","toString","loadSystemInfo","type","payload","loadSysRecs"],"mappings":"wuBAEO,SAASA,EAAaC,GACzB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAGzB,OAAOH,EAGJ,IAAMI,EAAoB,SAAAC,GAC7B,IAAIC,EAAM,IAAIC,IACVC,KAAeC,KAAf,WAAsCJ,GACtCK,OAAOC,SAASC,QASpB,OAPeF,OAAOG,SAASC,OAAOC,KACrCC,UACAC,MAAK,kBACFC,MAAMZ,GAAKW,KAAKlB,GACfkB,MAAK,SAAAE,GAAG,OAAKA,EAAIC,UAAQH,MAAK,SAAAI,GAAM,OAAIA,SAMpCC,EAA6B,SAACjB,GAA8B,IAAjBkB,EAAiB,uDAAP,GAC1DC,EAAS,CACTC,MAAOF,EAAQG,QACfC,QAASJ,EAAQK,KAAO,GAAKL,EAAQG,SAErCH,EAAQM,aAAeN,EAAQM,YAAYC,SAC3CN,EAAS,EAAH,KAAQA,GAAR,IAAgBK,YAAaN,EAAQM,eAG/C,IAAIvB,EAAM,IAAIC,IACVC,KAAeC,KAAf,WAAsCJ,EAAtC,oBACAK,OAAOC,SAASC,QAEpBN,EAAIyB,OAAS,IAAIC,gBAAgBR,GAAQS,WACzC,IAAIjC,EAAWU,OAAOG,SAASC,OAAOC,KACrCC,UACAC,MAAK,kBACFC,MAAMZ,GAAKW,KAAKlB,GACfkB,MAAK,SAAAE,GAAG,OAAKA,EAAIC,UAAQH,MAAK,SAAAI,GAAM,OAAIA,QAG7C,OAAOrB,GC5CEkC,EAAiB,SAAA7B,GAAW,MAAK,CAC1C8B,KAAM,uBACNC,QAAShC,EAAkBC,KAGlBgC,EAAc,SAAChC,EAAamB,GAAd,MAA0B,CACjDW,KAAM,oCACNC,QAASd,EAA2BjB,EAAamB","file":"js/279.43aca589de52a907c24a.js","sourcesContent":["import { ROS_API_ROOT, SYSTEMS_API_ROOT } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/recommendations`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n"],"sourceRoot":""}