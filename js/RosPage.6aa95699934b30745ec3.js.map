{"version":3,"sources":["webpack://ros-frontend/./src/Routes/RosPage/ros-page.scss","webpack://ros-frontend/./src/Components/RosTable/ExpandedRow.js","webpack://ros-frontend/./src/Components/RosTable/ProgressScoreBar.js","webpack://ros-frontend/./src/store/entityDetailReducer.js","webpack://ros-frontend/./src/Routes/RosPage/RosPage.js","webpack://ros-frontend/./src/Routes/RosPage/ros-page.scss?cee4"],"names":["exports","___CSS_LOADER_API_IMPORT___","push","module","id","ExpandedRow","inventoryId","inlineFieldsArray","label","value","cloudProvider","instanceType","idlingTime","ioWait","TextContent","className","TextList","component","TextListVariants","map","field","index","key","TextListItem","TextListItemVariants","propTypes","ProgressScoreBar","val","valueScore","measureLocation","textLabel","Progress","min","max","valueText","5","4","3","2","systemName","displayName","inventory_id","Link","to","pathname","scoreProgress","data","recommendations","openExpandedView","state","action","rows","row","isOpen","payload","RosPage","props","perPage","orderBy","orderDirection","SortByDirection","columns","title","renderFunc","sortingHeader","display_name","number_of_recommendations","chunkSize","inventory","React","fetchSystems","bind","fetchParams","window","insights","chrome","auth","getUser","params","limit","offset","page","order_by","this","order_how","orderHow","filters","hostnameOrId","url","URL","ROS_API_ROOT","location","origin","search","URLSearchParams","toString","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","length","splice","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","PageHeader","PageHeaderTitle","Main","Card","CardBody","InventoryTable","ref","hasCheckbox","tableProps","canSelectAll","variant","hideFilters","stale","registeredWith","_items","config","setState","fetchInventoryDetails","hasItems","invSystems","system","find","total","meta","count","onLoad","LOAD_ENTITIES_FULFILLED","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","applyReducerHash","children","rowData","cloud_provider","instance_type","idling_time","io_wait","loaded","modifyInventory","setSort","expandable","onExpandClick","_e","_i","expandRow","PropTypes","withRouter","connect","dispatch","actionType","type","orderByKey","orderByDirection","direction","update","hot","invalidate","oldLocals","accept","a","b","isNamedExport","p","isEqualLocals","dispose"],"mappings":"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","file":"js/RosPage.6aa95699934b30745ec3.js","sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \".ros .ins-c-primary-toolbar .ins-c-primary-toolbar__pagination{margin-left:auto}.ros .ros-systems-table .pf-c-content.expanded-row{--pf-c-content--dl--RowGap: var(--pf-global--spacer--xs);--pf-c-content--FontSize: var(--pf-global--FontSize--sm)}.ros .ros-systems-table .pf-link:hover{text-decoration:none}.ros .ros-systems-table .recommendations.green-400{color:var(--pf-global--palette--green-400)}.ros .ros-systems-table .recommendations{padding-left:var(--pf-global--spacer--lg);font-weight:var(--pf-global--FontWeight--bold)}.ros .ros-systems-table .pf-c-progress{grid-template-columns:auto}.ros .ros-systems-table .pf-c-progress .pf-c-progress__status{text-align:left}.ros .progress-score-bar{grid-gap:var(--pf-global--spacer--xs)}.ros .progress-score-bar span.pf-c-progress__status-icon{display:none}.ros .progress-score-bar .pf-c-progress__bar:before{background:var(--pf-global--palette--black-400)}.ros .progress-score-bar .pf-c-progress__measure{color:var(--pf-global--palette--black-600)}.ros .green-100 .pf-c-progress__indicator{background:var(--pf-global--palette--green-100)}.ros .green-400 .pf-c-progress__indicator{background:var(--pf-global--palette--green-300)}.ros .gold-400 .pf-c-progress__indicator{background:var(--pf-global--palette--gold-300)}.ros .orange-300 .pf-c-progress__indicator{background:var(--pf-global--palette--orange-300)}.ros .danger-200 .pf-c-progress__indicator{background:var(--pf-global--palette--red-200)}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\n\nexport const ExpandedRow = ({ inventoryId, cloudProvider, instanceType, idlingTime, ioWait }) =>  {\n    const inlineFieldsArray = [\n        { label: 'Provider', value: cloudProvider },\n        { label: 'Instance Type', value: instanceType },\n        { label: 'Idling time', value: idlingTime },\n        { label: 'I/O Wait', value: ioWait }\n    ];\n\n    return (\n        <TextContent className='expanded-row'>\n            <TextList id={inventoryId} component={TextListVariants.dl}>\n                { inlineFieldsArray.map((field, index) => (\n                    <React.Fragment key={index} >\n                        <TextListItem component={TextListItemVariants.dt}>{ field.label }</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ field.value }</TextListItem>\n                    </React.Fragment>\n                ))}\n            </TextList>\n        </TextContent>\n    );\n};\n\nExpandedRow.propTypes = {\n    inventoryId: propTypes.string,\n    cloudProvider: propTypes.string,\n    instanceType: propTypes.string,\n    idlingTime: propTypes.string,\n    ioWait: propTypes.string\n};\n","import React from 'react';\nimport { Progress } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const ProgressScoreBar = ({ valueScore, measureLocation }) =>  {\n    const textLabel = `${ valueScore }/5`;\n    const colorclass = (val) =>  ({\n        5: 'green-400',\n        4: 'green-100',\n        3: 'gold-400',\n        2: 'orange-300'\n    }[val] || 'danger-200');\n\n    return (\n        <React.Fragment>\n            <Progress value={ valueScore } min={0} max={5} label={ textLabel }\n                valueText={ textLabel }\n                className={ `progress-score-bar ${colorclass(valueScore)}` }\n                measureLocation={ measureLocation } />\n        </React.Fragment>\n    );\n};\n\nProgressScoreBar.propTypes = {\n    measureLocation: propTypes.string,\n    valueScore: propTypes.number\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { ExpandedRow } from '../Components/RosTable/ExpandedRow';\nimport { ProgressScoreBar } from '../Components/RosTable/ProgressScoreBar';\n\nexport const systemName = (displayName, id, { inventory_id: inventoryId }) => {\n    return (\n        <Link to={{ pathname: `/${inventoryId}` }} className={ `pf-link system-link link-${inventoryId}` }>\n            { displayName }\n        </Link>\n    );\n};\n\nexport const scoreProgress = (data) => {\n    return (\n        <ProgressScoreBar measureLocation='outside' valueScore={data} />\n    );\n};\n\nexport const recommendations = (data, id, { inventory_id: inventoryId }) => {\n    return (\n        <Link to={{ pathname: `/${inventoryId}` }}\n            className={ `pf-link recommendations ${data === 0 ? 'green-400' : ''} link-${inventoryId}` }>\n            { data }\n        </Link>\n    );\n};\n\nconst addExpandedView = (rowData) => {\n    const {\n        id, cloud_provider: cloudProvider, instance_type: instanceType,\n        idling_time: idlingTime, io_wait: ioWait\n    } = rowData;\n    return (<ExpandedRow { ...{ id, cloudProvider, instanceType, idlingTime, ioWait } } />);\n};\n\nfunction modifyInventory(columns, state) {\n\n    return {\n        ...state,\n        columns,\n        rows: state.rows.map((row) => ({\n            ...row,\n            children: addExpandedView(row)\n        })),\n        loaded: true\n    };\n}\n\nconst openExpandedView = (state, action) => {\n    return {\n        ...state,\n        rows: state.rows.map(row => ({\n            ...row,\n            isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n        }))\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITIES_FULFILLED }, columns) => applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: (state) =>  modifyInventory(columns, state),\n    ['EXPAND_ROW']: openExpandedView\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entityDetailReducer, systemName, scoreProgress, recommendations } from '../../store/entityDetailReducer';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT } from '../../constants';\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'display_name',\n            orderDirection: SortByDirection.asc,\n            columns: [\n                { key: 'display_name', title: 'Name', renderFunc: systemName },\n                { key: 'display_performance_score.cpu_score', title: 'CPU score', renderFunc: scoreProgress },\n                { key: 'display_performance_score.memory_score', title: 'Memory score', renderFunc: scoreProgress },\n                { key: 'display_performance_score.io_score', title: 'I/O score', renderFunc: scoreProgress },\n                { key: 'number_of_recommendations', title: 'Recommendations',\n                    renderFunc: recommendations },\n                { key: 'state', title: 'State' }\n            ]\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            'display_performance_score.cpu_score': 'cpu_score',\n            'display_performance_score.memory_score': 'memory_score',\n            'display_performance_score.io_score': 'io_score',\n            number_of_recommendations: 'number_of_recommendations', /* eslint-disable-line camelcase */\n            state: 'state' };\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        url.search = new URLSearchParams(params).toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    render() {\n\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <Card className='pf-t-light  pf-m-opaque-100'>\n                        <CardBody>\n                            <InventoryTable\n                                ref={this.inventory}\n                                hasCheckbox={ false }\n                                tableProps={{\n                                    canSelectAll: false,\n                                    className: 'ros-systems-table'\n                                }}\n                                variant=\"compact\"\n                                hideFilters={{ stale: true, registeredWith: true }}\n                                getEntities={async (_items, config) => {\n                                    this.setState(() => ({\n                                        orderBy: config.orderBy,\n                                        orderDirection: config.orderDirection\n                                    }));\n                                    const results = await this.fetchSystems(\n                                        { page: config.page, perPage: config.per_page,\n                                            orderBy: this.sortingHeader[config.orderBy],\n                                            orderHow: config.orderDirection,\n                                            filters: config.filters\n                                        }\n                                    );\n                                    const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                    const invSystems = await this.fetchInventoryDetails(invIds, {\n                                        ...config,\n                                        page: 1,\n                                        hasItems: true\n                                    });\n                                    return {\n                                        results: results.data.map((system) => ({\n                                            ...invSystems.find(({ id }) => id === system.inventory_id),\n                                            ...system\n                                        })),\n                                        total: results.meta.count,\n                                        page: config.page,\n                                        per_page: config.per_page /* eslint-disable-line camelcase */\n                                    };\n                                }}\n                                onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                    this.setState({\n                                        getEntities: api?.getEntities\n                                    });\n                                    register({\n                                        ...mergeWithEntities(\n                                            entityDetailReducer(\n                                                INVENTORY_ACTION_TYPES, this.state.columns\n                                            )\n                                        )\n                                    });\n                                    this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                                }}\n                                expandable='true'\n                                onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                            >\n                            </InventoryTable>\n                        </CardBody>\n                    </Card>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        })\n    };\n}\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func\n};\n\nexport default withRouter(connect(null, mapDispatchToProps)(RosPage));\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ros-page.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\nif (module.hot) {\n  if (!content.locals || module.hot.invalidate) {\n    var isEqualLocals = function isEqualLocals(a, b, isNamedExport) {\n  if (!a && b || a && !b) {\n    return false;\n  }\n\n  var p;\n\n  for (p in a) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (a[p] !== b[p]) {\n      return false;\n    }\n  }\n\n  for (p in b) {\n    if (isNamedExport && p === 'default') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (!a[p]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n    var oldLocals = content.locals;\n\n    module.hot.accept(\n      \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js??ruleSet[1].rules[3].use[2]!../../../node_modules/sass-loader/dist/cjs.js!./ros-page.scss\",\n      function () {\n        if (!isEqualLocals(oldLocals, content.locals, undefined)) {\n                module.hot.invalidate();\n\n                return;\n              }\n\n              oldLocals = content.locals;\n\n              update(content);\n      }\n    )\n  }\n\n  module.hot.dispose(function() {\n    update();\n  });\n}\n\nexport default content.locals || {};"],"sourceRoot":""}