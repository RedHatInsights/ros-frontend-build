{"version":3,"file":"js/RosPage.ef82aced8b11d2767041.js","mappings":"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","sources":["webpack:///./src/Components/RosTable/ProgressScoreBar.js","webpack:///./src/Components/RosTable/SystemState.js","webpack:///./src/store/entitiesReducer.js","webpack:///./src/Routes/RosPage/RosPage.js"],"sourcesContent":["import React from 'react';\nimport { Progress } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const ProgressScoreBar = ({ utilizedValue, measureLocation, eleId }) =>  {\n    return (\n        <React.Fragment>\n            <Progress value={ utilizedValue }\n                className={ `progress-score-bar blue-300` }\n                measureLocation={ measureLocation }\n                {  ...(eleId ? { id: eleId } : null) } />\n        </React.Fragment>\n    );\n};\n\nProgressScoreBar.propTypes = {\n    measureLocation: propTypes.string,\n    valueScore: propTypes.number,\n    utilizedValue: propTypes.number,\n    eleId: propTypes.string\n};\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport {\n    ExclamationCircleIcon, ExclamationTriangleIcon, CheckCircleIcon,\n    AngleDoubleUpIcon, AngleDoubleDownIcon,\n    AutomationIcon, InProgressIcon\n} from '@patternfly/react-icons';\n\nimport propTypes from 'prop-types';\n\nconst stateDetails = (val) =>  ({\n    Oversized: {\n        text: 'This system is not fully consuming available resources and may be oversized.',\n        icon: <AngleDoubleUpIcon color='#f09800' size='sm'/>\n    },\n    Undersized: {\n        text: 'This system is depleting available resources and may be undersized.',\n        icon: <AngleDoubleDownIcon color='red' size='sm'/>\n    },\n    Idling: {\n        text: 'This system displays higher idling cycles than is expected.',\n        icon: <AutomationIcon size='sm'/>\n    },\n    'Storage rightsizing': {\n        text: 'This system is experiencing a storage Input/Output bottleneck.',\n        icon: <ExclamationTriangleIcon color='#f09800' size='sm'/>\n    },\n    Optimized: {\n        text: 'This system is running efficiently.',\n        icon: <CheckCircleIcon color='green' size='sm'/>\n    },\n    Crashloop: {\n        text: 'This system is experiencing a crash loop.',\n        icon: <ExclamationCircleIcon color='red' size='sm'/>\n    },\n    'Waiting for data': {\n        text: 'This system is configured, please allow 24 hours for your upload to complete.',\n        icon: <InProgressIcon color='blue' size='sm'/>\n    }\n}[val] || {});\n\nexport const SystemState = ({ stateValue }) =>  {\n    const { text, icon } = stateDetails(stateValue);\n    return (\n        <span>\n            <span>\n                { text ?\n                    <Tooltip content={<div>{ text }</div>}>\n                        <span>{ icon } { stateValue }</span>\n                    </Tooltip>\n                    : stateValue }\n            </span>\n        </span>\n    );\n};\n\nSystemState.propTypes = {\n    stateValue: propTypes.string\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExpandedRow } from '../Components/RosTable/ExpandedRow';\nimport { ProgressScoreBar } from '../Components/RosTable/ProgressScoreBar';\nimport { SystemState } from '../Components/RosTable/SystemState';\n\nexport const systemName = (displayName, id, { inventory_id: inventoryId, isDeleted }) => {\n    return (\n        isDeleted ? (\n            <Tooltip content={<div>{displayName} has been deleted from inventory</div>}>\n                <span tabIndex=\"0\">{ displayName }</span>\n            </Tooltip>\n        ) : (\n            <Link to={{ pathname: `/${inventoryId}` }} className={ `pf-link system-link link-${inventoryId}` }>\n                { displayName }\n            </Link>\n        )\n    );\n};\n\nexport const displayState = (data) => {\n    return (<SystemState stateValue={ data }/>);\n};\n\nexport const scoreProgress = () => (data) => {\n    return (\n        <ProgressScoreBar measureLocation='outside'\n            utilizedValue={data} />\n    );\n};\n\nexport const recommendations = (data, id, { inventory_id: inventoryId, isDeleted }) => {\n    return (\n        isDeleted ? <span className='recommendations'>{ data }</span> : (\n            <Link to={{ pathname: `/${inventoryId}` }}\n                className={ `pf-link recommendations ${data === 0 ? 'green-400' : ''} link-${inventoryId}` }>\n                { data }\n            </Link>\n        )\n    );\n};\n\nconst addExpandedView = (rowData) => {\n    const {\n        id, cloud_provider: cloudProvider, instance_type: instanceType,\n        idling_time: idlingTime, io_wait: ioWait\n    } = rowData;\n    return (<ExpandedRow { ...{ id, cloudProvider, instanceType, idlingTime, ioWait } } />);\n};\n\nfunction modifyInventory(columns, state) {\n\n    return {\n        ...state,\n        columns,\n        rows: state.rows.map((row) => ({\n            ...row,\n            children: addExpandedView(row)\n        })),\n        loaded: true\n    };\n}\n\nconst openExpandedView = (state, action) => {\n    return {\n        ...state,\n        rows: state.rows.map(row => ({\n            ...row,\n            isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n        }))\n    };\n};\n\nexport const entitiesReducer = ({ LOAD_ENTITIES_FULFILLED }, columns) => applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: (state) =>  modifyInventory(columns, state),\n    ['EXPAND_ROW']: openExpandedView\n});\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer, systemName, scoreProgress, recommendations, displayState } from '../../store/entitiesReducer';\nimport { loadIsConfiguredInfo } from '../../store/actions';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'display_name',\n            orderDirection: SortByDirection.asc,\n            columns: [\n                { key: 'display_name', title: 'Name', renderFunc: systemName },\n                { key: 'performance_utilization.cpu', title: 'CPU utilization', renderFunc: scoreProgress() },\n                { key: 'performance_utilization.memory', title: 'Memory utilization', renderFunc: scoreProgress() },\n                { key: 'performance_utilization.io', title: 'I/O utilization', renderFunc: scoreProgress() },\n                { key: 'number_of_suggestions', title: 'Suggestions',\n                    renderFunc: recommendations },\n                { key: 'state', title: 'State', renderFunc: displayState }\n            ]\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.io': 'io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state' };\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        url.search = new URLSearchParams(params).toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    renderConfigStepsOrTable() {\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ stale: true, registeredWith: true }}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection\n                                }));\n                                const results = await this.fetchSystems(\n                                    { page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters\n                                    }\n                                );\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, this.state.columns\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                :  this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n"],"names":["ProgressScoreBar","utilizedValue","measureLocation","eleId","Progress","value","className","id","propTypes","valueScore","SystemState","val","stateValue","Oversized","text","icon","color","size","Undersized","Idling","Optimized","Crashloop","Tooltip","content","systemName","displayName","inventoryId","inventory_id","isDeleted","tabIndex","Link","to","pathname","displayState","data","scoreProgress","recommendations","openExpandedView","state","action","rows","map","row","isOpen","payload","RosPage","props","perPage","orderBy","orderDirection","SortByDirection","columns","key","title","renderFunc","sortingHeader","display_name","number_of_suggestions","chunkSize","inventory","React","fetchSystems","bind","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","fetchParams","window","auth","getUser","params","limit","offset","page","order_by","order_how","orderHow","filters","hostnameOrId","url","URL","ROS_API_ROOT","SYSTEMS_API_ROOT","location","origin","search","URLSearchParams","toString","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","length","push","splice","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","showConfigSteps","ServiceNotConfigured","Card","CardBody","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","variant","hideFilters","stale","registeredWith","_items","config","setState","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","total","meta","count","onLoad","LOAD_ENTITIES_FULFILLED","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","applyReducerHash","children","rowData","cloudProvider","cloud_provider","instanceType","instance_type","idlingTime","idling_time","ioWait","io_wait","ExpandedRow","loaded","modifyInventory","setSort","expandable","onExpandClick","_e","_i","expandRow","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","dispatch","actionType","type","orderByKey","orderByDirection","direction","loadIsConfiguredInfo"],"sourceRoot":""}