{"version":3,"file":"js/RosPage.39758071619836f62100.js","mappings":"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","sources":["webpack:///./src/Components/RosTable/ProgressScoreBar.js","webpack:///./src/Components/RosTable/SystemState.js","webpack:///./src/store/entitiesReducer.js","webpack:///./src/Components/RosTable/DiskUsage.js","webpack:///./src/Routes/RosPage/RosPage.js"],"sourcesContent":["import React from 'react';\nimport { Progress } from '@patternfly/react-core';\nimport propTypes from 'prop-types';\n\nexport const ProgressScoreBar = ({ utilizedValue, measureLocation, eleId }) =>  {\n    return (\n        <React.Fragment>\n            <Progress value={ utilizedValue }\n                className={ `progress-score-bar blue-300` }\n                measureLocation={ measureLocation }\n                {  ...(eleId ? { id: eleId } : null) } />\n        </React.Fragment>\n    );\n};\n\nProgressScoreBar.propTypes = {\n    measureLocation: propTypes.string,\n    valueScore: propTypes.number,\n    utilizedValue: propTypes.number,\n    eleId: propTypes.string\n};\n","import React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport {\n    ExclamationCircleIcon, ExclamationTriangleIcon, CheckCircleIcon,\n    AngleDoubleUpIcon, AngleDoubleDownIcon,\n    AutomationIcon, InProgressIcon, TachometerAltIcon\n} from '@patternfly/react-icons';\n\nimport propTypes from 'prop-types';\n\nconst stateDetails = (val) =>  ({\n    Oversized: {\n        text: 'This system is not fully consuming available resources and may be oversized.',\n        icon: <AngleDoubleUpIcon color='#f09800' size='sm'/>\n    },\n    Undersized: {\n        text: 'This system is depleting available resources and may be undersized.',\n        icon: <AngleDoubleDownIcon color='red' size='sm'/>\n    },\n    Idling: {\n        text: 'This system displays higher idling cycles than is expected.',\n        icon: <AutomationIcon size='sm'/>\n    },\n    'Storage rightsizing': {\n        text: 'This system is experiencing a storage Input/Output bottleneck.',\n        icon: <ExclamationTriangleIcon color='#f09800' size='sm'/>\n    },\n    Optimized: {\n        text: 'This system is running efficiently.',\n        icon: <CheckCircleIcon color='green' size='sm'/>\n    },\n    Crashloop: {\n        text: 'This system is experiencing a crash loop.',\n        icon: <ExclamationCircleIcon color='red' size='sm'/>\n    },\n    'Waiting for data': {\n        text: 'This system is configured, please allow 24 hours for your upload to complete.',\n        icon: <InProgressIcon color='#2B9AF3' size='sm'/>\n    },\n    'Under pressure': {\n        text: 'System resources adequate but experiencing occasional peaks.',\n        icon: <TachometerAltIcon color='#030303' size='sm'/>\n    }\n}[val] || {});\n\nexport const SystemState = ({ stateValue }) =>  {\n    const { text, icon } = stateDetails(stateValue);\n    return (\n        <span>\n            <span>\n                { text ?\n                    <Tooltip content={<div>{ text }</div>}>\n                        <span>{ icon } { stateValue }</span>\n                    </Tooltip>\n                    : stateValue }\n            </span>\n        </span>\n    );\n};\n\nSystemState.propTypes = {\n    stateValue: propTypes.string\n};\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport { Link } from 'react-router-dom';\nimport React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExpandedRow } from '../Components/RosTable/ExpandedRow';\nimport { ProgressScoreBar } from '../Components/RosTable/ProgressScoreBar';\nimport { SystemState } from '../Components/RosTable/SystemState';\nimport { NO_DATA_VALUE, NO_DATA_STATE } from '../constants';\n\nexport const systemName = (displayName, id, { inventory_id: inventoryId, isDeleted, state }) => {\n    return (\n        isDeleted ? (\n            <Tooltip content={<div>{displayName} has been deleted from inventory</div>}>\n                <span tabIndex=\"0\">{ displayName }</span>\n            </Tooltip>\n        ) :\n            state === NO_DATA_STATE ?\n                (\n                    <span>{ displayName }</span>\n                ) :\n                (\n                    <Link to={{ pathname: `/${inventoryId}` }} className={ `pf-link system-link link-${inventoryId}` }>\n                        { displayName }\n                    </Link>\n                )\n\n    );\n};\n\nexport const displayState = (data) => {\n    return (<SystemState stateValue={ data }/>);\n};\n\nexport const scoreProgress = () => (data, id, { state }) => {\n    return (\n        state === NO_DATA_STATE ?\n            <span>{ NO_DATA_VALUE }</span> :\n            <ProgressScoreBar measureLocation='outside'\n                utilizedValue={data} />\n    );\n};\n\nexport const recommendations = (data, id, { inventory_id: inventoryId, isDeleted, state }) => {\n    return (\n        isDeleted ? <span>{ state === NO_DATA_STATE ? NO_DATA_VALUE : data }</span>\n            : state === NO_DATA_STATE ?\n                (\n                    <span>{ NO_DATA_VALUE }</span>\n                )\n                : (\n                    <Link to={{ pathname: `/${inventoryId}` }}\n                        className={ `pf-link link-${inventoryId}` }>\n                        { data }\n                    </Link>\n                )\n    );\n};\n\nconst addExpandedView = (rowData) => {\n    const {\n        id, cloud_provider: cloudProvider, instance_type: instanceType,\n        idling_time: idlingTime, io_wait: ioWait\n    } = rowData;\n    return (<ExpandedRow { ...{ id, cloudProvider, instanceType, idlingTime, ioWait } } />);\n};\n\nfunction modifyInventory(columns, state) {\n\n    return {\n        ...state,\n        columns,\n        rows: state.rows.map((row) => ({\n            ...row,\n            children: addExpandedView(row)\n        })),\n        loaded: true\n    };\n}\n\nconst openExpandedView = (state, action) => {\n    return {\n        ...state,\n        rows: state.rows.map(row => ({\n            ...row,\n            isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n        }))\n    };\n};\n\nexport const entitiesReducer = ({ LOAD_ENTITIES_FULFILLED }, columns) => applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: (state) =>  modifyInventory(columns, state),\n    ['EXPAND_ROW']: openExpandedView\n});\n","import { Tooltip } from '@patternfly/react-core';\nimport React from 'react';\nimport { NO_DATA_STATE, NO_DATA_VALUE } from '../../constants';\nimport './DiskUsage.scss';\n\nexport const diskUsageTitle = () =>{\n    return (\n        <Tooltip content={<span>IOPS</span>}>\n            <span>I/O utilization</span>\n        </Tooltip>\n    );\n};\n\nexport const DiskUsageData = (data, id, item) => {\n    const { state, performance_utilization: performanceUtilization } = item;\n    const { io_all: iopsAll } = performanceUtilization;\n\n    return (\n        state === NO_DATA_STATE ?\n            <span>{ NO_DATA_VALUE }</span> :\n            <Tooltip position=\"right\" content={\n                <div>\n                    <table>\n                        <tr>\n                            <th>Device name</th>\n                            <th>Value</th>\n                        </tr>\n                        <tr>\n                            <td colSpan=\"100%\" className=\"seperator\"></td>\n                        </tr>\n                        {\n                            Object.keys(iopsAll).map((deviceName, index) =>{\n                                return (\n                                    <tr key={index}>\n                                        <td>{deviceName}</td>\n                                        <td>{iopsAll[deviceName]}</td>\n                                        <td>IOPS</td>\n                                    </tr>\n                                );\n                            })\n                        }\n                    </table>\n                </div>\n            }>\n                <span>{data}</span>\n            </Tooltip>\n    );\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer, systemName, scoreProgress, recommendations, displayState } from '../../store/entitiesReducer';\nimport { loadIsConfiguredInfo } from '../../store/actions';\nimport { CUSTOM_FILTERS, ROS_API_ROOT, SYSTEMS_API_ROOT } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { DiskUsageData, diskUsageTitle } from '../../Components/RosTable/DiskUsage';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'display_name',\n            orderDirection: SortByDirection.asc,\n            columns: [\n                { key: 'display_name', title: 'Name', renderFunc: systemName },\n                { key: 'performance_utilization.cpu', title: 'CPU utilization', renderFunc: scoreProgress() },\n                { key: 'performance_utilization.memory', title: 'Memory utilization', renderFunc: scoreProgress() },\n                { key: 'performance_utilization.max_io', title: diskUsageTitle(), renderFunc: DiskUsageData },\n                { key: 'number_of_suggestions', title: 'Suggestions',\n                    renderFunc: recommendations },\n                { key: 'state', title: 'State', renderFunc: displayState }\n            ],\n            stateFilterValue: []\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state' };\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n\n        return activeFilters.length > 0\n            ? [{\n                category: 'State',\n                chips: activeFilters\n            }]\n            : [];\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: this.state.stateFilterValue\n                            }}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter\n                                    }\n                                );\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, this.state.columns\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: this.state.stateFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                :  this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n"],"names":["ProgressScoreBar","utilizedValue","measureLocation","eleId","Progress","value","className","id","propTypes","valueScore","SystemState","val","stateValue","Oversized","text","icon","color","size","Undersized","Idling","Optimized","Crashloop","Tooltip","content","systemName","displayName","inventoryId","inventory_id","isDeleted","state","tabIndex","NO_DATA_STATE","Link","to","pathname","displayState","data","scoreProgress","NO_DATA_VALUE","recommendations","openExpandedView","action","rows","map","row","isOpen","payload","DiskUsageData","item","iopsAll","performance_utilization","io_all","position","colSpan","Object","keys","deviceName","index","key","RosPage","props","setState","stateFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","length","resetFiltersList","chips","chip","name","activeStateFilters","filterName","includes","activeFilters","perPage","orderBy","orderDirection","SortByDirection","columns","title","renderFunc","sortingHeader","display_name","number_of_suggestions","chunkSize","inventory","React","fetchSystems","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","fetchParams","window","auth","getUser","params","limit","offset","page","order_by","order_how","orderHow","filters","hostnameOrId","url","URL","ROS_API_ROOT","SYSTEMS_API_ROOT","location","origin","query","URLSearchParams","stateFilter","forEach","append","search","toString","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","push","splice","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","SFObject","CUSTOM_FILTERS","showConfigSteps","ServiceNotConfigured","Card","CardBody","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","variant","hideFilters","autoRefresh","customFilters","_items","config","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","total","meta","count","onLoad","LOAD_ENTITIES_FULFILLED","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","applyReducerHash","children","rowData","cloudProvider","cloud_provider","instanceType","instance_type","idlingTime","idling_time","ioWait","io_wait","ExpandedRow","loaded","modifyInventory","setSort","expandable","filterConfig","items","label","type","filterValues","onChange","_e","values","updateStateFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","onExpandClick","_i","expandRow","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","dispatch","actionType","orderByKey","orderByDirection","direction","loadIsConfiguredInfo"],"sourceRoot":""}