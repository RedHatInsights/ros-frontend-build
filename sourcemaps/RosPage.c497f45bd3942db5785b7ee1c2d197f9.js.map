{"version":3,"file":"js/RosPage.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Constants.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nexport const ServiceNotConfigured = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <AsynComponent\n            appId=\"ros_zero_state\"\n            appName=\"dashboard\"\n            module=\"./AppZeroState\"\n            scope=\"dashboard\"\n            ErrorComponent={<ErrorState />}\n            app=\"Resource_Optimization\"\n        />\n    </Suspense>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","// Reports\n\nexport const SYSTEMS_PDF_REPORT_TITLE = 'Insights Resource Optimization Systems Report';\nexport const SYSTEMS_REPORT_FILE_NAME = 'resource_optimization--';\nexport const EXECUTIVE_REPORT_FILE_NAME = 'Resource-Optimization-Executive-Report--';\n\nexport const pdfRowKeys = ['display_name', 'groups', 'os', 'performance_utilization.cpu', 'performance_utilization.memory',\n    'performance_utilization.max_io', 'number_of_suggestions', 'state', 'report_date'];\n\nexport const reportRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'cloud_provider', 'instance_type', 'idling_time', 'report_date', 'groups'];\n\nexport const percentageKeys = ['performance_utilization.cpu', 'performance_utilization.memory', 'idling_time'];\n\nexport const PDF_RECORDS_PER_PAGE = {\n    firstPageCount: 16,\n    otherPageCount: 22\n\n};\n\nexport const REPORT_NOTIFICATIONS = {\n    start: {\n        variant: 'info',\n        title: 'Generating data. Download may take a moment to start.'\n    },\n    success: {\n        variant: 'success',\n        title: 'Export successful'\n    },\n    failure: {\n        variant: 'danger',\n        autoDismiss: false,\n        title: 'Export failed. Please try exporting again.'\n    }\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from './Constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue;\n            if (rowKey === 'groups') {\n                rowValue =  get(systemItem, rowKey, []);\n                rowValue = rowValue.length === 0  ? 'No group' : rowValue[0].name;\n\n            } else {\n                rowValue =   get(systemItem, rowKey, '');\n                rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n                rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n                rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n            }\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n    const hasgroupFilter = filters?.groupFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter || hasgroupFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasgroupFilter ? filterText.concat(`Groups: ${filters.groupFilter.toString()}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\n","import { StyleSheet } from '@react-pdf/renderer';\nimport global_BorderColor_300 from '@patternfly/react-tokens/dist/js/global_BorderColor_300';  /* eslint-disable-line camelcase */\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingLeft: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 4\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingLeft: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occurrenceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 7,\n        color: '#6A6E73'\n    },\n    instanceTypeHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 20\n    },\n    instanceTypeHeadingFirst: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B'\n    },\n    instanceTypeDesc: {\n        fontSize: 10,\n        textAlign: 'left',\n        marginBottom: 4\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    tableRowBackground: {\n        backgroundColor: global_BorderColor_300.value  /* eslint-disable-line camelcase */\n    },\n    instanceTableHeading: {\n        fontSize: 10,\n        color: '#6A6E73',\n        paddingBottom: 4,\n        fontWeight: 'bold'\n    },\n    bold: {\n        fontFamily: 'Helvetica-Bold',\n        fontWeight: 700\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport 'fast-text-encoding';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'Group', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            groupFilter: filters.groupFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf');\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters)\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import React, { Fragment, useState } from 'react';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport { EXECUTIVE_REPORT_FILE_NAME, REPORT_NOTIFICATIONS } from './Constants';\nimport { Button } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport = async () =>{\n        const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`;\n        const fileName = `${EXECUTIVE_REPORT_FILE_NAME}${currentDate}`;\n\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportBlob = await fetchExecutiveReport();\n            const url = window.URL.createObjectURL(executiveReportBlob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n            setLoading(false);\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <Button\n                variant=\"link\"\n                icon={<ExportIcon />}\n                iconPosition=\"left\"\n                onClick={() => generateExecutivePDFReport()}\n                isDisabled={loading || isDisabled}\n                className='downloadButtonOverride'>\n                {  loading\n                    ? 'Loading...'\n                    : 'Download executive report'\n                }\n            </Button>\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    PAGE,\n    PER_PAGE,\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM,\n    SERVICE_NAME\n} from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { useLocation } from 'react-router-dom';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: PER_PAGE,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            groupFilterValue: [],\n            disableExport: true,\n            osFilterValue: [],\n            OSFObject: {}\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            groups: 'group_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome?.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n        this.processFilterValues();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    processFilterValues() {\n        let osObject = {};\n        osObject.label = 'Operating system';\n        osObject.type = conditionalFilterType.checkbox;\n        osObject.filterValues = {};\n\n        // API call to systems endpoint\n        this.fetchSystems({\n            perPage: -1,\n            orderBy: 'os',\n            orderHow: SortByDirection.desc\n        }).then((response) => {\n            osObject.filterValues.items = Array.from(new Set((response.data).reduce((filtered, system) => {\n                if (system.os) {\n                    filtered.push(system.os);\n                }\n\n                return filtered;\n            }, []))).map(os => {\n                return { label: os, value: os.split(' ')[1] };\n            });\n\n            if (osObject.filterValues.items.length === 0) {\n                osObject.filterValues.items = [{ label: 'No versions available' }];\n                osObject.type = conditionalFilterType.group;\n            }\n\n            this.setState({\n                OSFObject: osObject\n            });\n        });\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        let params = {\n            limit: fetchParams.perPage,\n            ...fetchParams?.page && {\n                offset: (fetchParams.page - 1) * fetchParams.perPage\n            },\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n            query.append('group_name', groupFilterValue);\n        });\n\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetFiltersList = deletedOSFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications());\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue, groupFilterValue,\n            orderBy, orderDirection, disableExport, isColumnModalOpen,\n            OSFObject } = this.state;\n\n        const customFilterConfig = {\n            items: [\n                {\n                    label: SFObject.label,\n                    type: SFObject.type,\n                    value: `checkbox-state`,\n                    filterValues: {\n                        items: SFObject.filterValues.items,\n                        onChange: (_e, values) => this.updateStateFilter(values),\n                        value: stateFilterValue\n                    }\n                },\n                {\n                    label: OSFObject.label,\n                    type: OSFObject.type,\n                    value: `checkbox-os`,\n                    filterValues: {\n                        items: OSFObject.filterValues?.items,\n                        onChange: (_e, values) => this.updateOSFilter(values),\n                        value: osFilterValue\n                    }\n                }\n            ]\n        };\n\n        return (\n            this.props.showConfigSteps\n                ? <ServiceNotConfigured />\n                : <React.Fragment>\n                    <PageHeader className='ros-page-header'>\n                        <PageHeaderTitle title='Resource Optimization'/>\n                        <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                    </PageHeader>\n\n                    <Main>\n                        <Card className='pf-t-light  pf-m-opaque-100'>\n                            <CardBody>\n                                <ManageColumnsModal\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={this.setColumnModalOpen}\n                                    modalColumns={this.props.columns}\n                                    saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                                />\n                                <InventoryTable\n                                    disableDefaultColumns\n                                    ref={this.inventory}\n                                    hasCheckbox={ false }\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        className: 'ros-systems-table'\n                                    }}\n                                    variant=\"compact\"\n                                    hideFilters={{ all: true, name: false, hostGroupFilter: false }}\n                                    autoRefresh= {true}\n                                    customFilters={{\n                                        stateFilter: stateFilterValue,\n                                        osFilter: osFilterValue\n                                    }}\n                                    columns={activeColumns}\n                                    getEntities={async (_items, config) => {\n                                        this.setState(() => ({\n                                            orderBy: config.orderBy,\n                                            orderDirection: config.orderDirection,\n                                            nameFilterValue: config.filters?.hostnameOrId,\n                                            groupFilterValue: config?.filters?.hostGroupFilter // the group filter is set by Inventory\n                                        }));\n                                        const results = await this.fetchSystems(\n                                            {\n                                                page: config.page, perPage: config.per_page,\n                                                orderBy: this.sortingHeader[config.orderBy],\n                                                orderHow: config.orderDirection,\n                                                filters: config.filters,\n                                                stateFilter: config.stateFilter,\n                                                osFilter: config.osFilter,\n                                                groupFilter: config?.filters?.hostGroupFilter // the group filter is set by Inventory\n                                            }\n                                        );\n\n                                        const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                        const invSystems = await this.fetchInventoryDetails(invIds, {\n                                            ...config,\n                                            orderBy: undefined,\n                                            orderDirection: undefined,\n                                            page: PAGE,\n                                            hasItems: true\n                                        });\n\n                                        const disableExport = results?.meta?.count === 0;\n                                        this.setState(() => ({\n                                            disableExport\n                                        }));\n\n                                        return {\n                                            results: results.data.map((system) => {\n                                                const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                                return ({\n                                                    ...invRec,\n                                                    ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                                    ...system\n                                                });\n                                            }),\n                                            total: results.meta.count,\n                                            page: config.page,\n                                            per_page: config.per_page /* eslint-disable-line camelcase */\n                                        };\n                                    }}\n                                    onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                        this.setState({\n                                            getEntities: api?.getEntities\n                                        });\n                                        register({\n                                            ...mergeWithEntities(\n                                                entitiesReducer(\n                                                    INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                                )\n                                            )\n                                        });\n                                        this.props.setSort(orderBy, orderDirection, 'CHANGE_SORT');\n                                    }}\n                                    expandable='true'\n                                    filterConfig={customFilterConfig}\n                                    activeFiltersConfig={{\n                                        filters: this.getActiveFilterConfig(),\n                                        onDelete: this.onDeleteFilters\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '',\n                                            {\n                                                label: 'Manage columns',\n                                                onClick: () => this.setColumnModalOpen(true)\n                                            }\n                                        ]\n                                    }}\n                                    exportConfig={{\n                                        isDisabled: disableExport,\n                                        extraItems: [\n                                            <li key='pdf-button-item' role='menuitem'>\n                                                <Button\n                                                    key='pdf-download-button'\n                                                    variant='none'\n                                                    className=\"pf-v5-c-dropdown pf-v5-c-dropdown__menu-item\"\n                                                    onClick={() => this.setExportSystemsPDF(true)}>\n                                                Export to PDF\n                                                </Button>\n                                            </li>\n                                        ],\n                                        ouiaId: 'export',\n                                        onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                                    }}\n                                    onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                                >\n                                </InventoryTable>\n                                {exportSystemsPDF &&\n                                <DownloadSystemsPDFReport\n                                    showButton={false}\n                                    onSuccess={() => this.setExportSystemsPDF(false)}\n                                    filters={{\n                                        stateFilter: stateFilterValue,\n                                        hostnameOrId: nameFilterValue,\n                                        osFilter: osFilterValue,\n                                        groupFilter: groupFilterValue\n                                    }}\n                                    orderBy={orderBy}\n                                    orderHow={orderDirection}\n                                />\n                                }\n                            </CardBody>\n                        </Card>\n                    </Main>\n                </React.Fragment>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.hasRead === false\n                            ? <NotAuthorized serviceName={SERVICE_NAME} />\n                            : this.renderConfigStepsOrTable()\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    chrome: PropTypes.object\n};\n\nconst RosPageWithChrome =  props => {\n    const chrome = useChrome();\n    const location = useLocation();\n\n    return (\n        <RosPage {...props} chrome={ chrome } location={ location }/>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RosPageWithChrome);\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API, SUGGESTED_INSTANCE_TYPES_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        groups: 'group_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n        query.append('group_name', groupFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n\nexport const fetchSuggestedInstanceTypes = async (fetchParams) => {\n    const { page, perPage, activeSortColumnKey, activeSortDirection } = fetchParams || {};\n\n    let url = new URL(\n        ROS_API_ROOT + SUGGESTED_INSTANCE_TYPES_API,\n        window.location.origin\n    );\n\n    let params = {\n        page,\n        per_page: perPage, /* eslint-disable-line camelcase */\n        order_by: activeSortColumnKey, /* eslint-disable-line camelcase */\n        order_how: activeSortDirection, /* eslint-disable-line camelcase */\n        ...fetchParams?.instanceTypeName  && {\n            instance_type: fetchParams.instanceTypeName /* eslint-disable-line camelcase */\n        }\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n    return response;\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured, fetchSuggestedInstanceTypes } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n\nexport const loadSuggestedInstanceTypes = (params) =>({\n    type: 'LOAD_SUGGESTED_INSTANCE_TYPES',\n    payload: fetchSuggestedInstanceTypes(params)\n});\n"],"names":["ServiceNotConfigured","Suspense","fallback","Bullseye","Spinner","A","appId","appName","module","scope","ErrorComponent","app","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","currentColumns","setCurrentColumns","useState","handleCancel","Modal","title","onClose","isOpen","variant","description","TextContent","Text","component","TextVariants","p","Split","hasGutter","SplitItem","Button","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","pdfRowKeys","reportRowKeys","percentageKeys","PDF_RECORDS_PER_PAGE","firstPageCount","otherPageCount","REPORT_NOTIFICATIONS","start","success","failure","autoDismiss","formatData","data","type","systemsRowsData","rowKeys","systemItem","rowData","rowKey","rowValue","get","length","name","toString","includes","dateStringByType","Date","push","generateFilterText","filters","filterText","filterSeparatorOnLine","hasStateFilter","stateFilter","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","hasgroupFilter","groupFilter","concat","sort","getSystemsReportFileName","toISOString","replace","split","create","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingLeft","flex","headerCell","systemNameCell","paddingRight","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occurrenceHeading","execInfoText","instanceTypeHeading","instanceTypeHeadingFirst","instanceTypeDesc","flexRow","tableRowBackground","backgroundColor","global_BorderColor_300","value","instanceTableHeading","fontWeight","bold","fontFamily","columnBuilder","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useEffect","reportName","fileName","size","orientation","allPagesHaveTitle","asyncFunction","async","fetchSystemParams","systemsResponse","pdfData","firstPageProps","splice","meta","count","otherPages","systemsPage","generateSystemsPDFReport","DownloadExecutivePDFReport","loading","setLoading","icon","iconPosition","executiveReportBlob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","remove","error","generateExecutivePDFReport","className","RosPage","constructor","super","this","state","perPage","orderDirection","desc","stateFilterValue","isColumnModalOpen","exportSystemsPDF","nameFilterValue","groupFilterValue","disableExport","osFilterValue","OSFObject","sortingHeader","display_name","groups","os","number_of_suggestions","report_date","chunkSize","inventory","fetchSystems","bind","componentDidMount","chrome","hideGlobalFilter","appAction","isROSConfigured","processQueryParams","processFilterValues","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","setState","osObject","checkbox","filterValues","then","response","items","Array","from","Set","reduce","filtered","system","label","group","clearStateQueryParams","delete","history","replaceState","origin","pathname","hash","fetchParams","params","limit","offset","order_by","order_how","query","forEach","append","fetch","res","ok","Error","statusText","json","chunkIdsArray","ids","idsChunks","fetchInventoryDetails","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","records","getEntities","idsInBatches","Promise","all","updateStateFilter","updateOSFilter","onDeleteFilters","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","resetFiltersList","chips","chip","activeStateFilters","filterName","activeOSFilters","getActiveFilterConfig","activeFilters","setColumnModalOpen","modalState","getActiveColumns","columns","setExportSystemsPDF","onExportOptionSelect","fileType","addNotification","clearNotifications","format","showNotification","clearNotification","JSON","stringify","responseToJSONData","header","Object","keys","join","row","fieldName","responseToCSVData","downloadFile","downloadReport","notification","renderConfigStepsOrTable","SFObject","activeColumns","customFilterConfig","_e","values","showConfigSteps","PageHeader","PageHeaderTitle","Main","Card","CardBody","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","hostGroupFilter","autoRefresh","customFilters","_items","config","inventory_id","inventoryId","invSystems","undefined","hasItems","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","entitiesReducer","setSort","expandable","filterConfig","activeFiltersConfig","onDelete","actionsConfig","exportConfig","extraItems","role","ouiaId","onSelect","_event","onExpandClick","_i","expandRow","showButton","onSuccess","render","Consumer","permissions","hasRead","NotAuthorized","serviceName","isConfiguredReducer","systemColumnsReducer","actionType","payload","orderByKey","orderByDirection","direction","useChrome","useLocation","handleErrors","result","fetchSystemDetail","fetchSystemRecommendations","options","trim","resp","status","hasError","fetchSystemHistory","fetchExecutiveReport","method","headers","service","template","blob","fetchSuggestedInstanceTypes","activeSortColumnKey","activeSortDirection","instanceTypeName","instance_type","loadSystemInfo","loadSysRecs","loadIsConfiguredInfo","loadSuggestedInstanceTypes"],"sourceRoot":""}