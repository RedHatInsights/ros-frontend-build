{"version":3,"file":"js/RosSystemDetail.1681209595799.7b076efe7877851c25b9.js","mappings":"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","sources":["webpack:///./src/Components/SystemDetail/SystemDetail.js","webpack:///./src/store/entityDetailReducer.js","webpack:///./src/Components/RecommendationRating/RecommendationRating.js","webpack:///./src/Components/HistoricalDataChart/Util.js","webpack:///./src/Components/HistoricalDataChart/HistoricalDataChart.js","webpack:///./src/Routes/RosSystemDetail/RosSystemDetail.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst defaultState = { loaded: false };\n\nconst entityLoaded = (state) => {\n    return {\n        ...state,\n        loaded: true\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITY_FULFILLED }) => applyReducerHash(\n    {\n        [LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { OutlinedThumbsUpIcon } from '@patternfly/react-icons';\nimport { OutlinedThumbsDownIcon } from '@patternfly/react-icons';\nimport { ThumbsUpIcon } from '@patternfly/react-icons';\nimport { ThumbsDownIcon } from '@patternfly/react-icons';\n\nimport './RecommendationRating.scss';\nimport {\n    ROS_API_ROOT,\n    RECOMMENDATION_RATING_API,\n    NEUTRAL_FEEDBACK,\n    POSITIVE_FEEDBACK,\n    NEGATIVE_FEEDBACK  } from '../../constants';\n\nconst RecommendationRating = ({ system }) => {\n    const [rating, setRating] = useState(system.rating);\n    const [submitted, setSubmitted] = useState(false);\n    const updateRecommendationRating = async (newRating) => {\n        const calculatedRating = rating === newRating ? NEUTRAL_FEEDBACK : newRating;\n        try {\n\n            // POST request using fetch with error handling\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    inventory_id: system.inventoryId, /* eslint-disable-line camelcase */\n                    rating: calculatedRating\n                })\n            };\n\n            await fetch(`${ROS_API_ROOT}${RECOMMENDATION_RATING_API}`, requestOptions);\n            setRating(calculatedRating);\n            setSubmitted(true);\n            setTimeout(() => setSubmitted(false), 3000);\n        } catch (error) {\n            console.error(error); // eslint-disable-line no-console\n        }\n    };\n\n    return <span className='ratingSpanOverride'>\n        Is this suggestion helpful?\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-up\"\n            onClick={() => updateRecommendationRating(POSITIVE_FEEDBACK)}\n            ouiaId=\"thumbsUp\">\n            {rating === POSITIVE_FEEDBACK ? <ThumbsUpIcon className='like' size='sm' /> :\n                <OutlinedThumbsUpIcon size='sm' />}\n        </Button>\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-down\"\n            onClick={() => updateRecommendationRating(NEGATIVE_FEEDBACK)}\n            ouiaId=\"thumbsDown\">\n            {rating === NEGATIVE_FEEDBACK ? <ThumbsDownIcon className='dislike' size='sm' /> :\n                <OutlinedThumbsDownIcon size='sm' />}\n        </Button>\n        {submitted && 'Thank you for your feedback!'}\n    </span>;\n};\n\nRecommendationRating.propTypes = {\n    system: PropTypes.object\n};\n\nexport default RecommendationRating;\n","export const formatHistoricalData = (responseData, dateRange) =>{\n\n    const chartData = [];\n    let today = new Date();\n\n    const cpu = {\n        datapoints: []\n    };\n\n    const memory = {\n        datapoints: []\n    };\n\n    let mapResponseData = new Map();\n\n    responseData.reverse().forEach((responseValue) => {\n        mapResponseData.set(new Date(responseValue.report_date).toDateString(), responseValue);\n    });\n\n    for (let index = (dateRange - 1); index >= 0; index--) {\n        let dateToCheck = new Date();\n        dateToCheck =   new Date(dateToCheck.setDate(today.getDate() - index)).toDateString();\n        if (mapResponseData.has(dateToCheck)) {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).cpu\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).memory\n            });\n        }\n        else {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n        }\n    }\n\n    chartData.push(cpu);\n    chartData.push(memory);\n\n    return chartData;\n};\n","import React, { useState, useEffect }  from 'react';\nimport {\n    Chart,\n    ChartAxis,\n    ChartCursorTooltip,\n    ChartGroup,\n    ChartLabel,\n    ChartLine,\n    ChartScatter,\n    ChartThemeColor,\n    createContainer\n} from '@patternfly/react-charts';\nimport {\n    Bullseye, Dropdown, DropdownItem, DropdownToggle,\n    EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title, Tooltip, Flex, FlexItem\n} from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport './HistoricalDataChart.scss';\nimport { fetchSystemHistory } from '../../Utilities/api';\nimport { formatHistoricalData } from './Util';\nimport { DATE_RANGE_49_DAYS, DATE_RANGE_7_DAYS, MONTHS, RANGE_DROPDOWN_45_DAYS } from '../../constants';\nimport propTypes from 'prop-types';\n\nexport const HistoricalDataChart = ({ inventoryId }) => {\n\n    const [isOpen, setOpen] = useState(false);\n    const [dateRange, setDateRange] = useState(DATE_RANGE_7_DAYS);\n    const [chartData, setChartData] = useState([]);\n    const [showError, setError] = useState(false);\n\n    const VictoryZoomVoronoiContainer = createContainer('zoom', 'voronoi');\n\n    useEffect(() => {\n        setChartData([]);\n        async function getHistoricalData() {\n            try {\n                const limit = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS;\n                const historicalDataResponse = await fetchSystemHistory(inventoryId, limit);\n                const formattedChartData = formatHistoricalData(historicalDataResponse.data, dateRange);\n                setChartData(formattedChartData);\n            } catch (error) {\n                setError(true);\n            }\n        }\n\n        getHistoricalData();\n\n    }, [dateRange]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const updateChartRange = (dRange) => {\n        dRange !== dateRange && setChartData([]);\n        setDateRange(dRange);\n        setOpen(!isOpen);\n    };\n\n    const getEntireDomain = () => {\n        const today = new Date();\n        let startDate = new Date();\n        const numberOfDays = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : DATE_RANGE_49_DAYS;\n        startDate =   new Date(startDate.setDate(today.getDate() - numberOfDays));\n\n        const xDomain = [startDate, today];\n\n        return {\n            y: [0, 100],\n            x: xDomain\n        };\n    };\n\n    const dropdownItems = [\n        <DropdownItem key=\"action_7\" component=\"button\" onClick={() => updateChartRange(DATE_RANGE_7_DAYS)}>Last 7 Days</DropdownItem>,\n        <DropdownItem key=\"action_45\" component=\"button\" onClick={() => updateChartRange(DATE_RANGE_49_DAYS)}>Last 45 Days</DropdownItem>\n    ];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const displayError = () => {\n        return  <FlexItem alignSelf={{ default: 'alignSelfBaseline' }}>\n            <EmptyState variant={EmptyStateVariant.small}>\n                <Title headingLevel=\"h2\" size=\"lg\">\n                    Something went wrong\n                </Title>\n                <EmptyStateBody>\n                    There was a problem while requesting historical data. Please try again later.\n                </EmptyStateBody>\n            </EmptyState>\n        </FlexItem>;\n    };\n\n    const getTooltipLabels = (datum) => {\n        const xDate = new Date(datum.x);\n        const isToday = new Date().toDateString() === xDate.toDateString();\n        let xDateString = isToday ? 'Today' : `${xDate.getDate()} ${MONTHS[xDate.getMonth()]}`;\n        xDateString = datum.name.includes('CPU') ? `${xDateString}\\n   \\n` : '';\n        return datum.childName.includes('scatter-')\n                && datum.y !== null ? `${xDateString}${datum.name}: ${datum.y}%` : null;\n    };\n\n    const displayChart = () => {\n        return  chartData.length === 0 ?\n            <FlexItem alignSelf={{ default: 'alignSelfBaseline' }}>\n                <Bullseye>\n                    <Spinner size=\"xl\" aria-labelledby=\"loading-historical-chart\"/>\n                </Bullseye>\n            </FlexItem> :\n            <Flex direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfBaseline' }} align={{ default: 'alignRight' }}>\n                <FlexItem align={{ default: 'alignRight' }}>\n                    <div className=\"chartDateFilter\">\n                        <Tooltip content={<div>Scroll and pan to zoom and move</div>}>\n                            <OutlinedQuestionCircleIcon size='sm' />\n                        </Tooltip>\n                        <Dropdown\n                            className='dateDropdown'\n                            toggle={\n                                <DropdownToggle\n                                    id='chart-date-toggle'\n                                    onToggle={onToggle}\n                                    toggleIndicator={CaretDownIcon} >\n                                    {`Last ${dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS} Days`}\n                                </DropdownToggle>\n                            }\n                            isOpen={isOpen}\n                            dropdownItems={dropdownItems}\n                        />\n                    </div>\n                </FlexItem>\n                <FlexItem align={{ default: 'alignRight' }} className='historical-chart-panel'>\n                    <Chart\n                        domain={getEntireDomain()}\n                        scale={{ x: 'time', y: 'linear' }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer\n                                labels={({ datum }) => getTooltipLabels(datum)}\n                                labelComponent={\n                                    <ChartCursorTooltip\n                                        labelComponent={<ChartLabel\n                                            style={[\n                                                { fill: 'white', fontSize: 16,  fontWeight: 700 },\n                                                { fill: 'white' },\n                                                { fill: 'white' },\n                                                { fill: 'white' }\n                                            ]}/>}\n                                    />\n                                }\n                                constrainToVisibleArea\n                                voronoiDimension=\"x\"\n                                zoomDimension=\"x\"\n                            />\n                        }\n                        legendData={[{ name: 'CPU Utilization' }, { name: 'Memory Utilization' }]}\n                        legendOrientation=\"vertical\"\n                        legendPosition=\"right\"\n                        height={275}\n                        width={756}\n                        maxDomain={{ y: 100 }}\n                        minDomain={{ y: 0 }}\n                        padding={{\n                            bottom: 50,\n                            left: 50,\n                            right: 165, // Adjusted to accommodate legend\n                            top: 50\n                        }}\n                        themeColor={ChartThemeColor.blue}>\n\n                        <ChartAxis\n                            tickValues={chartData[0].datapoints.map(d => d.x)}\n                            tickFormat={(x) => {\n                                const isToday = new Date().toDateString() === new Date(x).toDateString();\n                                return isToday ? 'Today' : `${new Date(x).getDate()} ${MONTHS[new Date(x).getMonth()]}`;}\n                            }\n                            fixLabelOverlap\n                            tickCount={6}\n\n                        />\n                        <ChartAxis\n                            dependentAxis showGrid\n                            tickValues={[0, 20, 40, 60, 80, 100]}\n                            tickFormat={(t) => `${t}%`} />\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartScatter\n                                        data={s.datapoints}\n                                        key={'scatter-' + idx}\n                                        name={'scatter-' + idx}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartLine\n                                        key={'line-' + idx}\n                                        name={'line-' + idx}\n                                        data={s.datapoints}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                    </Chart>\n                </FlexItem>\n            </Flex>;\n    };\n\n    return (\n        showError ?  displayError() : displayChart()\n    );\n\n};\n\nHistoricalDataChart.propTypes = {\n    inventoryId: propTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Breadcrumb, BreadcrumbItem, Spinner } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { InventoryDetailHead, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport { loadSystemInfo } from '../../store/actions';\nimport { entityDetailReducer } from '../../store/entityDetailReducer';\nimport './ros-details-page.scss';\nimport { ExpandedRow } from '../../Components/RosTable/ExpandedRow';\nimport RecommendationRating from '../../Components/RecommendationRating/RecommendationRating';\nimport { SystemState } from '../../Components/RosTable/SystemState';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { PermissionContext } from '../../App';\nimport { displayLastReported } from '../../Components/RosTable/RenderColumn';\nimport {\n    Flex,\n    FlexItem,\n    Stack,\n    StackItem,\n    DescriptionList,\n    DescriptionListTerm,\n    DescriptionListGroup,\n    DescriptionListDescription\n} from '@patternfly/react-core';\nimport { HistoricalDataChart } from '../../Components/HistoricalDataChart/HistoricalDataChart';\nimport SystemDetailWrapper from '../../Components/SystemDetail/SystemDetail';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\n\nclass RosSystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    async componentDidMount() {\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome.appAction('system-detail');\n        await this.props.loadSystemInfo(this.state.inventoryId);\n        document.title = this.props.rosSystemInfo.display_name;\n    }\n\n    renderChildrenNode() {\n        if (this.props.rosSystemInfo) {\n            const {\n                cloud_provider: cloudProvider,\n                instance_type: instanceType,\n                idling_time: idlingTime,\n                report_date: reportDate,\n                rating,\n                state\n            } = this.props.rosSystemInfo;\n            const { inventoryId } = this.props.match.params;\n            return (\n\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                    <Flex grow={{ default: 'grow' }} className='ros-system-info'>\n                        <Flex flex={{ default: 'flex_4' }} direction={{ default: 'column' }}>\n                            <FlexItem>\n                                <DescriptionList className='expanded-row' isCompact isHorizontal>\n                                    <DescriptionListGroup>\n                                        <DescriptionListTerm>Last reported</DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                            { displayLastReported(reportDate) }\n                                        </DescriptionListDescription>\n                                    </DescriptionListGroup>\n                                    <DescriptionListGroup>\n                                        <DescriptionListTerm>State</DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                            <SystemState stateValue={ state }/>\n                                        </DescriptionListDescription>\n                                    </DescriptionListGroup>\n                                </DescriptionList>\n                                <ExpandedRow\n                                    { ...{ cloudProvider, instanceType, idlingTime, inventoryId } }\n                                />\n                                <RecommendationRating system={{ rating, inventoryId }} />\n                            </FlexItem>\n                        </Flex>\n                        <Flex grow={{ default: 'grow' }} direction={{ default: 'column' }} >\n                            <HistoricalDataChart inventoryId={inventoryId}/>\n                        </Flex>\n                    </Flex>\n                </Flex>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const entity = this.props.entity;\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.systemsRead === false\n                            ? <NotAuthorized serviceName='Resource Optimization'/>\n                            : <DetailWrapper\n                                inventoryId={this.state.inventoryId}\n                                onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    register(mergeWithDetail(\n                                        entityDetailReducer(INVENTORY_ACTION_TYPES)\n                                    ));\n                                }}\n                                className='rosDetailWrapper'\n                            >\n                                <PageHeader>\n                                    <Breadcrumb ouiaId=\"system-detail\">\n                                        <BreadcrumbItem>\n                                            <Link to='/'>Resource Optimization</Link>\n                                        </BreadcrumbItem>\n                                        <BreadcrumbItem isActive>\n                                            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                                                { entity ? entity.display_name : null }\n                                            </div>\n                                        </BreadcrumbItem>\n                                    </Breadcrumb>\n\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <InventoryDetailHead\n                                                hideBack\n                                                showDelete={ false }\n                                                hideInvDrawer\n                                                className='rosDetailsHead'\n                                            />\n                                        </StackItem>\n                                        <StackItem isFilled>{ this.renderChildrenNode() }</StackItem>\n                                    </Stack>\n                                </PageHeader>\n                                <Main>\n                                    <Grid gutter=\"md\">\n                                        <GridItem span={12}>\n                                            { entity ? <SystemDetailWrapper showTags fallback=\"\"/> : <Spinner/>}\n                                        </GridItem>\n                                    </Grid>\n                                </Main>\n                            </DetailWrapper>\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    }\n};\n\nRosSystemDetail.propTypes = {\n    match: PropTypes.any,\n    entity: PropTypes.object,\n    loading: PropTypes.bool,\n    rosSystemInfo: PropTypes.object,\n    loadSystemInfo: PropTypes.func,\n    chrome: PropTypes.object\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        entity: state.entityDetails && state.entityDetails.entity,\n        loading: state.systemDetailReducer?.loading,\n        rosSystemInfo: state.systemDetailReducer?.systemInfo,\n        ...props\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadSystemInfo: (uuid) => dispatch(loadSystemInfo(uuid))\n    };\n}\n\nconst RosSystemDetailWithChrome = props => {\n    const chrome = useChrome();\n\n    return (\n        <RosSystemDetail { ...props } chrome={ chrome } />\n    );\n};\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps)(RosSystemDetailWithChrome)\n);\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["SystemRecommendations","React","SystemDetail","props","inventoryId","useSelector","entityDetails","entity","id","Suspense","fallback","SystemDetailWrapper","getRegistry","useState","Wrapper","setWrapper","useEffect","register","systemRecsReducer","Provider","Fragment","store","getStore","Bullseye","Spinner","size","propTypes","PropTypes","defaultState","loaded","entityLoaded","state","RecommendationRating","system","rating","setRating","submitted","setSubmitted","updateRecommendationRating","newRating","calculatedRating","NEUTRAL_FEEDBACK","requestOptions","method","headers","body","JSON","stringify","inventory_id","fetch","ROS_API_ROOT","RECOMMENDATION_RATING_API","setTimeout","console","error","className","Button","variant","onClick","POSITIVE_FEEDBACK","ouiaId","NEGATIVE_FEEDBACK","formatHistoricalData","responseData","dateRange","chartData","today","Date","cpu","datapoints","memory","mapResponseData","Map","reverse","forEach","responseValue","set","report_date","toDateString","index","dateToCheck","setDate","getDate","has","push","name","x","y","get","HistoricalDataChart","isOpen","setOpen","DATE_RANGE_7_DAYS","setDateRange","setChartData","showError","setError","VictoryZoomVoronoiContainer","createContainer","limit","RANGE_DROPDOWN_45_DAYS","fetchSystemHistory","historicalDataResponse","formattedChartData","data","getHistoricalData","startDate","numberOfDays","updateChartRange","dRange","dropdownItems","DropdownItem","key","component","DATE_RANGE_49_DAYS","FlexItem","alignSelf","default","EmptyState","EmptyStateVariant","Title","headingLevel","EmptyStateBody","length","Flex","direction","align","Tooltip","content","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","Chart","domain","scale","containerComponent","labels","datum","xDate","xDateString","MONTHS","getMonth","includes","childName","labelComponent","ChartCursorTooltip","ChartLabel","style","fill","fontSize","fontWeight","constrainToVisibleArea","voronoiDimension","zoomDimension","legendData","legendOrientation","legendPosition","height","width","maxDomain","minDomain","padding","bottom","left","right","top","themeColor","ChartThemeColor","ChartAxis","C","tickValues","map","d","tickFormat","fixLabelOverlap","tickCount","dependentAxis","showGrid","t","ChartGroup","s","idx","ChartScatter","ChartLine","RosSystemDetail","match","params","chrome","this","hideGlobalFilter","appAction","loadSystemInfo","document","title","rosSystemInfo","display_name","cloudProvider","cloud_provider","instanceType","instance_type","idlingTime","idling_time","reportDate","alignItems","grow","flex","DescriptionList","isCompact","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","displayLastReported","SystemState","stateValue","ExpandedRow","value","permissions","systemsRead","NotAuthorized","serviceName","DetailWrapper","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","applyReducerHash","entityDetailReducer","PageHeader","Breadcrumb","BreadcrumbItem","Link","to","isActive","Stack","hasGutter","StackItem","InventoryDetailHead","hideBack","showDelete","hideInvDrawer","isFilled","renderChildrenNode","Main","Grid","gutter","GridItem","span","showTags","loading","withRouter","connect","systemDetailReducer","systemInfo","dispatch","uuid","useChrome","handleErrors","response","ok","Error","statusText","isROSConfigured","url","URL","IS_CONFIGURED_API","window","location","origin","then","res","json","result","fetchSystemDetail","SYSTEMS_API_ROOT","fetchSystemRecommendations","options","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","fetchSystems","fetchParams","orderBy","orderHow","order_by","os","number_of_suggestions","order_how","SortByDirection","filters","hostnameOrId","query","stateFilter","stateFilterValue","append","osFilter","osFilterValue","fetchExecutiveReport","CRC_PDF_GENERATE_API","service","template","blob","type","payload","loadSysRecs","loadIsConfiguredInfo","changeSystemColumns"],"sourceRoot":""}