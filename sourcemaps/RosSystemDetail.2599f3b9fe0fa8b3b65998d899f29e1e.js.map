{"version":3,"file":"js/RosSystemDetail.1644846456540.2b7f2529a0ca069a5a39.js","mappings":"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","sources":["webpack:///./src/Components/RosTable/ExpandedRow.js","webpack:///./src/Components/SystemDetail/SystemDetail.js","webpack:///./src/store/entityDetailReducer.js","webpack:///./src/Components/RecommendationRating/RecommendationRating.js","webpack:///./src/Routes/RosSystemDetail/RosSystemDetail.js","webpack:///./src/constants.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    TextContent,\n    TextList,\n    TextListVariants,\n    TextListItem,\n    TextListItemVariants\n} from '@patternfly/react-core';\nimport { NO_DATA_VALUE } from '../../constants';\n\nexport const ExpandedRow = ({ inventoryId, cloudProvider, instanceType, idlingTime }) =>  {\n\n    const cloudProviderValue = cloudProvider === null ? NO_DATA_VALUE : cloudProvider;\n    const instanceTypeValue = instanceType === null ? NO_DATA_VALUE : instanceType;\n    const idlingTimeValue = idlingTime === null ? NO_DATA_VALUE : `${idlingTime}%`;\n\n    const inlineFieldsArray = [\n        { label: 'Provider', value: cloudProviderValue },\n        { label: 'Instance type', value: instanceTypeValue },\n        { label: 'Idling time', value: idlingTimeValue }\n    ];\n\n    return (\n        <TextContent className='expanded-row'>\n            <TextList id={inventoryId} component={TextListVariants.dl}>\n                { inlineFieldsArray.map((field, index) => (\n                    <React.Fragment key={index} >\n                        <TextListItem component={TextListItemVariants.dt}>{ field.label }</TextListItem>\n                        <TextListItem component={TextListItemVariants.dd}>{ field.value }</TextListItem>\n                    </React.Fragment>\n                ))}\n            </TextList>\n        </TextContent>\n    );\n};\n\nExpandedRow.propTypes = {\n    inventoryId: propTypes.string,\n    cloudProvider: propTypes.string,\n    instanceType: propTypes.string,\n    idlingTime: propTypes.string\n};\n","import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport SystemDetail from '../Components/SystemDetail/SystemDetail';\n\nconst defaultState = { loaded: false };\n\nconst entityLoaded = (state) => {\n    return {\n        ...state,\n        loaded: true,\n        activeApps: [\n            {\n                title: 'Resource optimization',\n                name: 'resource optimization',\n                component: SystemDetail\n            }\n        ]\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITY_FULFILLED }) => applyReducerHash(\n    {\n        [LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { OutlinedThumbsUpIcon } from '@patternfly/react-icons';\nimport { OutlinedThumbsDownIcon } from '@patternfly/react-icons';\nimport { ThumbsUpIcon } from '@patternfly/react-icons';\nimport { ThumbsDownIcon } from '@patternfly/react-icons';\n\nimport './RecommendationRating.scss';\nimport {\n    ROS_API_ROOT,\n    RECOMMENDATION_RATING_API,\n    NEUTRAL_FEEDBACK,\n    POSITIVE_FEEDBACK,\n    NEGATIVE_FEEDBACK  } from '../../constants';\n\nconst RecommendationRating = ({ system }) => {\n    const [rating, setRating] = useState(system.rating);\n    const [submitted, setSubmitted] = useState(false);\n    const updateRecommendationRating = async (newRating) => {\n        const calculatedRating = rating === newRating ? NEUTRAL_FEEDBACK : newRating;\n        try {\n\n            // POST request using fetch with error handling\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    inventory_id: system.inventoryId, /* eslint-disable-line camelcase */\n                    rating: calculatedRating\n                })\n            };\n\n            await fetch(`${ROS_API_ROOT}${RECOMMENDATION_RATING_API}`, requestOptions);\n            setRating(calculatedRating);\n            setSubmitted(true);\n            setTimeout(() => setSubmitted(false), 3000);\n        } catch (error) {\n            console.error(error); // eslint-disable-line no-console\n        }\n    };\n\n    return <span className='ratingSpanOverride'>\n        Is this suggestion helpful?\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-up\"\n            onClick={() => updateRecommendationRating(POSITIVE_FEEDBACK)}\n            ouiaId=\"thumbsUp\">\n            {rating === POSITIVE_FEEDBACK ? <ThumbsUpIcon className='like' size='sm' /> :\n                <OutlinedThumbsUpIcon size='sm' />}\n        </Button>\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-down\"\n            onClick={() => updateRecommendationRating(NEGATIVE_FEEDBACK)}\n            ouiaId=\"thumbsDown\">\n            {rating === NEGATIVE_FEEDBACK ? <ThumbsDownIcon className='dislike' size='sm' /> :\n                <OutlinedThumbsDownIcon size='sm' />}\n        </Button>\n        {submitted && 'Thank you for your feedback!'}\n    </span>;\n};\n\nRecommendationRating.propTypes = {\n    system: PropTypes.object\n};\n\nexport default RecommendationRating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { InventoryDetailHead, AppInfo, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport { loadSystemInfo } from '../../store/actions';\nimport { entityDetailReducer } from '../../store/entityDetailReducer';\nimport './ros-details-page.scss';\nimport { ExpandedRow } from '../../Components/RosTable/ExpandedRow';\nimport RecommendationRating from '../../Components/RecommendationRating/RecommendationRating';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { PermissionContext } from '../../App';\n\nclass RosSystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    async componentDidMount() {\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('system-detail');\n        await this.props.loadSystemInfo(this.state.inventoryId);\n        document.title = this.props.rosSystemInfo.display_name;\n    }\n\n    renderChildrenNode() {\n        if (this.props.rosSystemInfo) {\n            const {\n                cloud_provider: cloudProvider,\n                instance_type: instanceType,\n                idling_time: idlingTime,\n                rating\n            } = this.props.rosSystemInfo;\n            const { inventoryId } = this.props.match.params;\n            return (\n                <Grid className='ros-system-info'>\n                    <GridItem>\n                        <ExpandedRow\n                            { ...{ cloudProvider, instanceType, idlingTime, inventoryId } }\n                        />\n                    </GridItem>\n                    <GridItem>\n                        <RecommendationRating system={ { ...{ rating, inventoryId } } } />\n                    </GridItem>\n                </Grid>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const entity = this.props.entity;\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.systemsRead === false\n                            ? <NotAuthorized serviceName='Resource Optimization'/>\n                            : <DetailWrapper\n                                onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    register(mergeWithDetail(\n                                        entityDetailReducer(INVENTORY_ACTION_TYPES)\n                                    ));\n                                }}\n                                className='rosDetailWrapper'\n                            >\n                                <PageHeader>\n                                    <Breadcrumb ouiaId=\"system-detail\">\n                                        <BreadcrumbItem>\n                                            <Link to='/'>Resource Optimization</Link>\n                                        </BreadcrumbItem>\n                                        <BreadcrumbItem isActive>\n                                            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                                                { entity ? entity.display_name : null }\n                                            </div>\n                                        </BreadcrumbItem>\n                                    </Breadcrumb>\n                                    <InventoryDetailHead\n                                        hideBack\n                                        showDelete={ false }\n                                        hideInvDrawer\n                                    />\n                                    { this.renderChildrenNode() }\n                                </PageHeader>\n                                <Main>\n                                    <Grid gutter=\"md\">\n                                        <GridItem span={12}>\n                                            <AppInfo showTags fallback=\"\" />\n                                        </GridItem>\n                                    </Grid>\n                                </Main>\n                            </DetailWrapper>\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    }\n};\n\nRosSystemDetail.propTypes = {\n    match: PropTypes.any,\n    entity: PropTypes.object,\n    loading: PropTypes.bool,\n    rosSystemInfo: PropTypes.object,\n    loadSystemInfo: PropTypes.func\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        entity: state.entityDetails && state.entityDetails.entity,\n        loading: state.systemDetailReducer?.loading,\n        rosSystemInfo: state.systemDetailReducer?.systemInfo,\n        ...props\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadSystemInfo: (uuid) => dispatch(loadSystemInfo(uuid))\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps)(RosSystemDetail)\n);\n","// API\nexport const ROS_API_ROOT = '/api/ros/v1';\nexport const IS_CONFIGURED_API = '/is_configured';\nexport const SYSTEMS_API_ROOT = '/systems';\nexport const RECOMMENDATION_RATING_API = '/rating';\n\n// Feedback\nexport const NEGATIVE_FEEDBACK = -1;\nexport const NEUTRAL_FEEDBACK = 0;\nexport const POSITIVE_FEEDBACK = 1;\n\n// No Data State\nexport const NO_DATA_STATE = 'Waiting for data';\nexport const NO_DATA_VALUE = 'N/A';\n\n// Getting started URL\n// eslint-disable-next-line max-len\nexport const GETTING_STARTED_URL = 'https://access.redhat.com/documentation/en-us/red_hat_insights/2022/html/assessing_and_monitoring_rhel_resource_optimization_with_insights_for_red_hat_enterprise_linux/proc-ros-install_ros-getting-started';\n\n// Custom Filters\nexport const CUSTOM_FILTERS = {\n    state: {\n        label: 'State',\n        type: 'checkbox',\n        filterValues: {\n            items: [\n                {\n                    label: 'Idling',\n                    value: 'Idling'\n                },\n                {\n                    label: 'Optimized',\n                    value: 'Optimized'\n                },\n                {\n                    label: 'Oversized',\n                    value: 'Oversized'\n                },\n                {\n                    label: 'Under pressure',\n                    value: 'Under pressure'\n                },\n                {\n                    label: 'Undersized',\n                    value: 'Undersized'\n                },\n                {\n                    label: 'Waiting for data',\n                    value: 'Waiting for data'\n                }\n            ]\n        }\n    }\n};\n\n// Query params for state filters\nexport const WITH_SUGGESTIONS_PARAM = 'with_suggestions';\nexport const WITH_WAITING_FOR_DATA_PARAM = 'with_waiting_for_data';\n","import { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n"],"names":["ExpandedRow","inventoryId","cloudProvider","instanceType","idlingTime","inlineFieldsArray","label","value","NO_DATA_VALUE","className","id","component","TextListVariants","map","field","index","key","TextListItemVariants","propTypes","SystemRecommendations","React","SystemDetail","props","useSelector","entityDetails","entity","Suspense","fallback","SystemDetailWrapper","getRegistry","useState","Wrapper","setWrapper","useEffect","register","systemRecsReducer","Provider","Fragment","store","getStore","Spinner","size","PropTypes","defaultState","loaded","entityLoaded","state","activeApps","title","name","RecommendationRating","system","rating","setRating","submitted","setSubmitted","updateRecommendationRating","newRating","calculatedRating","NEUTRAL_FEEDBACK","requestOptions","method","headers","body","JSON","stringify","inventory_id","fetch","ROS_API_ROOT","RECOMMENDATION_RATING_API","setTimeout","console","error","Button","variant","onClick","POSITIVE_FEEDBACK","ouiaId","NEGATIVE_FEEDBACK","RosSystemDetail","match","params","insights","chrome","hideGlobalFilter","appAction","this","loadSystemInfo","document","rosSystemInfo","display_name","cloud_provider","instance_type","idling_time","Grid","GridItem","permissions","systemsRead","NotAuthorized","serviceName","DetailWrapper","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","applyReducerHash","entityDetailReducer","PageHeader","Breadcrumb","BreadcrumbItem","Link","to","isActive","InventoryDetailHead","hideBack","showDelete","hideInvDrawer","renderChildrenNode","Main","gutter","span","AppInfo","showTags","loading","withRouter","connect","systemDetailReducer","systemInfo","dispatch","uuid","IS_CONFIGURED_API","SYSTEMS_API_ROOT","NO_DATA_STATE","GETTING_STARTED_URL","CUSTOM_FILTERS","type","filterValues","items","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","handleErrors","response","ok","Error","statusText","fetchSystemDetail","url","URL","window","location","origin","auth","getUser","then","res","json","result","fetchSystemRecommendations","options","limit","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","payload","loadSysRecs","loadIsConfiguredInfo"],"sourceRoot":""}