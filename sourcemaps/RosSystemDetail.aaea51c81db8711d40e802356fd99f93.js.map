{"version":3,"file":"js/RosSystemDetail.1672306734593.a04e4f116b98c4852a87.js","mappings":"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","sources":["webpack:///./src/Components/SystemDetail/SystemDetail.js","webpack:///./src/store/entityDetailReducer.js","webpack:///./src/Components/RecommendationRating/RecommendationRating.js","webpack:///./src/Components/HistoricalDataChart/Util.js","webpack:///./src/Components/HistoricalDataChart/HistoricalDataChart.js","webpack:///./src/Routes/RosSystemDetail/RosSystemDetail.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport SystemDetail from '../Components/SystemDetail/SystemDetail';\n\nconst defaultState = { loaded: false };\n\nconst entityLoaded = (state) => {\n    return {\n        ...state,\n        loaded: true,\n        activeApps: [\n            {\n                title: 'Resource optimization',\n                name: 'resource optimization',\n                component: SystemDetail\n            }\n        ]\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITY_FULFILLED }) => applyReducerHash(\n    {\n        [LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { OutlinedThumbsUpIcon } from '@patternfly/react-icons';\nimport { OutlinedThumbsDownIcon } from '@patternfly/react-icons';\nimport { ThumbsUpIcon } from '@patternfly/react-icons';\nimport { ThumbsDownIcon } from '@patternfly/react-icons';\n\nimport './RecommendationRating.scss';\nimport {\n    ROS_API_ROOT,\n    RECOMMENDATION_RATING_API,\n    NEUTRAL_FEEDBACK,\n    POSITIVE_FEEDBACK,\n    NEGATIVE_FEEDBACK  } from '../../constants';\n\nconst RecommendationRating = ({ system }) => {\n    const [rating, setRating] = useState(system.rating);\n    const [submitted, setSubmitted] = useState(false);\n    const updateRecommendationRating = async (newRating) => {\n        const calculatedRating = rating === newRating ? NEUTRAL_FEEDBACK : newRating;\n        try {\n\n            // POST request using fetch with error handling\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    inventory_id: system.inventoryId, /* eslint-disable-line camelcase */\n                    rating: calculatedRating\n                })\n            };\n\n            await fetch(`${ROS_API_ROOT}${RECOMMENDATION_RATING_API}`, requestOptions);\n            setRating(calculatedRating);\n            setSubmitted(true);\n            setTimeout(() => setSubmitted(false), 3000);\n        } catch (error) {\n            console.error(error); // eslint-disable-line no-console\n        }\n    };\n\n    return <span className='ratingSpanOverride'>\n        Is this suggestion helpful?\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-up\"\n            onClick={() => updateRecommendationRating(POSITIVE_FEEDBACK)}\n            ouiaId=\"thumbsUp\">\n            {rating === POSITIVE_FEEDBACK ? <ThumbsUpIcon className='like' size='sm' /> :\n                <OutlinedThumbsUpIcon size='sm' />}\n        </Button>\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-down\"\n            onClick={() => updateRecommendationRating(NEGATIVE_FEEDBACK)}\n            ouiaId=\"thumbsDown\">\n            {rating === NEGATIVE_FEEDBACK ? <ThumbsDownIcon className='dislike' size='sm' /> :\n                <OutlinedThumbsDownIcon size='sm' />}\n        </Button>\n        {submitted && 'Thank you for your feedback!'}\n    </span>;\n};\n\nRecommendationRating.propTypes = {\n    system: PropTypes.object\n};\n\nexport default RecommendationRating;\n","export const formatHistoricalData = (responseData, dateRange) =>{\n\n    const chartData = [];\n    let today = new Date();\n\n    const cpu = {\n        datapoints: []\n    };\n\n    const memory = {\n        datapoints: []\n    };\n\n    let mapResponseData = new Map();\n\n    responseData.reverse().forEach((responseValue) => {\n        mapResponseData.set(new Date(responseValue.report_date).toDateString(), responseValue);\n    });\n\n    for (let index = (dateRange - 1); index >= 0; index--) {\n        let dateToCheck = new Date();\n        dateToCheck =   new Date(dateToCheck.setDate(today.getDate() - index)).toDateString();\n        if (mapResponseData.has(dateToCheck)) {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).cpu\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).memory\n            });\n        }\n        else {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n        }\n    }\n\n    chartData.push(cpu);\n    chartData.push(memory);\n\n    return chartData;\n};\n","import React, { useState, useEffect, Fragment }  from 'react';\nimport {\n    Chart,\n    ChartAxis,\n    ChartGroup,\n    ChartLine,\n    ChartScatter,\n    ChartThemeColor,\n    createContainer\n} from '@patternfly/react-charts';\nimport {\n    Bullseye, Dropdown, DropdownItem, DropdownToggle,\n    EmptyState, EmptyStateBody, EmptyStateVariant, Spinner, Title, Tooltip\n} from '@patternfly/react-core';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport './HistoricalDataChart.scss';\nimport { fetchSystemHistory } from '../../Utilities/api';\nimport { formatHistoricalData } from './Util';\nimport { DATE_RANGE_49_DAYS, DATE_RANGE_7_DAYS, MONTHS, RANGE_DROPDOWN_45_DAYS } from '../../constants';\nimport propTypes from 'prop-types';\n\nexport const HistoricalDataChart = ({ inventoryId }) => {\n\n    const [isOpen, setOpen] = useState(false);\n    const [dateRange, setDateRange] = useState(DATE_RANGE_7_DAYS);\n    const [chartData, setChartData] = useState([]);\n    const [showError, setError] = useState(false);\n\n    const VictoryZoomVoronoiContainer = createContainer('zoom', 'voronoi');\n\n    useEffect(() => {\n        setChartData([]);\n        async function getHistoricalData() {\n            try {\n                const limit = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS;\n                const historicalDataResponse = await fetchSystemHistory(inventoryId, limit);\n                const formattedChartData = formatHistoricalData(historicalDataResponse.data, dateRange);\n                setChartData(formattedChartData);\n            } catch (error) {\n                setError(true);\n            }\n        }\n\n        getHistoricalData();\n\n    }, [dateRange]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const updateChartRange = (dRange) => {\n        dRange !== dateRange && setChartData([]);\n        setDateRange(dRange);\n        setOpen(!isOpen);\n    };\n\n    const getEntireDomain = () => {\n        const today = new Date();\n        let startDate = new Date();\n        const numberOfDays = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : DATE_RANGE_49_DAYS;\n        startDate =   new Date(startDate.setDate(today.getDate() - numberOfDays));\n\n        const xDomain = [startDate, today];\n\n        return {\n            y: [0, 100],\n            x: xDomain\n        };\n    };\n\n    const dropdownItems = [\n        <DropdownItem key=\"action\" component=\"button\" onClick={() => updateChartRange(DATE_RANGE_7_DAYS)}>Last 7 Days</DropdownItem>,\n        <DropdownItem key=\"action\" component=\"button\" onClick={() => updateChartRange(DATE_RANGE_49_DAYS)}>Last 45 Days</DropdownItem>\n    ];\n\n    const onToggle = (isOpen) => {\n        setOpen(isOpen);\n    };\n\n    const displayError = () => {\n        return <EmptyState className='loadingErrorContainer' variant={EmptyStateVariant.small}>\n            <Title headingLevel=\"h2\" size=\"lg\">\n                Something went wrong\n            </Title>\n            <EmptyStateBody>\n                There was a problem while requesting historical data. Please try again later.\n            </EmptyStateBody>\n        </EmptyState>;\n    };\n\n    const displayChart = () => {\n\n        return  chartData.length === 0 ?\n            <Bullseye className='loadingErrorContainer'>\n                <Spinner size=\"xl\" aria-labelledby=\"loading-historical-chart\"/>\n            </Bullseye> :\n            <Fragment>\n                <span className='dropdownContainer'>\n                    <Tooltip content={<div>Scroll and pan to zoom and move</div>}>\n                        <OutlinedQuestionCircleIcon size='sm' />\n                    </Tooltip>\n                    <Dropdown\n                        className='dateDropdown'\n                        toggle={\n                            <DropdownToggle\n                                id='chart-date-toggle'\n                                onToggle={onToggle}\n                                toggleIndicator={CaretDownIcon} >\n                                {`Last ${dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS} Days`}\n                            </DropdownToggle>\n                        }\n                        isOpen={isOpen}\n                        dropdownItems={dropdownItems}\n                    />\n                </span>\n\n                <div style={{ height: '275px' }}>\n                    <Chart\n                        domain={getEntireDomain()}\n                        scale={{ x: 'time', y: 'linear' }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer\n                                labels={({ datum }) => {\n                                    return datum.childName.includes('scatter-') && datum.y !== null ? `${datum.name}: ${datum.y}%` : null;}\n                                }\n                                constrainToVisibleArea\n                                voronoiDimension=\"x\"\n                                zoomDimension=\"x\"\n                            />\n                        }\n                        legendData={[{ name: 'CPU Utilization' }, { name: 'Memory Utilization' }]}\n                        legendOrientation=\"vertical\"\n                        legendPosition=\"right\"\n                        height={275}\n                        width={756}\n                        maxDomain={{ y: 100 }}\n                        minDomain={{ y: 0 }}\n                        padding={{\n                            bottom: 50,\n                            left: 50,\n                            right: 200, // Adjusted to accommodate legend\n                            top: 50\n                        }}\n                        themeColor={ChartThemeColor.blue}>\n\n                        <ChartAxis\n                            tickValues={chartData[0].datapoints.map(d => d.x)}\n                            tickFormat={(x) => {\n                                const isToday = new Date().toDateString() === new Date(x).toDateString();\n                                return isToday ? 'Today' : `${new Date(x).getDate()} ${MONTHS[new Date(x).getMonth()]}`;}\n                            }\n                            fixLabelOverlap\n                            tickCount={6}\n\n                        />\n                        <ChartAxis\n                            dependentAxis showGrid\n                            tickValues={[0, 20, 40, 60, 80, 100]}\n                            tickFormat={(t) => `${t}%`} />\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartScatter\n                                        data={s.datapoints}\n                                        key={'scatter-' + idx}\n                                        name={'scatter-' + idx}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartLine\n                                        key={'line-' + idx}\n                                        name={'line-' + idx}\n                                        data={s.datapoints}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                    </Chart>\n                </div>\n            </Fragment>;\n\n    };\n\n    return (\n        <div className='chartContainer'>\n            {\n                showError ?  displayError() : displayChart()\n\n            }\n        </div>\n    );\n\n};\n\nHistoricalDataChart.propTypes = {\n    inventoryId: propTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { InventoryDetailHead, AppInfo, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport { loadSystemInfo } from '../../store/actions';\nimport { entityDetailReducer } from '../../store/entityDetailReducer';\nimport './ros-details-page.scss';\nimport { ExpandedRow } from '../../Components/RosTable/ExpandedRow';\nimport RecommendationRating from '../../Components/RecommendationRating/RecommendationRating';\nimport { SystemState } from '../../Components/RosTable/SystemState';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { PermissionContext } from '../../App';\nimport { displayLastReported } from '../../Components/RosTable/RenderColumn';\nimport {\n    DescriptionList,\n    DescriptionListTerm,\n    DescriptionListGroup,\n    DescriptionListDescription\n} from '@patternfly/react-core';\nimport { HistoricalDataChart } from '../../Components/HistoricalDataChart/HistoricalDataChart';\n\nclass RosSystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    async componentDidMount() {\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('system-detail');\n        await this.props.loadSystemInfo(this.state.inventoryId);\n        document.title = this.props.rosSystemInfo.display_name;\n    }\n\n    renderChildrenNode() {\n        if (this.props.rosSystemInfo) {\n            const {\n                cloud_provider: cloudProvider,\n                instance_type: instanceType,\n                idling_time: idlingTime,\n                report_date: reportDate,\n                rating,\n                state\n            } = this.props.rosSystemInfo;\n            const { inventoryId } = this.props.match.params;\n            return (\n                <Grid className='ros-system-info'>\n                    <GridItem>\n                        <DescriptionList className='expanded-row' isCompact isHorizontal>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>Last reported</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    { displayLastReported(reportDate) }\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                        </DescriptionList>\n                    </GridItem>\n                    <GridItem>\n                        <DescriptionList className='expanded-row' isCompact isHorizontal>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>State</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <SystemState stateValue={ state }/>\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                        </DescriptionList>\n                    </GridItem>\n                    <GridItem>\n                        <ExpandedRow\n                            { ...{ cloudProvider, instanceType, idlingTime, inventoryId } }\n                        />\n                    </GridItem>\n                    <GridItem>\n                        <RecommendationRating system={ { ...{ rating, inventoryId } } } />\n                    </GridItem>\n                </Grid>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const entity = this.props.entity;\n        const { inventoryId } = this.props.match.params;\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.systemsRead === false\n                            ? <NotAuthorized serviceName='Resource Optimization'/>\n                            : <DetailWrapper\n                                onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    register(mergeWithDetail(\n                                        entityDetailReducer(INVENTORY_ACTION_TYPES)\n                                    ));\n                                }}\n                                className='rosDetailWrapper'\n                            >\n                                <PageHeader>\n                                    <Breadcrumb ouiaId=\"system-detail\">\n                                        <BreadcrumbItem>\n                                            <Link to='/'>Resource Optimization</Link>\n                                        </BreadcrumbItem>\n                                        <BreadcrumbItem isActive>\n                                            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                                                { entity ? entity.display_name : null }\n                                            </div>\n                                        </BreadcrumbItem>\n                                    </Breadcrumb>\n\n                                    <div className='detail-header-container'>\n                                        <InventoryDetailHead\n                                            hideBack\n                                            showDelete={ false }\n                                            hideInvDrawer\n                                            className='rosDetailsHead'\n                                        />\n                                        { this.renderChildrenNode() }\n                                        <HistoricalDataChart\n                                            inventoryId={inventoryId}/>\n                                    </div>\n                                </PageHeader>\n                                <Main>\n                                    <Grid gutter=\"md\">\n                                        <GridItem span={12}>\n                                            <AppInfo showTags fallback=\"\" />\n                                        </GridItem>\n                                    </Grid>\n                                </Main>\n                            </DetailWrapper>\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    }\n};\n\nRosSystemDetail.propTypes = {\n    match: PropTypes.any,\n    entity: PropTypes.object,\n    loading: PropTypes.bool,\n    rosSystemInfo: PropTypes.object,\n    loadSystemInfo: PropTypes.func\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        entity: state.entityDetails && state.entityDetails.entity,\n        loading: state.systemDetailReducer?.loading,\n        rosSystemInfo: state.systemDetailReducer?.systemInfo,\n        ...props\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadSystemInfo: (uuid) => dispatch(loadSystemInfo(uuid))\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps)(RosSystemDetail)\n);\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, EXECUTIVE_REPORT_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    await window.insights.chrome.auth.getUser();\n\n    const url = new URL(`${ROS_API_ROOT}${EXECUTIVE_REPORT_API}`,  window.location.origin);\n\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["SystemRecommendations","React","SystemDetail","props","inventoryId","useSelector","entityDetails","entity","id","Suspense","fallback","SystemDetailWrapper","getRegistry","useState","Wrapper","setWrapper","useEffect","register","systemRecsReducer","Provider","Fragment","store","getStore","Bullseye","Spinner","size","propTypes","PropTypes","defaultState","loaded","entityLoaded","state","activeApps","title","name","component","RecommendationRating","system","rating","setRating","submitted","setSubmitted","updateRecommendationRating","newRating","calculatedRating","NEUTRAL_FEEDBACK","requestOptions","method","headers","body","JSON","stringify","inventory_id","fetch","ROS_API_ROOT","RECOMMENDATION_RATING_API","setTimeout","console","error","className","Button","variant","onClick","POSITIVE_FEEDBACK","ouiaId","NEGATIVE_FEEDBACK","formatHistoricalData","responseData","dateRange","chartData","today","Date","cpu","datapoints","memory","mapResponseData","Map","reverse","forEach","responseValue","set","report_date","toDateString","index","dateToCheck","setDate","getDate","has","push","x","y","get","HistoricalDataChart","isOpen","setOpen","DATE_RANGE_7_DAYS","setDateRange","setChartData","showError","setError","VictoryZoomVoronoiContainer","createContainer","limit","RANGE_DROPDOWN_45_DAYS","fetchSystemHistory","historicalDataResponse","formattedChartData","data","getHistoricalData","startDate","numberOfDays","updateChartRange","dRange","dropdownItems","DropdownItem","key","DATE_RANGE_49_DAYS","EmptyState","EmptyStateVariant","Title","headingLevel","EmptyStateBody","length","Tooltip","content","Dropdown","toggle","DropdownToggle","onToggle","toggleIndicator","CaretDownIcon","style","height","Chart","domain","scale","containerComponent","labels","datum","childName","includes","constrainToVisibleArea","voronoiDimension","zoomDimension","legendData","legendOrientation","legendPosition","width","maxDomain","minDomain","padding","bottom","left","right","top","themeColor","ChartThemeColor","ChartAxis","C","tickValues","map","d","tickFormat","MONTHS","getMonth","fixLabelOverlap","tickCount","dependentAxis","showGrid","t","ChartGroup","s","idx","ChartScatter","ChartLine","RosSystemDetail","match","params","insights","chrome","hideGlobalFilter","appAction","this","loadSystemInfo","document","rosSystemInfo","display_name","cloudProvider","cloud_provider","instanceType","instance_type","idlingTime","idling_time","reportDate","Grid","GridItem","DescriptionList","isCompact","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","displayLastReported","SystemState","stateValue","ExpandedRow","value","permissions","systemsRead","NotAuthorized","serviceName","DetailWrapper","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","applyReducerHash","entityDetailReducer","PageHeader","Breadcrumb","BreadcrumbItem","Link","to","isActive","InventoryDetailHead","hideBack","showDelete","hideInvDrawer","renderChildrenNode","Main","gutter","span","AppInfo","showTags","loading","withRouter","connect","systemDetailReducer","systemInfo","dispatch","uuid","handleErrors","response","ok","Error","statusText","isROSConfigured","url","URL","IS_CONFIGURED_API","window","location","origin","auth","getUser","then","res","json","result","fetchSystemDetail","SYSTEMS_API_ROOT","fetchSystemRecommendations","options","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","fetchSystems","fetchParams","orderBy","orderHow","order_by","os","number_of_suggestions","order_how","SortByDirection","filters","hostnameOrId","query","stateFilter","stateFilterValue","append","osFilter","osFilterValue","fetchExecutiveReport","EXECUTIVE_REPORT_API","type","payload","loadSysRecs","loadIsConfiguredInfo","changeSystemColumns"],"sourceRoot":""}