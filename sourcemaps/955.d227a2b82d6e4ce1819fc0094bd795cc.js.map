{"version":3,"file":"js/955.1654168295288.d006b99ec486b5c4f22f.js","mappings":"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","sources":["webpack:///./node_modules/@babel/runtime/helpers/asyncToGenerator.js","webpack:///./node_modules/@babel/runtime/regenerator/index.js","webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/store/index.js","webpack:///./node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}\n\nmodule.exports = _asyncToGenerator;","module.exports = require(\"regenerator-runtime\");\n","import { Redirect, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Suspense, lazy } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst RosPage = lazy(() => import(/* webpackChunkName: \"RosPage\" */ './Routes/RosPage/RosPage'));\nconst RosSystemDetail = lazy(() => import(/* webpackChunkName: \"RosSystemDetail\" */ './Routes/RosSystemDetail/RosSystemDetail'));\n\nexport const Routes = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <Switch>\n            <Route exact path='/' component={RosPage} />\n            <Route path='/:inventoryId' component={RosSystemDetail} />\n            <Route>\n                <Redirect to='/ros' />\n            </Route>\n        </Switch>\n    </Suspense>\n);\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        history: PropTypes.shape({\n            push: PropTypes.func\n        })\n    })\n};\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { systemRecsReducer, systemDetailReducer, isConfiguredReducer, systemColumnsReducer } from './store/reducers';\nimport { register } from './store';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasReadPermissions: undefined,\n            arePermissionsLoaded: false\n        };\n    }\n\n    handlePermissionsUpdate(hasRead) {\n        this.setState({\n            hasReadPermissions: hasRead,\n            arePermissionsLoaded: true\n        });\n    }\n\n    hasPermission(permission, permissionList) {\n        let hasPermission = false;\n\n        permissionList.forEach((permissions) => {\n            if (permission === permissions) {\n                hasPermission = true;\n            }\n        });\n\n        return hasPermission;\n    };\n\n    componentDidMount () {\n        register({\n            notifications: notificationsReducer,\n            systemDetailReducer,\n            systemRecsReducer,\n            isConfiguredReducer,\n            systemColumnsReducer\n        });\n        insights.chrome.init();\n        insights.chrome.identifyApp('ros');\n        this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.navId === 'ros') {\n                this.props.history.push(`/${location.search}${location.hash}`);\n            } else {\n                this.props.history.push(`/${event.navId}${location.search}${location.hash}`);\n            }\n        });\n        (async () => {\n            const rosPermissions = await insights.chrome.getUserPermissions('ros', true);\n            this.handlePermissionsUpdate(\n                rosPermissions.some(({ permission }) => this.hasPermission(permission, ['ros:*:*', 'ros:*:read']))\n            );\n        })();\n\n    }\n\n    componentWillUnmount () {\n        if (typeof this.unregister === 'function') {\n            this.unregister();\n        }\n    }\n\n    render () {\n        const {\n            hasReadPermissions,\n            arePermissionsLoaded } = this.state;\n        return (\n            arePermissionsLoaded\n                ? <PermissionContext.Provider\n                    value={ {\n                        permissions: {\n                            systemsRead: hasReadPermissions\n                        }\n                    } }>\n                    <NotificationsPortal />\n                    <Routes childProps={ this.props } />\n                </PermissionContext.Provider>\n                : null\n        );\n    }\n}\n\nApp.propTypes = {\n    history: PropTypes.object\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter (connect()(App));\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst RosApp = () => (\n    <Provider store={ process.env.NODE_ENV !== 'production' ? init(logger).getStore() : init().getStore() }>\n        <Router basename={ getBaseName(window.location.pathname, 2) }>\n            <App />\n        </Router>\n    </Provider>\n);\n\nexport default RosApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RosApp from './AppEntry';\n\nReactDOM.render(\n    <RosApp />,\n    document.getElementById('root')\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nlet registry;\n\nexport function init (...middleware) {\n    registry = getRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import { useReducer, useRef, useMemo, useContext } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelectors\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector =\n/*#__PURE__*/\ncreateSelectorHook();"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","module","exports","fn","self","this","args","arguments","apply","err","undefined","RosPage","lazy","RosSystemDetail","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","exact","path","component","Redirect","to","propTypes","childProps","PropTypes","history","push","PermissionContext","createContext","App","state","hasReadPermissions","arePermissionsLoaded","hasRead","setState","permission","permissionList","hasPermission","forEach","permissions","register","notifications","notificationsReducer","systemDetailReducer","systemRecsReducer","isConfiguredReducer","systemColumnsReducer","insights","chrome","init","identifyApp","unregister","on","event","navId","props","location","search","hash","getUserPermissions","rosPermissions","handlePermissionsUpdate","some","Provider","systemsRead","Component","withRouter","connect","store","getStore","basename","getBaseName","window","pathname","ReactDOM","document","getElementById","registry","middleware","getRegistry","promiseMiddleware","refEquality","a","b","createSelectorHook","context","useReduxContext","useContext","selector","equalityFn","_useReduxContext","contextSub","selectedState","forceRender","useReducer","s","subscription","useMemo","latestSubscriptionCallbackError","useRef","latestSelector","latestSelectedState","current","getState","message","stack","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","useSelectorWithStoreAndSubscription","useSelector"],"sourceRoot":""}