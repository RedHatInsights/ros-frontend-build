{"version":3,"file":"js/RosSystemDetail.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/SystemDetail/SystemDetail.js","webpack:///./src/store/entityDetailReducer.js","webpack:///./src/Components/RecommendationRating/RecommendationRating.js","webpack:///./src/Components/HistoricalDataChart/Util.js","webpack:///./src/Components/HistoricalDataChart/HistoricalDataChart.js","webpack:///./src/Routes/RosSystemDetail/RosSystemDetail.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst defaultState = { loaded: false };\n\nconst entityLoaded = (state) => {\n    return {\n        ...state,\n        loaded: true\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITY_FULFILLED }) => applyReducerHash(\n    {\n        [LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, Icon } from '@patternfly/react-core';\nimport { OutlinedThumbsUpIcon } from '@patternfly/react-icons';\nimport { OutlinedThumbsDownIcon } from '@patternfly/react-icons';\nimport { ThumbsUpIcon } from '@patternfly/react-icons';\nimport { ThumbsDownIcon } from '@patternfly/react-icons';\n\nimport './RecommendationRating.scss';\nimport {\n    ROS_API_ROOT,\n    RECOMMENDATION_RATING_API,\n    NEUTRAL_FEEDBACK,\n    POSITIVE_FEEDBACK,\n    NEGATIVE_FEEDBACK  } from '../../constants';\n\nconst RecommendationRating = ({ system }) => {\n    const [rating, setRating] = useState(system.rating);\n    const [submitted, setSubmitted] = useState(false);\n    const updateRecommendationRating = async (newRating) => {\n        const calculatedRating = rating === newRating ? NEUTRAL_FEEDBACK : newRating;\n        try {\n\n            // POST request using fetch with error handling\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    inventory_id: system.inventoryId, /* eslint-disable-line camelcase */\n                    rating: calculatedRating\n                })\n            };\n\n            await fetch(`${ROS_API_ROOT}${RECOMMENDATION_RATING_API}`, requestOptions);\n            setRating(calculatedRating);\n            setSubmitted(true);\n            setTimeout(() => setSubmitted(false), 3000);\n        } catch (error) {\n            console.error(error); // eslint-disable-line no-console\n        }\n    };\n\n    return <span className='ratingSpanOverride'>\n        Is this suggestion helpful?\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-up\"\n            onClick={() => updateRecommendationRating(POSITIVE_FEEDBACK)}\n            ouiaId=\"thumbsUp\">\n            {rating === POSITIVE_FEEDBACK ? <ThumbsUpIcon className='like' size='sm' /> :\n                <Icon size='md'>\n                    <OutlinedThumbsUpIcon />\n                </Icon>\n            }\n        </Button>\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-down\"\n            onClick={() => updateRecommendationRating(NEGATIVE_FEEDBACK)}\n            ouiaId=\"thumbsDown\">\n            {rating === NEGATIVE_FEEDBACK ? <ThumbsDownIcon className='dislike' size='sm' /> :\n                <OutlinedThumbsDownIcon size='sm' />}\n        </Button>\n        {submitted && 'Thank you for your feedback!'}\n    </span>;\n};\n\nRecommendationRating.propTypes = {\n    system: PropTypes.object\n};\n\nexport default RecommendationRating;\n","export const formatHistoricalData = (responseData, dateRange) =>{\n\n    const chartData = [];\n    let today = new Date();\n\n    const cpu = {\n        datapoints: []\n    };\n\n    const memory = {\n        datapoints: []\n    };\n\n    let mapResponseData = new Map();\n\n    responseData.reverse().forEach((responseValue) => {\n        mapResponseData.set(new Date(responseValue.report_date).toDateString(), responseValue);\n    });\n\n    for (let index = (dateRange - 1); index >= 0; index--) {\n        let dateToCheck = new Date();\n        dateToCheck =   new Date(dateToCheck.setDate(today.getDate() - index)).toDateString();\n        if (mapResponseData.has(dateToCheck)) {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).cpu\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: mapResponseData.get(dateToCheck).memory\n            });\n        }\n        else {\n            cpu.datapoints.push({\n                name: 'CPU Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n\n            memory.datapoints.push({\n                name: 'Memory Utilization',\n                x: new Date(dateToCheck),\n                y: null\n            });\n        }\n    }\n\n    chartData.push(cpu);\n    chartData.push(memory);\n\n    return chartData;\n};\n","import React, { useState, useEffect }  from 'react';\nimport {\n    Chart,\n    ChartAxis,\n    ChartCursorTooltip,\n    ChartGroup,\n    ChartLabel,\n    ChartLine,\n    ChartScatter,\n    ChartThemeColor,\n    createContainer\n} from '@patternfly/react-charts';\nimport {\n    Bullseye,\n    EmptyState,\n    EmptyStateBody,\n    EmptyStateVariant,\n    Spinner,\n    Tooltip,\n    Flex,\n    FlexItem, EmptyStateHeader, Icon,\n    Dropdown, DropdownItem, DropdownList,\n    MenuToggle\n} from '@patternfly/react-core';\nimport { OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport './HistoricalDataChart.scss';\nimport { fetchSystemHistory } from '../../Utilities/api';\nimport { formatHistoricalData } from './Util';\nimport { DATE_RANGE_49_DAYS, DATE_RANGE_7_DAYS, MONTHS, RANGE_DROPDOWN_45_DAYS } from '../../constants';\nimport propTypes from 'prop-types';\n\nexport const HistoricalDataChart = ({ inventoryId }) => {\n\n    const [isOpen, setOpen] = useState(false);\n    const [dateRange, setDateRange] = useState(DATE_RANGE_7_DAYS);\n    const [chartData, setChartData] = useState([]);\n    const [showError, setError] = useState(false);\n\n    const VictoryZoomVoronoiContainer = createContainer('zoom', 'voronoi');\n\n    useEffect(() => {\n        setChartData([]);\n        async function getHistoricalData() {\n            try {\n                const limit = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS;\n                const historicalDataResponse = await fetchSystemHistory(inventoryId, limit);\n                const formattedChartData = formatHistoricalData(historicalDataResponse.data, dateRange);\n                setChartData(formattedChartData);\n            } catch (error) {\n                setError(true);\n            }\n        }\n\n        getHistoricalData();\n\n    }, [dateRange]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const updateChartRange = (dRange) => {\n        dRange !== dateRange && setChartData([]);\n        setDateRange(dRange);\n        setOpen(!isOpen);\n    };\n\n    const getEntireDomain = () => {\n        const today = new Date();\n        let startDate = new Date();\n        const numberOfDays = dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : DATE_RANGE_49_DAYS;\n        startDate =   new Date(startDate.setDate(today.getDate() - numberOfDays));\n\n        const xDomain = [startDate, today];\n\n        return {\n            y: [0, 100],\n            x: xDomain\n        };\n    };\n\n    const onToggleClick = () => {\n        setOpen(!isOpen);\n    };\n\n    const displayError = () => {\n        return  <FlexItem alignSelf={{ default: 'alignSelfBaseline' }}>\n            <EmptyState variant={EmptyStateVariant.sm}>\n                <EmptyStateHeader titleText=\"Something went wrong\" headingLevel=\"h2\" />\n                <EmptyStateBody>\n                    There was a problem while requesting historical data. Please try again later.\n                </EmptyStateBody>\n            </EmptyState>\n        </FlexItem>;\n    };\n\n    const getTooltipLabels = (datum) => {\n        const xDate = new Date(datum.x);\n        const isToday = new Date().toDateString() === xDate.toDateString();\n        let xDateString = isToday ? 'Today' : `${xDate.getDate()} ${MONTHS[xDate.getMonth()]}`;\n        xDateString = datum.name.includes('CPU') ? `${xDateString}\\n   \\n` : '';\n        return datum.childName.includes('scatter-')\n                && datum.y !== null ? `${xDateString}${datum.name}: ${datum.y}%` : null;\n    };\n\n    const displayChart = () => {\n        return  chartData.length === 0 ?\n            <FlexItem alignSelf={{ default: 'alignSelfBaseline' }}>\n                <Bullseye>\n                    <Spinner size=\"xl\" aria-labelledby=\"loading-historical-chart\"/>\n                </Bullseye>\n            </FlexItem> :\n            <Flex direction={{ default: 'column' }} alignSelf={{ default: 'alignSelfBaseline' }} align={{ default: 'alignRight' }}>\n                <FlexItem align={{ default: 'alignRight' }}>\n                    <div className=\"chartDateFilter\">\n                        <Tooltip content={<div>Scroll and pan to zoom and move</div>}>\n                            <Icon style={{ marginBottom: '16px', paddingRight: '8px' }} size='md'>\n                                <OutlinedQuestionCircleIcon />\n                            </Icon>\n                        </Tooltip>\n\n                        <Dropdown\n                            className='dateDropdown'\n                            isOpen={isOpen}\n                            onSelect={(_event, isOpen) => setOpen(isOpen)}\n                            onOpenChange={isOpen => setOpen(isOpen)}\n                            toggle={toggleRef => <MenuToggle ref={toggleRef} onClick={onToggleClick} isExpanded={isOpen}>\n                                {`Last ${dateRange === DATE_RANGE_7_DAYS ? DATE_RANGE_7_DAYS : RANGE_DROPDOWN_45_DAYS} Days`}\n                            </MenuToggle>} ouiaId=\"BasicDropdown\" shouldFocusToggleOnSelect>\n\n                            <DropdownList>\n                                <DropdownItem\n                                    key=\"action_7\"\n                                    onClick={() => updateChartRange(DATE_RANGE_7_DAYS)}>\n                                        Last 7 Days\n                                </DropdownItem>\n                                <DropdownItem\n                                    key=\"action_45\"\n                                    onClick={() => updateChartRange(DATE_RANGE_49_DAYS)}>\n                                        Last 45 Days\n                                </DropdownItem>\n                            </DropdownList>\n                        </Dropdown>\n                    </div>\n                </FlexItem>\n                <FlexItem align={{ default: 'alignRight' }} className='historical-chart-panel'>\n                    <Chart\n                        domain={getEntireDomain()}\n                        scale={{ x: 'time', y: 'linear' }}\n                        containerComponent={\n                            <VictoryZoomVoronoiContainer\n                                labels={({ datum }) => getTooltipLabels(datum)}\n                                labelComponent={\n                                    <ChartCursorTooltip\n                                        labelComponent={<ChartLabel\n                                            style={[\n                                                { fill: 'white', fontSize: 16,  fontWeight: 700 },\n                                                { fill: 'white' },\n                                                { fill: 'white' },\n                                                { fill: 'white' }\n                                            ]}/>}\n                                    />\n                                }\n                                constrainToVisibleArea\n                                voronoiDimension=\"x\"\n                                zoomDimension=\"x\"\n                            />\n                        }\n                        legendData={[{ name: 'CPU Utilization' }, { name: 'Memory Utilization' }]}\n                        legendOrientation=\"vertical\"\n                        legendPosition=\"right\"\n                        height={275}\n                        width={756}\n                        maxDomain={{ y: 100 }}\n                        minDomain={{ y: 0 }}\n                        padding={{\n                            bottom: 50,\n                            left: 50,\n                            right: 165, // Adjusted to accommodate legend\n                            top: 50\n                        }}\n                        themeColor={ChartThemeColor.blue}>\n\n                        <ChartAxis\n                            tickValues={chartData[0].datapoints.map(d => d.x)}\n                            tickFormat={(x) => {\n                                const isToday = new Date().toDateString() === new Date(x).toDateString();\n                                return isToday ? 'Today' : `${new Date(x).getDate()} ${MONTHS[new Date(x).getMonth()]}`;}\n                            }\n                            fixLabelOverlap\n                            tickCount={6}\n\n                        />\n                        <ChartAxis\n                            dependentAxis showGrid\n                            tickValues={[0, 20, 40, 60, 80, 100]}\n                            tickFormat={(t) => `${t}%`} />\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartScatter\n                                        data={s.datapoints}\n                                        key={'scatter-' + idx}\n                                        name={'scatter-' + idx}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                        <ChartGroup>\n                            {chartData.map((s, idx) => {\n                                return (\n                                    <ChartLine\n                                        key={'line-' + idx}\n                                        name={'line-' + idx}\n                                        data={s.datapoints}\n\n                                    />\n                                );\n                            })}\n                        </ChartGroup>\n\n                    </Chart>\n                </FlexItem>\n            </Flex>;\n    };\n\n    return (\n        showError ?  displayError() : displayChart()\n    );\n\n};\n\nHistoricalDataChart.propTypes = {\n    inventoryId: propTypes.string\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Breadcrumb, BreadcrumbItem, Spinner } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { InventoryDetailHead, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport { loadSystemInfo } from '../../store/actions';\nimport { entityDetailReducer } from '../../store/entityDetailReducer';\nimport './ros-details-page.scss';\nimport { ExpandedRow } from '../../Components/RosTable/ExpandedRow';\nimport RecommendationRating from '../../Components/RecommendationRating/RecommendationRating';\nimport { SystemState } from '../../Components/RosTable/SystemState';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { PermissionContext } from '../../App';\nimport { displayLastReported } from '../../Components/RosTable/RenderColumn';\nimport {\n    Flex,\n    FlexItem,\n    Stack,\n    StackItem,\n    DescriptionList,\n    DescriptionListTerm,\n    DescriptionListGroup,\n    DescriptionListDescription\n} from '@patternfly/react-core';\nimport { HistoricalDataChart } from '../../Components/HistoricalDataChart/HistoricalDataChart';\nimport SystemDetailWrapper from '../../Components/SystemDetail/SystemDetail';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { InsightsLink } from '@redhat-cloud-services/frontend-components/InsightsLink';\nimport { SERVICE_NAME } from '../../constants';\n\nclass RosSystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryId: this.props.params.inventoryId\n        };\n    }\n\n    componentDidMount() {\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome.appAction('system-detail');\n        this.props.loadSystemInfo(this.state.inventoryId);\n    }\n\n    componentDidUpdate() {\n        const chrome = this.props.chrome;\n        const displayName = this.props.rosSystemInfo.display_name;\n        if (displayName && displayName !== document.title) {\n            chrome?.updateDocumentTitle(displayName);\n        }\n    }\n\n    renderChildrenNode() {\n        if (this.props.rosSystemInfo) {\n            const {\n                cloud_provider: cloudProvider,\n                instance_type: instanceType,\n                idling_time: idlingTime,\n                report_date: reportDate,\n                rating,\n                state\n            } = this.props.rosSystemInfo;\n            const { inventoryId } = this.props.params;\n            return (\n\n                <Flex alignItems={{ default: 'alignItemsCenter' }}>\n                    <Flex grow={{ default: 'grow' }} className='ros-system-info'>\n                        <Flex flex={{ default: 'flex_4' }} direction={{ default: 'column' }}>\n                            <FlexItem>\n                                <DescriptionList className='expanded-row' isCompact isHorizontal>\n                                    <DescriptionListGroup>\n                                        <DescriptionListTerm>Last reported</DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                            { displayLastReported(reportDate) }\n                                        </DescriptionListDescription>\n                                    </DescriptionListGroup>\n                                    <DescriptionListGroup>\n                                        <DescriptionListTerm>State</DescriptionListTerm>\n                                        <DescriptionListDescription>\n                                            <SystemState stateValue={ state }/>\n                                        </DescriptionListDescription>\n                                    </DescriptionListGroup>\n                                </DescriptionList>\n                                <ExpandedRow\n                                    { ...{ cloudProvider, instanceType, idlingTime, inventoryId } }\n                                />\n                                <RecommendationRating system={{ rating, inventoryId }} />\n                            </FlexItem>\n                        </Flex>\n                        <Flex grow={{ default: 'grow' }} direction={{ default: 'column' }} >\n                            <HistoricalDataChart inventoryId={inventoryId}/>\n                        </Flex>\n                    </Flex>\n                </Flex>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const entity = this.props.entity;\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.hasRead === false\n                            ? <NotAuthorized serviceName={SERVICE_NAME} />\n                            : <DetailWrapper\n                                inventoryId={this.state.inventoryId}\n                                onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    register(mergeWithDetail(\n                                        entityDetailReducer(INVENTORY_ACTION_TYPES)\n                                    ));\n                                }}\n                                className='rosDetailWrapper'\n                            >\n                                <PageHeader>\n                                    <Breadcrumb ouiaId=\"system-detail\">\n                                        <BreadcrumbItem>\n                                            <InsightsLink to='/'>Resource Optimization</InsightsLink>\n                                        </BreadcrumbItem>\n                                        <BreadcrumbItem isActive>\n                                            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                                                { entity ? entity.display_name : null }\n                                            </div>\n                                        </BreadcrumbItem>\n                                    </Breadcrumb>\n\n                                    <Stack hasGutter>\n                                        <StackItem>\n                                            <InventoryDetailHead\n                                                hideBack\n                                                showDelete={ false }\n                                                hideInvDrawer\n                                                className='rosDetailsHead'\n                                            />\n                                        </StackItem>\n                                        <StackItem isFilled>{ this.renderChildrenNode() }</StackItem>\n                                    </Stack>\n                                </PageHeader>\n                                <Main>\n                                    <Grid gutter=\"md\">\n                                        <GridItem span={12}>\n                                            { entity ? <SystemDetailWrapper showTags fallback=\"\" /> : <Spinner/>}\n                                        </GridItem>\n                                    </Grid>\n                                </Main>\n                            </DetailWrapper>\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    }\n};\n\nRosSystemDetail.propTypes = {\n    params: PropTypes.object,\n    entity: PropTypes.object,\n    loading: PropTypes.bool,\n    rosSystemInfo: PropTypes.object,\n    loadSystemInfo: PropTypes.func,\n    chrome: PropTypes.object\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        entity: state.entityDetails && state.entityDetails.entity,\n        loading: state.systemDetailReducer?.loading,\n        rosSystemInfo: state.systemDetailReducer?.systemInfo,\n        ...props\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadSystemInfo: (uuid) => dispatch(loadSystemInfo(uuid))\n    };\n}\n\nconst RosSystemDetailWithChrome = props => {\n    const chrome = useChrome();\n    const params = useParams();\n    return (\n        <RosSystemDetail { ...props } chrome={ chrome } params={ params } />\n    );\n};\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps)(RosSystemDetailWithChrome);\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API, SUGGESTED_INSTANCE_TYPES_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        groups: 'group_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n        query.append('group_name', groupFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n\nexport const fetchSuggestedInstanceTypes = async (fetchParams) => {\n    const { page, perPage, activeSortColumnKey, activeSortDirection } = fetchParams || {};\n\n    let url = new URL(\n        ROS_API_ROOT + SUGGESTED_INSTANCE_TYPES_API,\n        window.location.origin\n    );\n\n    let params = {\n        page,\n        per_page: perPage, /* eslint-disable-line camelcase */\n        order_by: activeSortColumnKey, /* eslint-disable-line camelcase */\n        order_how: activeSortDirection, /* eslint-disable-line camelcase */\n        ...fetchParams?.instanceTypeName  && {\n            instance_type: fetchParams.instanceTypeName /* eslint-disable-line camelcase */\n        }\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n    return response;\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured, fetchSuggestedInstanceTypes } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n\nexport const loadSuggestedInstanceTypes = (params) =>({\n    type: 'LOAD_SUGGESTED_INSTANCE_TYPES',\n    payload: fetchSuggestedInstanceTypes(params)\n});\n"],"names":["SystemRecommendations","SystemDetail","props","inventoryId","entityDetails","entity","id","Suspense","fallback","SystemDetailWrapper","getRegistry","Wrapper","setWrapper","useState","useEffect","register","systemRecsReducer","Fragment","store","getStore","Bullseye","Spinner","size","propTypes","defaultState","loaded","entityLoaded","state","RecommendationRating","system","rating","setRating","submitted","setSubmitted","updateRecommendationRating","async","newRating","calculatedRating","requestOptions","method","headers","body","JSON","stringify","inventory_id","fetch","setTimeout","error","console","className","Button","variant","onClick","ouiaId","Icon","HistoricalDataChart","isOpen","setOpen","dateRange","setDateRange","chartData","setChartData","showError","setError","VictoryZoomVoronoiContainer","limit","formattedChartData","responseData","today","Date","cpu","datapoints","memory","mapResponseData","Map","reverse","forEach","responseValue","set","report_date","toDateString","index","dateToCheck","setDate","getDate","has","push","name","x","y","get","formatHistoricalData","data","getHistoricalData","updateChartRange","dRange","onToggleClick","FlexItem","alignSelf","default","EmptyState","EmptyStateVariant","sm","EmptyStateHeader","titleText","headingLevel","EmptyStateBody","length","Flex","direction","align","Tooltip","content","style","marginBottom","paddingRight","Dropdown","onSelect","_event","onOpenChange","toggle","toggleRef","MenuToggle","ref","isExpanded","shouldFocusToggleOnSelect","DropdownList","DropdownItem","key","Chart","domain","startDate","numberOfDays","getEntireDomain","scale","containerComponent","labels","datum","xDate","xDateString","getMonth","includes","childName","getTooltipLabels","labelComponent","ChartCursorTooltip","ChartLabel","fill","fontSize","fontWeight","constrainToVisibleArea","voronoiDimension","zoomDimension","legendData","legendOrientation","legendPosition","height","width","maxDomain","minDomain","padding","bottom","left","right","top","themeColor","ChartThemeColor","blue","ChartAxis","tickValues","map","d","tickFormat","fixLabelOverlap","tickCount","dependentAxis","showGrid","t","ChartGroup","s","idx","ChartScatter","ChartLine","RosSystemDetail","constructor","super","this","params","componentDidMount","chrome","hideGlobalFilter","appAction","loadSystemInfo","componentDidUpdate","displayName","rosSystemInfo","display_name","document","title","updateDocumentTitle","renderChildrenNode","cloud_provider","cloudProvider","instance_type","instanceType","idling_time","idlingTime","reportDate","alignItems","grow","flex","DescriptionList","isCompact","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","SystemState","stateValue","ExpandedRow","render","Consumer","value","permissions","hasRead","NotAuthorized","serviceName","DetailWrapper","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","entityDetailReducer","PageHeader","Breadcrumb","BreadcrumbItem","InsightsLink","to","isActive","Stack","hasGutter","StackItem","InventoryDetailHead","hideBack","showDelete","hideInvDrawer","isFilled","Main","Grid","gutter","GridItem","span","showTags","loading","systemDetailReducer","systemInfo","dispatch","uuid","useChrome","useParams","handleErrors","response","ok","Error","statusText","isROSConfigured","url","URL","window","location","origin","then","res","json","result","fetchSystemDetail","fetchSystemRecommendations","options","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","fetchSystems","fetchParams","orderBy","orderHow","order_by","groups","os","number_of_suggestions","order_how","desc","filters","hostnameOrId","query","stateFilter","stateFilterValue","append","osFilter","osFilterValue","groupFilter","groupFilterValue","fetchSystemHistory","fetchExecutiveReport","service","template","blob","fetchSuggestedInstanceTypes","activeSortColumnKey","activeSortDirection","per_page","instanceTypeName","type","payload","loadSysRecs","loadIsConfiguredInfo","changeSystemColumns","loadSuggestedInstanceTypes"],"sourceRoot":""}