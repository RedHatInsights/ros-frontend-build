{"version":3,"file":"js/RosPage.1650365895145.b9bc1426a9e2283fe87c.js","mappings":"4PAUaA,EAAuB,kBAChC,kBAAC,IAAD,KACI,kBAAC,KAAD,CAAYC,UAAU,8BAClB,kBAAC,IAAD,CAAgBC,KAAMC,EAAAA,KACtB,kBAAC,KAAD,CAAOC,aAAa,KAAKC,KAAK,MAA9B,8CAGA,kBAAC,IAAD,KACI,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,WAAS,GACZ,kBAAC,IAAD,6GAIA,kBAAC,IAAD,qKAIA,kBAAC,IAAD,gHAOZ,kBAAC,EAAAC,OAAD,CACIC,UAAU,IACVC,KAAMC,EAAAA,GACNC,OAAO,SACPC,QAAQ,WAJZ,qC,srCCjBL,IAAMC,GAAqB,SAAC,GAA6D,IAA3DC,EAA2D,EAA3DA,aAAcC,EAA6C,EAA7CA,YAAaC,EAAgC,EAAhCA,aAAcC,EAAkB,EAAlBA,YAAkB,GAEhDC,EAAAA,EAAAA,UAASJ,GAFuC,WAErFK,EAFqF,KAErEC,EAFqE,KAStFC,EAAe,WACjBL,GAAa,GACbI,EAAkBN,IAsBtB,OACI,kBAACQ,EAAA,GAAD,CACIC,MAAM,iBACNC,QAASH,EACTI,OAAQV,EACRH,QAAQ,QACRc,YACI,kBAACC,GAAA,EAAD,KACI,kBAACC,GAAA,GAAD,CAAMpB,UAAWqB,GAAAA,GAAAA,GAAjB,sDACA,kBAACC,EAAA,EAAD,CAAOxB,WAAS,GACZ,kBAACyB,GAAA,EAAD,KACI,kBAACxB,EAAAA,OAAD,CAAQyB,UAAQ,EAACC,QA9BjB,WACpBb,EAAkBD,EAAee,KAAI,SAAAC,GAAM,gBAAUA,GAAV,IAAkBC,WAAW,SA6BTxB,QAAQ,QAAnD,eAIJ,kBAACmB,GAAA,EAAD,KACI,kBAACxB,EAAAA,OAAD,CAAQyB,UAAQ,EAACC,QA/BZ,WACzBb,EAAkBD,EAAee,KAAI,SAAAC,GAAM,sBAAUA,GAAV,IAAkBC,UAAS,UAAED,EAAOE,wBAAT,gBA8BFzB,QAAQ,QAAxD,uBAQhB0B,QAAS,CACL,kBAAC/B,EAAAA,OAAD,CAAQgC,IAAI,OAAO3B,QAAQ,UAAUqB,QAtD9B,WACfjB,GAAa,GACbC,EAAYE,KAoDJ,QAGA,kBAACZ,EAAAA,OAAD,CAAQgC,IAAI,SAAS3B,QAAQ,YAAYqB,QAASZ,GAAlD,YAKJ,kBAACmB,EAAAA,SAAD,CAAU,aAAW,0BAA0BC,GAAG,0BAA0BC,WAAS,GAE7EvB,EAAee,KAAI,SAACC,EAAQQ,GAAT,OACf,kBAACC,EAAA,EAAD,CAAcL,IAAKJ,EAAOI,KACtB,kBAACM,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CACIC,QAASZ,EAAOC,UAChBK,GAAE,mBAAcE,GAChBK,SAAU,kBApDpB,SAACL,GACnB,IAAMM,EAAa,IAAI9B,GACjB+B,EAAgB,GAAH,GAAQD,EAAWN,IAEtCO,EAAcd,WAAac,EAAcd,UACzCa,EAAWN,GAASO,EAEpB9B,EAAkB6B,GA6C0BE,CAAcR,IAC9BS,WAAYjB,EAAOiB,aAEvB,kBAACC,EAAA,EAAD,CACIC,cAAe,CACX,kBAACC,EAAA,EAAD,CAAchB,IAAG,4BAAuBI,IACpC,+BACKR,EAAOqB,wBAcxD3C,GAAmB4C,UAAY,CAC3B3C,aAAc2C,IAAAA,QAAkBA,IAAAA,QAAkBC,WAClD3C,YAAa0C,IAAAA,KAAAA,WACbzC,aAAcyC,IAAAA,KAAAA,WACdxC,YAAawC,IAAAA,KAAAA,Y,2GCjHJE,GAAa,SAACC,EAAMC,GAE7B,IAAMC,EAAkB,GAClBC,EAAmB,SAATF,EAAmBG,EAAAA,GAAgBC,EAAAA,GAqBnD,OAnBAL,EAAK1B,KAAI,SAACgC,GACN,IAAIC,EAAmB,SAATN,EAAkB,GAAK,GAErCE,EAAQ7B,KAAI,SAACkC,GACT,IAAIC,EAAY,KAAIH,EAAYE,EAAQ,IAExCC,EAAyB,SADzBA,EAAyB,OAAbA,IAAmC,IAAdA,EAAoB,MAAQA,EAASC,aACpCC,EAAAA,GAAAA,SAAwBH,GAA/C,UAA6DC,EAA7D,KAA2EA,EACtFA,EAAuB,gBAAXD,GAA4BI,EAAAA,GAAAA,IAAiB,QAAjBA,CAA0B,IAAIC,KAAKJ,IAAaA,EAE3E,SAATR,EACAM,EAAQC,GAAUC,EACF,QAATR,GACPM,EAAQO,KAAKL,MAIrBP,EAAgBY,KAAKP,MAGlBL,GAIEa,GAAqB,SAACf,GAC/B,IAAME,EAAkBH,GAAWC,EAAM,QACzC,OAAOgB,KAAKC,UAAUf,IAGbgB,GAAoB,SAAClB,GAC9B,IAAMmB,EAASpB,GAAWC,EAAM,QAC1BoB,EAASC,OAAOC,KAAKH,EAAM,IAMjC,MALgB,CACZC,EAAOG,KAAK,MADA,WAETJ,EAAM7C,KAAI,SAAAkD,GAAG,OAAIJ,EAAO9C,KAAI,SAAAmD,GAAS,OAAID,EAAIC,MAAYF,KAAK,UACnEA,KAAK,SAKEG,GAAqB,SAACC,GAAY,QACvCC,EAAc,GAEZC,GAAiBF,MAAAA,GAAA,UAAAA,EAASG,mBAAT,eAAsBC,QAAS,EAChDC,GAAiBL,MAAAA,GAAA,UAAAA,EAASM,oBAAT,eAAuBF,QAAS,EAQvD,OANIF,GAAkBG,KAClBJ,EAAa,sBACbA,EAAaC,EAAiBD,EAAWM,OAAX,iBAA4BP,EAAQG,YAAYpB,YAAhD,OANJ,OAM4FkB,EACtHA,EAAaI,EAAgBJ,EAAWM,OAAX,gBAA2BP,EAAQM,eAAkBL,GAG/EA,GAIEO,GAA2B,WACpC,IAAMC,EAAc,GAAH,QAAM,IAAIvB,MAAOwB,cAAcC,QAAQ,QAAS,KAAKC,MAAM,KAAK,GAAhE,QAGjB,MAFuB,GAAH,OAAMC,EAAAA,IAAN,OAAiCJ,I,YChEzD,SAAeK,GAAAA,GAAAA,OAAkB,CAC7BC,SAAU,CACNC,UAAW,OACXC,SAAU,EACVC,cAAe,EACfC,WAAY,EACZC,aAAc,EACdC,KAAM,GAEVC,WAAY,CACRN,UAAW,OACXC,SAAU,EACVI,KAAM,GAEVE,eAAgB,CACZP,UAAW,OACXC,SAAU,EACVI,KAAM,IACNH,cAAe,EACfC,WAAY,EACZC,aAAc,GAElBI,iBAAkB,CACdR,UAAW,OACXC,SAAU,EACVI,KAAM,IACNH,cAAe,EACfC,WAAY,EACZC,aAAc,GAElBK,YAAa,CACTC,QAAS,OACTC,cAAe,MACfC,eAAgB,gBAGpBC,SAAU,CACNH,QAAS,OACTC,cAAe,MACfC,eAAgB,YCnCxB,IAAME,GAAgB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOhF,EAAjB,EAAiBA,IAAjB,OAA2B,kBAAC,MAAD,CAAMA,IAAKA,EAAKgF,MAAOA,GAAQD,IAE1EE,GAAgB,CAAC,OAAQ,KAAM,kBAAmB,qBAAsB,kBAAmB,cAAe,QAAS,iBA2B5GC,GAAmB,SAAC,GAAmB,IAAjB7D,EAAiB,EAAjBA,KAAM8D,EAAW,EAAXA,KAG/BC,EA3BkBH,GAActF,KAAI,SAAC0F,EAAMjF,GAC7C,IAAIkF,EAAoB,SAATD,EAAkB,CAACE,GAAOhB,gBAA2B,kBAATc,EAA2B,CAACE,GAAOf,kBAAoB,CAACe,GAAOjB,YAC1H,OAAOQ,GAAc,CAAEC,MAAOM,EAAML,MAAOM,EAAUtF,IAAK,GAAF,OAAKI,EAAL,YAAciF,QA4BpEG,EAA+BnE,EApBP1B,KAAI,SAAC8F,GAQ/B,OAPsBA,EAAQ9F,KAAI,SAACmC,EAAU1B,GACzC,IAAMsF,EAAYT,GAAcU,QAAQ,QAClCC,EAAoBX,GAAcU,QAAQ,iBAC5CL,EAAWlF,IAAUsF,EAAY,CAACH,GAAOhB,gBACvCnE,IAAUwF,EAAoB,CAACL,GAAOf,kBAAoB,CAACe,GAAOxB,UACxE,OAAOe,GAAc,CAAEC,MAAOjD,EAAUkD,MAAOM,EAAUtF,IAAK,GAAF,OAAKI,EAAL,YAAc0B,WAgBlF,OAAO,kBAAC,EAAA+D,SAAD,CAAU7F,IAAKmF,GAClB,kBAAC,MAAD,KACI,kBAAC,MAAD,KACI,kBAAC,MAAD,CACIW,YAAU,EACVC,KAAI,CACAX,GADA,WAEII,UAS5BN,GAAiBhE,UAAY,CACzBG,KAAMH,IAAAA,MACNiE,KAAMjE,IAAAA,QAGV4D,GAAc5D,UAAY,CACtB6D,MAAO7D,IAAAA,OACP8D,MAAO9D,IAAAA,MACPlB,IAAKkB,IAAAA,QC9DF,IAAM8E,GAAmB,SAAC,GAAuC,IAArC3E,EAAqC,EAArCA,KAAM4E,EAA+B,EAA/BA,aAAchD,EAAiB,EAAjBA,WAEnD,OAAO,kBAAC,EAAA4C,SAAD,CAAU7F,IAAI,iBACjB,kBAAC,MAAD,KACI,kBAAC,MAAD,sCAC+BiG,EAD/B,YAC+CA,EAAe,EAAI,eAAiB,cADnF,aACsGhD,KAG1G,kBAACiC,GAAD,CAAkB7D,KAAMA,EAAM8D,KAAM,MAI5Ca,GAAiB9E,UAAY,CACzBG,KAAMH,IAAAA,MACN+E,aAAc/E,IAAAA,OACd+B,WAAY/B,IAAAA,QCXhB,IAAMgF,GAAwB,+BAAG,WAAOlD,EAASmD,EAASC,GAAzB,kGAErBC,EAAmDC,EAAAA,GAAAA,uBAA3BC,EAA2BD,EAAAA,GAAAA,uBAGrDE,EAAoB,CACtBxD,QAAAA,EACAG,YAAaH,EAAQG,YACrBgD,QAAAA,EACAC,SAAAA,GATyB,UAWCK,EAAAA,GAAAA,IAAaD,GAXd,OA0B7B,IAfME,EAXuB,OAYvBC,EAAUvF,GAAWsF,EAAgBrF,KAAM,OAG3C4E,EAAeS,MAAAA,GAfQ,UAeRA,EAAiBE,YAfT,aAeR,EAAuBC,MACtC5D,EAAaF,GAAmBC,GAChC8D,EAAiBH,EAAQI,OAAO,EAAGV,GAEnCW,EAAY,kBAAChB,GAAD,CACd3E,KAAMyF,EACNb,aAAcA,EACdhD,WAAYA,IAEVgE,EAAa,GAEZN,EAAQvD,OAAS,GACpB6D,EAAW9E,KAAKwE,EAAQI,OAAO,EAAGR,IA3BT,0BA+BzBS,GA/ByB,WAgCtBC,EAAWtH,KAAI,SAACuH,EAAa9G,GAAd,OAAwB,kBAAC8E,GAAD,CAAkBlF,IAAKI,EAAOiB,KAAM6F,EAAc/B,KAAM/E,EAAQ,UAhCjF,4CAAH,0DAqCjB+G,GAA2B,SAAC,GAA6C,IAA3CnE,EAA2C,EAA3CA,QAASmD,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,SAAagB,EAAY,yCAC5EC,EAAiB7D,KAEvB,OACI,6BACI,kBAAC,MAAD,QACQ4D,EADR,CAEIE,WAAYC,EAAAA,GACZjG,KAAK,GACLkG,SAAQ,UAAKH,EAAL,QACRvJ,KAAK,KACL2J,YAAY,YACZC,mBAAmB,EACnBC,cAAe,kBAAMzB,GAAyBlD,EAASmD,EAASC,SAOhFe,GAAyBjG,UAAY,CACjC8B,QAAS9B,IAAAA,OACTiF,QAASjF,IAAAA,OACTkF,SAAUlF,IAAAA,Q,eCjED0G,GAAc,+BAAG,WAAOC,EAAQ7E,EAASmD,EAASC,GAAjC,oFAEpBoB,EAAWhE,KAEXgD,EAAoB,CACtBxD,QAAAA,EACAG,YAAaH,EAAQG,YACrBgD,QAAAA,EACAC,SAAAA,GARsB,UAWIK,EAAAA,GAAAA,IAAaD,GAXjB,OAWpBE,EAXoB,OAapBrF,EAAkB,SAAXwG,EAAoBzF,GAAmBsE,EAAgBrF,MAAQkB,GAAkBmE,EAAgBrF,OAE9GyG,EAAAA,GAAAA,IAAazG,EAAMmG,EAAUK,GAfH,2CAAH,4D,ykBC6BrBE,GAAAA,SAAAA,G,gbAEF,WAAYX,GAAO,yBACf,cAAMA,GADS,gCAuIC,SAACrC,GACjB,EAAKiD,SAAS,CACVC,iBAAkBlD,OAzIP,6BA4IF,SAACA,GACd,EAAKiD,SAAS,CACVE,cAAenD,OA9IJ,8BAkJD,SAACoD,EAAGC,GAClB,IAAMC,EAAsBD,EAAWE,QAAO,SAACC,GAC3C,MAAiC,UAA1BA,EAAaC,YAGlBC,EAAmBL,EAAWE,QAAO,SAACC,GACxC,MAAiC,qBAA1BA,EAAaC,YAGxB,GAAIH,EAAoBjF,OAAS,EAAG,OAChC,EAAKsF,wBACL,IAAMC,EAAgB,UAAGN,EAAoB,UAAvB,aAAG,EAAwBO,MAAMjJ,KAAI,SAACkJ,GACxD,OAAOA,MAAAA,OAAP,EAAOA,EAAMC,QAEXC,EAAqB,EAAKC,MAAMf,iBAAiBK,QAAO,SAAAW,GAAU,OAAKN,EAAiBO,SAASD,MAEvG,EAAKjB,SAAU,CACXC,iBAAkBc,IAI1B,GAAIN,EAAiBrF,OAAS,EAAG,OACvB+F,EAAiB,UAAGV,EAAiB,UAApB,aAAG,EAAqBG,MAAMjJ,KAAI,SAACkJ,GACtD,OAAOA,MAAAA,OAAP,EAAOA,EAAMC,QAGXM,EAAkB,EAAKJ,MAAMd,cAAcI,QAAO,SAAAW,GAAU,OAAKE,EAAkBD,SAASD,MAClG,EAAKjB,SAAU,CACXE,cAAekB,QA9KR,oCAoLK,WACpB,IAAML,EAAqB,EAAKC,MAAMf,iBAAiBtI,KAAI,SAACoF,GAAD,MAAW,CAAE+D,KAAM/D,MACxEqE,EAAkB,EAAKJ,MAAMd,cAAcvI,KAAI,SAACoF,GAAD,MAAW,CAAE+D,KAAM/D,MAElEsE,EAAgB,GAetB,OAdIN,EAAmB3F,OAAS,GAC5BiG,EAAclH,KAAK,CACfqG,SAAU,QACVI,MAAOG,IAIXK,EAAgBhG,OAAS,GACzBiG,EAAclH,KAAK,CACfqG,SAAU,mBACVI,MAAOQ,IAIRC,KAvMQ,iCA0ME,SAACC,GAClB,EAAKtB,SAAS,CACVuB,kBAAmBD,OA5MR,+BAgNA,WAEf,OADoB,EAAKlC,MAAjBoC,QACOlB,QAAO,SAAA1I,GAAM,OAAIA,EAAOC,gBA/MvC,EAAKmJ,MAAQ,CACTS,QAAS,GACTtD,QAAS,cACTuD,eAAgBC,EAAAA,gBAAAA,KAChB1B,iBAAkB,GAClBC,cAAe,GACfqB,mBAAmB,EACnBK,kBAAkB,EAClBC,gBAAiB,GACjBC,eAAe,GAGnB,EAAKC,cAAgB,CACjBC,aAAc,eACdC,GAAI,KACJ,8BAA+B,MAC/B,iCAAkC,SAClC,iCAAkC,SAClCC,sBAAuB,wBACvBlB,MAAO,QACPmB,YAAa,eAEjB,EAAKC,UAAY,GACjB,EAAKC,UAAYC,IAAAA,YACjB,EAAK7D,aAAe,EAAKA,aAAa8D,KAAlB,QA3BL,E,2JA+BfC,SAASxL,MAAQ,2CACjB,UAAAyL,SAASC,cAAT,mBAAiBC,wBAAjB,iBAAoC,GACpCF,SAASC,OAAOE,UAAU,e,SACpBC,KAAKzD,MAAM0D,kB,OACjBD,KAAKE,qB,wIAGY,IACTC,EAAaH,KAAKzD,MAAlB4D,SACFC,EAAc,IAAIC,gBAAgBF,EAASG,QAC3CC,EAA0BH,EAAYI,IAAIC,EAAAA,IAGpB,SAFAL,EAAYI,IAAIE,EAAAA,IAGxCV,KAAK7C,SAAS,CACVC,iBAAkB,CAAC,sBAEY,SAA5BmD,GACPP,KAAK7C,SAAS,CACVC,iBAAkB,CAAC,aAAc,YAAa,iBAAkB,c,8CAKpD,IACZ+C,EAAaH,KAAKzD,MAAlB4D,SACFQ,EAAM,IAAIC,IAAIC,OAAOV,UACrBC,EAAc,IAAIC,gBAAgBF,EAASG,QAC3CC,EAA0BH,EAAYI,IAAIC,EAAAA,KACpBL,EAAYI,IAAIE,EAAAA,KAEjBH,KACvBH,EAAW,OAAQK,EAAAA,IACnBL,EAAW,OAAQM,EAAAA,IACnBG,OAAOC,QAAQC,aAAa,KAAM,GAAlC,UAAyCJ,EAAIK,QAA7C,OAAsDL,EAAIM,SAA1D,YAAsEb,EAAYlJ,YAAlF,OAA+F2J,OAAOV,SAASe,U,sDAIpGC,G,iGACTN,OAAOjB,SAASC,OAAOuB,KAAKC,U,cAE9BC,EAAS,GAATA,CACAC,MAAOJ,EAAYvC,QACnB4C,QAASL,EAAY7G,KAAO,GAAK6G,EAAYvC,QAC7C6C,SAAUN,EAAY7F,SAAW0E,KAAK7B,MAAM7C,QAC5CoG,UAAWP,EAAY5F,UAAYyE,KAAK7B,MAAMU,iBAC3CsC,MAAAA,GAAA,UAAAA,EAAahJ,eAAb,eAAsBM,eAAgB,CACrC0G,aAAcgC,EAAYhJ,QAAQM,eAItCkI,EAAM,IAAIC,IAAIe,EAAAA,GAAeC,EAAAA,GAAmBf,OAAOV,SAASa,QAChEa,EAAQ,IAAIxB,gBAAgBiB,GAChCH,MAAAA,GAAA,UAAAA,EAAa7I,mBAAb,SAA0BwJ,SAAQ,SAAC1E,GAC/ByE,EAAME,OAAO,QAAS3E,MAE1B+D,MAAAA,GAAA,UAAAA,EAAaa,gBAAb,SAAuBF,SAAQ,SAACzE,GAC5BwE,EAAME,OAAO,KAAM1E,MAEvBsD,EAAIL,OAASuB,EAAM3K,W,kBACZ+K,MAAMtB,GAAKuB,MAAK,SAACC,GACpB,IAAKA,EAAIC,GACL,MAAMC,MAAMF,EAAIG,YAGpB,OAAOH,KACRD,MAAK,SAAAC,GAAG,OAAKA,EAAII,W,kIAGVC,GAEV,IADA,IAAIC,EAAY,GACTD,EAAIjK,QACPkK,EAAUnL,KAAKkL,EAAItG,OAAO,EAAG8D,KAAKT,YAGtC,OAAOkD,I,+DAGiBC,EAAQC,G,gFAC5BC,EAAU,KACVD,EAAYE,SAAW,IAAMH,EAAOnK,OAAS,K,+BACnByH,KAAK8C,4BAA4BJ,EAAQC,G,OAA/C,EAAhBI,KACUjO,KAAI,SAACkO,GAAY,OAC3B,EAAAJ,GAAQtL,KAAR,YAAgB0L,O,wCAGcC,Q,GAAX,EAAAjD,KAAK7B,OAAM8E,mBAAAA,IAAAA,OAAAA,EAAX,SAAyBP,EAAQC,GAAa,G,QAA/DO,EAAW,EAAXA,KACNN,EAAUM,EAASN,Q,iCAGhBA,G,sKAGuBF,EAAQC,G,qFAChCQ,EAAenD,KAAKoD,cAAcV,G,kBACjCW,QAAQC,IACXH,EAAarO,IAAb,+BAAiB,WAAO0N,GAAP,wGACI,IAAKrE,OAAM8E,mBADf,aACI,SAAyBT,EAAKG,GAAa,GAD/C,cACTY,EADS,OAETC,EAAWD,EAAKX,QAFP,kBAGNY,GAHM,2CAAjB,wDAKFtB,MAAK,SAACU,GAAD,OAAaA,M,0IAiFJ7D,GAChBiB,KAAK7C,SAAS,CACV4B,iBAAAA,M,2CAIa0E,GAAU,MAC4CzD,KAAK7B,MAApEf,EADmB,EACnBA,iBAAkB4B,EADC,EACDA,gBAAiB1D,EADhB,EACgBA,QAASuD,EADzB,EACyBA,eAOpD9B,GAAe0G,EALC,CACZnL,YAAa8E,EACb3E,aAAcuG,GAGgB1D,EAASuD,K,iDAGpB,WACR6E,EAAaC,EAAAA,GAAAA,MAChBC,EAAcD,EAAAA,GAAAA,GACpBE,EAAgB7D,KAAK8D,mBAHJ,EAKwB9D,KAAK7B,MAD5CY,EAJe,EAIfA,iBAAkB3B,EAJH,EAIGA,iBAAkB4B,EAJrB,EAIqBA,gBACxC1D,EALmB,EAKnBA,QAASuD,EALU,EAKVA,eAAgBI,EALN,EAKMA,cAE7B,OACIe,KAAKzD,MAAMwH,gBACH,kBAACnR,EAAA,EAAD,MACA,kBAACoR,EAAA,GAAD,CAAMnR,UAAU,+BAChB,kBAACoR,EAAA,EAAD,KACI,kBAACxQ,GAAD,CACIE,YAAaqM,KAAK7B,MAAMO,kBACxB9K,aAAcoM,KAAKkE,mBACnBxQ,aAAcsM,KAAKzD,MAAMoC,QACzB9K,YAAa,SAAC8K,GAAD,OAAa,EAAKpC,MAAM4H,oBAAoB,CAAExF,QAAAA,OAE/D,kBAACyF,EAAA,EAAD,CACIC,uBAAqB,EACrBC,IAAKtE,KAAKR,UACV+E,aAAc,EACdC,WAAY,CACRC,cAAc,EACd5R,UAAW,qBAEfW,QAAQ,UACRkR,YAAa,CAAEpB,KAAK,EAAMrF,MAAM,GAChC0G,aAAc,EACdC,cAAe,CACXtM,YAAa8E,EACb4E,SAAUhC,KAAK7B,MAAMd,eAEzBsB,QAASkF,EACTZ,YAAW,+BAAE,WAAO4B,EAAQC,GAAf,sFACT,EAAK3H,UAAS,uBAAO,CACjB7B,QAASwJ,EAAOxJ,QAChBuD,eAAgBiG,EAAOjG,eACvBG,gBAAe,UAAE8F,EAAO3M,eAAT,aAAE,EAAgBM,iBAJ5B,SAMa,EAAKmD,aACvB,CACItB,KAAMwK,EAAOxK,KAAMsE,QAASkG,EAAOjC,SACnCvH,QAAS,EAAK4D,cAAc4F,EAAOxJ,SACnCC,SAAUuJ,EAAOjG,eACjB1G,QAAS2M,EAAO3M,QAChBG,YAAawM,EAAOxM,YACpB0J,SAAU8C,EAAO9C,WAbhB,cAMHY,EANG,OAiBHF,GAAUE,EAAQpM,MAAQ,IAAI1B,KAAI,qBAAGiQ,gBAjBlC,SAkBgB,EAAKC,sBAAsBtC,EAA3B,SAClBoC,GADkB,IAErBxK,KAAM,EACN2K,UAAU,KArBL,cAkBHC,EAlBG,OAwBHjG,EAAyC,KAAzB2D,MAAAA,GAAA,UAAAA,EAAS7G,YAAT,eAAeC,OACrC,EAAKmB,UAAS,iBAAO,CACjB8B,cAAAA,MA1BK,kBA6BF,CACH2D,QAASA,EAAQpM,KAAK1B,KAAI,SAACqQ,GACvB,IAAMC,EAASF,EAAWG,MAAK,qBAAGhQ,KAAgB8P,EAAOJ,gBACzD,mBACOK,GACCA,EAAS,CAAEE,WAAW,GAAU,CAAEjQ,GAAI8P,EAAOJ,aAAcO,WAAW,IACvEH,MAGXI,MAAO3C,EAAQ7G,KAAKC,MACpB1B,KAAMwK,EAAOxK,KACbuI,SAAUiC,EAAOjC,WAxCZ,4CAAF,wDA2CX2C,OAAQ,YAAwD,IAArDC,EAAqD,EAArDA,kBAAmBC,EAAkC,EAAlCA,uBAAwBC,EAAU,EAAVA,IAClD,EAAKxI,SAAS,CACV8F,YAAa0C,MAAAA,OAAF,EAAEA,EAAK1C,eAEtB2C,EAAAA,EAAAA,IAAS,MACFH,GACCI,EAAAA,EAAAA,IACIH,EAAwBI,EAAAA,OAIpC,EAAKvJ,MAAMwJ,QAAQ,EAAK5H,MAAM7C,QAAS,EAAK6C,MAAMU,eAAgB,gBAEtEmH,WAAW,OACXC,aAAc,CACVtO,MAAO,CACH,CACIuO,MAAOxC,EAASwC,MAChBzP,KAAMiN,EAASjN,KACfyD,MAAO,iBACPiM,aAAc,CACVxO,MAAO+L,EAASyC,aAAaxO,MAC7B/B,SAAU,SAACwQ,EAAIC,GAAL,OAAgB,EAAKC,kBAAkBD,IACjDnM,MAAOkD,IAGf,CACI8I,MAAOtC,EAAUsC,MACjBzP,KAAMmN,EAAUnN,KAChByD,MAAO,cACPiM,aAAc,CACVxO,MAAOiM,EAAUuC,aAAaxO,MAC9B/B,SAAU,SAACwQ,EAAIC,GAAL,OAAgB,EAAKE,eAAeF,IAC9CnM,MAAO8F,KAAK7B,MAAMd,kBAKlCmJ,oBAAqB,CACjBrO,QAAS6H,KAAKyG,wBACdC,SAAU1G,KAAK2G,iBAEnBC,cAAe,CACX1R,QAAS,CACL,GACA,CACIgR,MAAO,iBACPrR,QAAS,kBAAM,EAAKqP,oBAAmB,OAInD2C,aAAc,CACV7Q,WAAYiJ,EACZ6H,WAAY,CAAC,kBAAC3T,EAAAA,OAAD,CACTgC,IAAI,sBAAsB3B,QAAQ,QAClCqB,QAAS,kBAAM,EAAKkS,qBAAoB,KAF/B,kBAKbC,OAAQ,SACRC,SAAU,SAACC,EAAQzD,GAAT,OAAsB,EAAK0D,qBAAqB1D,KAE9D2D,cAAe,SAAChB,EAAIiB,EAAIhT,EAAT,OAAmBgB,EAAnB,EAAmBA,GAAnB,OAA4B,EAAKkH,MAAM+K,UAAUjS,EAAIhB,EAAQ,iBAG/E0K,GACG,kBAACzC,GAAD,CACIiL,YAAY,EACZC,UAAW,kBAAM,EAAKT,qBAAoB,IAC1C5O,QAAS,CACLG,YAAa8E,EACb3E,aAAcuG,GAElB1D,QAASA,EACTC,SAAUsD,Q,+BAQ7B,WACL,OACI,kBAAC,aAAD,KACI,kBAAC4I,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAiBvT,MAAM,2BAE3B,kBAACwT,EAAA,EAAD,KACI,kBAAC,aAAD,MACM,SAAAzN,GAAK,OAC+B,IAAlCA,EAAM0N,YAAYC,YACZ,kBAACC,EAAA,EAAD,CAAeC,YAAY,0BAC1B,EAAKC,oC,EAjZlC9K,CAAgBuC,IAAAA,WAobtBvC,GAAQ7G,UAAY,CAChBiR,UAAWW,IAAAA,KACXlC,QAASkC,IAAAA,KACThI,gBAAiBgI,IAAAA,KACjBlE,gBAAiBkE,IAAAA,KACjB9H,SAAU8H,IAAAA,OACVtJ,QAASsJ,IAAAA,MACT9D,oBAAqB8D,IAAAA,MAGzB,UAAeC,EAAAA,EAAAA,aAAWC,EAAAA,EAAAA,KAlBF,SAAChK,EAAO5B,GAAU,MACtC,WACIwH,gBAAe,UAAE5F,EAAMiK,2BAAR,aAAE,EAA2BrE,gBAC5CpF,QAASR,EAAMkK,qBAAqB1J,SACjCpC,MAtBX,SAA4B+L,GACxB,MAAO,CACHhB,UAAW,SAACjS,EAAIhB,EAAQkU,GAAb,OAA4BD,EAAS,CAC5C7R,KAAM8R,EACNC,QAAS,CAAEnT,GAAAA,EAAIhB,OAAAA,MAEnB0R,QAAS,SAAC0C,EAAYC,EAAkBH,GAA/B,OAA8CD,EAAS,CAC5D7R,KAAM8R,EACNC,QAAS,CACLrT,IAAKsT,EACLE,UAAWD,MAGnBzI,gBAAiB,kBAAMqI,GAASM,EAAAA,EAAAA,QAChCzE,oBAAqB,SAACqE,GAAD,OAAaF,GAASnE,EAAAA,EAAAA,IAAoBqE,QAsB7CL,CAA6CjL,M,iuBC5dhE,SAAS2L,EAAa3F,GACzB,IAAKA,EAASd,GACV,MAAMC,MAAMa,EAASZ,YAGzB,OAAOY,EAGJ,IAAMjD,EAAkB,WAC3B,IAAIU,EAAM,IAAIC,IACVe,EAAAA,GAAemH,EAAAA,GACfjI,OAAOV,SAASa,QASpB,OAPeH,OAAOjB,SAASC,OAAOuB,KACrCC,UACAa,MAAK,kBACFD,MAAMtB,GAAKuB,KAAK2G,GACf3G,MAAK,SAAAC,GAAG,OAAKA,EAAII,UAAQL,MAAK,SAAA6G,GAAM,OAAIA,SAMpCC,EAAoB,SAAAC,GAC7B,IAAItI,EAAM,IAAIC,IACVe,EAAAA,GAAeC,EAAAA,GAAf,WAAsCqH,GACtCpI,OAAOV,SAASa,QASpB,OAPeH,OAAOjB,SAASC,OAAOuB,KACrCC,UACAa,MAAK,kBACFD,MAAMtB,GAAKuB,KAAK2G,GACf3G,MAAK,SAAAC,GAAG,OAAKA,EAAII,UAAQL,MAAK,SAAA6G,GAAM,OAAIA,SAMpCG,EAA6B,SAACD,GAA8B,IAAjBE,EAAiB,uDAAP,GAC1D7H,EAAS,CACTC,MAAO4H,EAAQvK,QACf4C,QAAS2H,EAAQ7O,KAAO,GAAK6O,EAAQvK,SAErCuK,EAAQ7U,aAAe6U,EAAQ7U,YAAY8U,SAC3C9H,EAAS,EAAH,KAAQA,GAAR,IAAgBhN,YAAa6U,EAAQ7U,eAG/C,IAAIqM,EAAM,IAAIC,IACVe,EAAAA,GAAeC,EAAAA,GAAf,WAAsCqH,EAAtC,gBACApI,OAAOV,SAASa,QAEpBL,EAAIL,OAAS,IAAID,gBAAgBiB,GAAQpK,WACzC,IAAIgM,EAAWrC,OAAOjB,SAASC,OAAOuB,KACrCC,UACAa,MAAK,kBACFD,MAAMtB,GAAKuB,MAAK,SAACqB,GACb,IAAKA,EAAKnB,IAAsB,MAAhBmB,EAAK8F,OACjB,MAAO,CAAEC,UAAU,GAChB,IAAK/F,EAAKnB,GACb,MAAMC,MAAMkB,EAAKjB,YAGrB,OAAOiB,EAAKhB,UAEfL,MAAK,SAAA6G,GAAM,OAAIA,QAGpB,OAAO7F,GAGEtH,EAAY,+BAAG,WAAOuF,GAAP,uGAClBN,OAAOjB,SAASC,OAAOuB,KAAKC,UADV,cAGhBzC,GAHgB,EAGgBuC,GAAe,IAA/CvC,QAAStD,EAHO,EAGPA,QAASC,EAHF,EAGEA,SAatB+F,EAhBoB,KAiBpBG,SAZkB,CAClBtC,aAAc,eACdC,GAAI,KACJ,8BAA+B,MAC/B,iCAAkC,SAClC,iCAAkC,SAClCC,sBAAuB,wBACvBlB,MAAO,QACPmB,YAAa,eAIWhE,IAAY,cACpCoG,UAAWnG,GAAYuD,EAAAA,gBAAAA,KACvByC,MAAO3C,IAAqB,IACzBuC,MAAAA,OAAA,EAAAA,EAAa7G,OAAQ,CACpBkH,QAASL,EAAY7G,KAAO,GAAK6G,EAAYvC,WAE9CuC,MAAAA,GAAA,UAAAA,EAAahJ,eAAb,eAAsBM,eAAgB,CACrC0G,aAAcgC,EAAYhJ,QAAQM,eAItCkI,EAAM,IAAIC,IAAIe,EAAAA,GAAeC,EAAAA,GAAmBf,OAAOV,SAASa,QAChEa,EAAQ,IAAIxB,gBAAgBiB,GAChCH,MAAAA,GAAA,UAAAA,EAAa7I,mBAAb,SAA0BwJ,SAAQ,SAAC1E,GAC/ByE,EAAME,OAAO,QAAS3E,MAE1BuD,EAAIL,OAASuB,EAAM3K,WAjCK,kBAkCjB+K,MAAMtB,GAAKuB,MAAK,SAACC,GACpB,IAAKA,EAAIC,GACL,MAAMC,MAAMF,EAAIG,YAGpB,OAAOH,KACRD,MAAK,SAAAC,GAAG,OAAKA,EAAII,WAxCI,4CAAH,uD,yFCvEZgH,EAAiB,SAAAN,GAAW,MAAK,CAC1CxS,KAAM,uBACN+R,SAASQ,EAAAA,EAAAA,IAAkBC,KAGlBO,EAAc,SAACP,EAAa3H,GAAd,MAA0B,CACjD7K,KAAM,oCACN+R,SAASU,EAAAA,EAAAA,IAA2BD,EAAa3H,KAGxCsH,EAAuB,iBAAO,CACvCnS,KAAM,0BACN+R,SAASvI,EAAAA,EAAAA,QAGAkE,EAAsB,SAACqE,GAAD,MAAa,CAC5C/R,KAAM,wBACN+R,QAAAA,K","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from '../../constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue =  get(systemItem, rowKey, '');\n            rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n            rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n            rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n\n    if (hasStateFilter || hasNameFilter) {\n        filterText = `\\nFilters applied\\n`;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n","import { StyleSheet } from '@react-pdf/renderer';\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_REPORT_PER_PAGE, SYSTEMS_PDF_REPORT_TITLE } from '../../constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\n\nconst generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n    const { systemsReportFirstPage, systemsReportRestPages } = PDF_REPORT_PER_PAGE;\n\n    // Table rows\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        orderBy,\n        orderHow\n    };\n    const systemsResponse = await fetchSystems(fetchSystemParams);\n    const pdfData = formatData(systemsResponse.data, 'pdf');\n\n    // first page description and data\n    const totalSystems = systemsResponse?.meta?.count;\n    const filterText = generateFilterText(filters);\n    const firstPageData =  pdfData.splice(0, systemsReportFirstPage);\n\n    const firstPage = <SystemsFirstPage\n        data={firstPageData}\n        totalSystems={totalSystems}\n        filterText={filterText} />;\n\n    const otherPages = [];\n\n    while (pdfData.length > 0) {\n        otherPages.push(pdfData.splice(0, systemsReportRestPages));\n    }\n\n    return [\n        firstPage,\n        ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n    ];\n\n};\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow) => {\n\n    const fileName = getSystemsReportFileName();\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        orderBy,\n        orderHow\n    };\n\n    const systemsResponse = await fetchSystems(fetchSystemParams);\n\n    const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n    downloadFile(data, fileName, format);\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            osFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetOSFilterList = deletedOSFilters[0]?.chips.map((chip) => {\n                return chip?.name;\n            });\n\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetOSFilterList.includes(filterName));\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, orderBy, orderDirection } = this.state;\n\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue\n        };\n\n        downloadReport(fileType, filters, orderBy, orderDirection);\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const { os: OSFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue,\n            orderBy, orderDirection, disableExport } = this.state;\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={this.state.isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: stateFilterValue,\n                                osFilter: this.state.osFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection,\n                                    nameFilterValue: config.filters?.hostnameOrId\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter,\n                                        osFilter: config.osFilter\n                                    }\n                                );\n\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n\n                                const disableExport = results?.meta?.count === 0;\n                                this.setState(() => ({\n                                    disableExport\n                                }));\n\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: stateFilterValue\n                                        }\n                                    },\n                                    {\n                                        label: OSFObject.label,\n                                        type: OSFObject.type,\n                                        value: `checkbox-os`,\n                                        filterValues: {\n                                            items: OSFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateOSFilter(values),\n                                            value: this.state.osFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            exportConfig={{\n                                isDisabled: disableExport,\n                                extraItems: [<Button\n                                    key='pdf-download-button' variant='plain'\n                                    onClick={() => this.setExportSystemsPDF(true)}>\n                                        Export as PDF\n                                </Button>],\n                                ouiaId: 'export',\n                                onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                        {exportSystemsPDF &&\n                            <DownloadSystemsPDFReport\n                                showButton={false}\n                                onSuccess={() => this.setExportSystemsPDF(false)}\n                                filters={{\n                                    stateFilter: stateFilterValue,\n                                    hostnameOrId: nameFilterValue\n                                }}\n                                orderBy={orderBy}\n                                orderHow={orderDirection}\n                            />\n                        }\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                :  this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload))\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","className","icon","WrenchIcon","headingLevel","size","hasGutter","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","formatData","data","type","systemsRowsData","rowKeys","reportRowKeys","pdfRowKeys","systemItem","rowData","rowKey","rowValue","toString","percentageKeys","dateStringByType","Date","push","responseToJSONData","JSON","stringify","responseToCSVData","items","header","Object","keys","join","row","fieldName","generateFilterText","filters","filterText","hasStateFilter","stateFilter","length","hasNameFilter","hostnameOrId","concat","getSystemsReportFileName","currentDate","toISOString","replace","split","SYSTEMS_REPORT_FILE_NAME","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","columnBuilder","value","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","generateSystemsPDFReport","orderBy","orderHow","systemsReportFirstPage","PDF_REPORT_PER_PAGE","systemsReportRestPages","fetchSystemParams","fetchSystems","systemsResponse","pdfData","meta","count","firstPageData","splice","firstPage","otherPages","systemsPage","DownloadSystemsPDFReport","props","reportFileName","reportName","SYSTEMS_PDF_REPORT_TITLE","fileName","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","downloadFile","RosPage","setState","stateFilterValue","osFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","clearStateQueryParams","resetFiltersList","chips","chip","name","activeStateFilters","state","filterName","includes","resetOSFilterList","activeOSFilters","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","sortingHeader","display_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","processQueryParams","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","url","URL","window","history","replaceState","origin","pathname","hash","fetchParams","auth","getUser","params","limit","offset","order_by","order_how","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","osFilter","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","SFObject","CUSTOM_FILTERS","OSFObject","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","label","filterValues","_e","values","updateStateFilter","updateOSFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","dispatch","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","loadSystemInfo","loadSysRecs"],"sourceRoot":""}