{"version":3,"sources":["webpack:///./src/Components/SystemDetail/SystemDetail.js"],"names":["SystemRecommendations","React","SystemDetail","props","inventoryId","useSelector","entityDetails","entity","id","Suspense","fallback","SystemDetailWrapper","getRegistry","useState","Wrapper","setWrapper","useEffect","register","systemRecsReducer","Provider","Fragment","store","getStore","Spinner","size","propTypes","PropTypes"],"mappings":"2RAGMA,EAAwBC,UAAW,kBAAM,0IAUzCC,EAAe,SAACC,GAClB,IAAMC,GAAcC,kBAAY,kBAAGC,EAAH,EAAGA,cAAH,OAAuBA,SAAvB,UAAuBA,EAAeC,cAAtC,aAAuB,EAAuBC,MAE9E,OACI,kBAAC,EAAAC,SAAD,CAAUC,SAAS,IACf,kBAACV,EAAD,KAAuBI,YAAcA,GAAkBD,MAK7DQ,EAAsB,SAAC,GAA8B,IAA5BC,EAA4B,EAA5BA,YAAgBT,EAAY,0BACzBU,gBADyB,WAChDC,EADgD,KACvCC,EADuC,KAUvD,OARAC,gBAAU,WACW,QAAbJ,IACW,QAAX,EAAAA,WAAA,mBAAeK,gBAAf,gBAA0B,CAAEC,yBAGhCH,GAAW,kBAAMH,EAAcO,WAAWC,gBAC3C,CAACR,IAEGE,EAAU,kBAACA,EAAaF,GAAe,CAAES,MAAOT,IAAcU,YACjE,kBAACpB,EAAkBC,IAAuB,kBAAC,IAAD,KAAU,kBAAC,EAAAoB,QAAD,CAASC,KAAK,SAI1Eb,EAAoBc,UAAY,CAC5Bb,YAAac,UAGjB","file":"js/503.104d20fb1d2b315bd3d3.js","sourcesContent":["import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n"],"sourceRoot":""}