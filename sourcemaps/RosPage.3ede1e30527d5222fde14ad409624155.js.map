{"version":3,"file":"js/RosPage.1649243063344.3163c89e9d6c90239d31.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'display_name',\n            orderDirection: SortByDirection.asc,\n            stateFilterValue: [],\n            isColumnModalOpen: false\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state' };\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n\n        return activeFilters.length > 0\n            ? [{\n                category: 'State',\n                chips: activeFilters\n            }]\n            : [];\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={this.state.isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: this.state.stateFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter\n                                    }\n                                );\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: this.state.stateFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                :  this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload))\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n","import { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","className","icon","WrenchIcon","headingLevel","size","hasGutter","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","RosPage","props","value","setState","stateFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","length","clearStateQueryParams","resetFiltersList","chips","chip","name","activeStateFilters","state","filterName","includes","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderBy","orderDirection","SortByDirection","sortingHeader","display_name","os","number_of_suggestions","chunkSize","inventory","React","fetchSystems","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","processQueryParams","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","url","URL","window","history","replaceState","origin","pathname","toString","hash","fetchParams","auth","getUser","params","limit","offset","page","order_by","order_how","orderHow","filters","hostnameOrId","ROS_API_ROOT","SYSTEMS_API_ROOT","query","stateFilter","forEach","append","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","push","splice","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","SFObject","CUSTOM_FILTERS","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","data","inventory_id","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","isDeleted","total","meta","count","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","items","label","type","filterValues","_e","values","updateStateFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","onExpandClick","_i","expandRow","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","dispatch","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","handleErrors","fetchSystemDetail","inventoryId","result","fetchSystemRecommendations","options","trim","status","hasError","loadSystemInfo","loadSysRecs","IS_CONFIGURED_API"],"sourceRoot":""}