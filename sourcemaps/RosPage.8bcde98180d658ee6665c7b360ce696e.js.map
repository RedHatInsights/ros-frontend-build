{"version":3,"file":"js/RosPage.1654780128710.b7a6bf7d7689998bdb65.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Components/Reports/Common/IconCanvas.js","webpack:///./src/Components/Reports/Common/ExecutiveFirstPage.js","webpack:///./src/Components/Reports/Common/DescriptionList.js","webpack:///./src/Components/Reports/Common/ExecutiveSecondPage.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from '../../constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue =  get(systemItem, rowKey, '');\n            rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n            rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n            rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\nexport const formatExecutiveReportData = (data) => {\n\n    const { systems_per_state: systemsPerState, conditions } = data;\n\n    const stateChartData = [];\n    const stateTableData = [['# of systems']];\n\n    const conditionsChartData = [];\n    const conditionsTableData = [['# of occurrences']];\n\n    const condtionsInfo = {\n        io: {\n            name: 'Disk IO',\n            occurances: []\n        },\n        memory: {\n            name: 'RAM',\n            occurances: []\n        },\n        cpu: {\n            name: 'CPU',\n            occurances: []\n        }\n    };\n\n    const stateNameMapping = {\n        idling: 'Idling',\n        oversized: 'Oversized',\n        under_pressure: 'Under pressure', /* eslint-disable-line camelcase */\n        undersized: 'Undersized',\n        waiting_for_data: 'Waiting for data', /* eslint-disable-line camelcase */\n        optimized: 'Optimized'\n    };\n\n    Object.keys(systemsPerState).map((state) => {\n        const stateName = stateNameMapping[state];\n        const percentage = systemsPerState[state]?.percentage;\n        const count = systemsPerState[state]?.count;\n\n        stateChartData.push({ x: stateName, y: percentage });\n        stateTableData.push([`${count} (${percentage}% of total)`]);\n    });\n\n    Object.keys(conditions).map((condition) => {\n        const conditionName = condtionsInfo[condition].name;\n        const percentage = Math.floor(conditions[condition]?.percentage);\n        const count = conditions[condition]?.count;\n\n        conditionsChartData.push({ x: conditionName, y: percentage });\n        conditionsTableData.push([`${count}`]);\n\n        const underPressureValue = (conditions[condition].under_pressure !== null) ? conditions[condition].under_pressure : 0;\n        const undersizedValue = (conditions[condition].undersized !== null) ? conditions[condition].undersized : 0;\n        const oversizedValue = (conditions[condition].oversized !== null) ? conditions[condition].oversized : 0;\n\n        condtionsInfo[condition].occurances.push(['Under pressure', `${underPressureValue}`]);\n        if (undersizedValue !== -1 && oversizedValue !== -1) {\n            condtionsInfo[condition].occurances.push(['Undersized', `${undersizedValue}`]);\n            condtionsInfo[condition].occurances.push(['Oversized', `${oversizedValue}`]);\n        }\n    });\n\n    return { stateChartData, stateTableData, conditionsChartData, conditionsTableData, condtionsInfo };\n};\n","import { StyleSheet } from '@react-pdf/renderer';\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occuranceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 6\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from '../../constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf');\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters)\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from '../../constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Canvas } from '@react-pdf/renderer';\nimport { CircleIconConfig } from '@patternfly/react-icons/dist/js/icons/circle-icon';\n\nexport const IconCanvas = ({ width = 15, height = 10, padding = 2,\n    iconScale = 0.014, iconPath = CircleIconConfig.svgPath, fillColor = '#8BC1F7' }) => {\n\n    return (\n        <Canvas\n            style={{\n                width,\n                height,\n                padding\n            }}\n            paint={({ path, scale }) => {\n                scale(iconScale);\n                path(iconPath).fill(fillColor);\n            }}\n        />\n    );\n};\n\nIconCanvas.propTypes = {\n    width: propTypes.number,\n    height: propTypes.number,\n    padding: propTypes.number,\n    iconScale: propTypes.number,\n    iconPath: propTypes.string,\n    fillColor: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Chart, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport { formatExecutiveReportData } from '../Util';\nimport styles from './styles';\nimport { IconCanvas } from './IconCanvas';\n\nexport const ExecutiveFirstPage = ({ data }) => {\n    const { conditions_count: conditionsCount, non_optimized_count: nonOptimizedCount, total_count: totalCount } = data?.meta;\n    const optimizedCount = data?.systems_per_state?.optimized?.count;   /* eslint-disable-line camelcase */\n    const newLine = '\\n';\n    const bullet = '\\u2022';\n\n    const ioOccuranceTableData = [\n        [\n            <View key={'disk-io-title'} style={{ display: 'flex',\n                flexDirection: 'row' }}>\n                <IconCanvas fillColor='#8BC1F7'/>\n                <Text>Disk I/O</Text>\n            </View>\n\n        ]\n    ];\n\n    const ramOccuranceTableData = [\n        [\n            <View key={'memory-title'}  style={{ display: 'flex',\n                flexDirection: 'row' }}>\n                <IconCanvas fillColor='#002F5D'/>\n                <Text>RAM</Text>\n            </View>\n\n        ]\n    ];\n\n    const cpuOccuranceTableData = [\n        [\n            <View key={'cpu-title'} style={{ display: 'flex',\n                flexDirection: 'row' }}>\n                <IconCanvas fillColor='#0066CC'/>\n                <Text>CPU</Text>\n            </View>\n\n        ]\n    ];\n\n    const formattedReportData = formatExecutiveReportData(data);\n\n    const { stateChartData, stateTableData, conditionsChartData,  conditionsTableData, condtionsInfo } = formattedReportData;\n\n    ioOccuranceTableData.push(...condtionsInfo.io.occurances);\n    ramOccuranceTableData.push(...condtionsInfo.memory.occurances);\n    cpuOccuranceTableData.push(...condtionsInfo.cpu.occurances);\n\n    return <Fragment key=\"first-page\">\n        <Text>\n            This executive summary highlights the performance for your registered systems included in the resource optimization service.\n        </Text>\n        <Text>\n            {`This report gives you an overview of:${newLine}`}\n        </Text>\n\n        <Text>\n            {\n                `${bullet} The number of systems registered\n                ${bullet} Number of registered systems in a non-optimal state\n                ${bullet} Number of system performance issues\n                ${bullet} Description of system performance levels\n                ${bullet} Performance level details for system resources operating in a non-optimal state`}\n        </Text>\n\n        {/* {Total Systems} */}\n        <Text style={styles.execHeading}>Registered systems</Text>\n        {/* eslint-disable-next-line max-len */}\n        <Text>{`There are ${totalCount} systems registered in the resource optimization service. The service identified ${optimizedCount} of ${totalCount} systems as optimized, and ${nonOptimizedCount} of ${totalCount} registered systems as having a non-optimal state.`}</Text>\n\n        <Text style={styles.execHeading}>Breakdown of registered systems</Text>\n        <Section>\n            <Column>\n                <Chart\n                    chartType=\"pie\"\n                    subTitle=\"Non-optimal\"\n                    title={nonOptimizedCount}\n                    data={stateChartData}\n                    colorSchema={'multi'}\n                    legendHeader={'State'}\n                    showLabels={false}\n                    labels={() => ''}\n                />\n            </Column>\n            <Column>\n                <Table\n                    withHeader\n                    rows={stateTableData}\n                />\n            </Column>\n        </Section>\n        <Text style={styles.execInfoText}>Description of states are on the second page of the report*</Text>\n\n        <Text style={styles.execHeading}>System performance issues</Text>\n        <Text>{`There are ${conditionsCount} system performance issues.`}</Text>\n\n        <Section>\n            <Column>\n                <Chart\n                    chartType=\"donut\"\n                    subTitle=\"Conditions\"\n                    title={conditionsCount}\n                    data={conditionsChartData}\n                    colorSchema={'blue'}\n                    legendHeader={'Conditions'}\n                    showLabels={false}\n                />\n            </Column>\n            <Column>\n                <Table\n                    withHeader\n                    rows={conditionsTableData}\n                />\n            </Column>\n        </Section>\n\n        <Text style={styles.occuranceHeading}>Breakdown of occurences</Text>\n\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={ioOccuranceTableData}\n                />\n            </Column>\n            <Column style={{ flex: 0.2 }} />\n            <Column>\n                <Table\n                    withHeader\n                    rows={ramOccuranceTableData}\n                />\n            </Column>\n            <Column style={{ flex: 0.2 }} />\n            <Column>\n                <Table\n                    withHeader\n                    rows={cpuOccuranceTableData}\n                />\n            </Column>\n        </Section>\n\n        {/* eslint-disable-next-line max-len */}\n        <Text style={styles.execInfoText}>Under pressure conditions are only reported for systems where Kernel Pressure Stall Information is enabled. Check the documentation for details.*</Text>\n        <Text style={styles.execInfoText}>Description of conditions are on the second page of the report*</Text>\n    </Fragment>;\n};\n\nExecutiveFirstPage.propTypes = {\n    data: propTypes.object\n};\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\nimport {  Dl, Dt, Dd } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { IconCanvas } from './IconCanvas';\n\nexport const DescriptionList = ({ key, title, description, iconPath, iconScale, fillColor }) => {\n\n    return (\n        <Dl key={key}>\n            <Dt>\n                <View style={{ display: 'flex',\n                    flexDirection: 'row' }}>\n                    {\n                        iconPath ? <IconCanvas iconPath={iconPath} iconScale={iconScale} fillColor={fillColor}/> : null\n                    }\n                    <Text>{title}</Text>\n                </View>\n            </Dt>\n            <Dd>{description}</Dd>\n        </Dl>\n    );\n};\n\nDescriptionList.propTypes = {\n    key: propTypes.string,\n    title: propTypes.string,\n    description: propTypes.string,\n    iconPath: propTypes.string,\n    iconScale: propTypes.number,\n    fillColor: propTypes.string\n};\n\n","import React, { Fragment } from 'react';\nimport { Text } from '@react-pdf/renderer';\nimport { TachometerAltIconConfig } from '@patternfly/react-icons/dist/js/icons/tachometer-alt-icon';\nimport { AngleDoubleDownIconConfig } from '@patternfly/react-icons/dist/js/icons/angle-double-down-icon';\nimport { AngleDoubleUpIconConfig } from '@patternfly/react-icons/dist/js/icons/angle-double-up-icon';\nimport { AutomationIconConfig } from '@patternfly/react-icons/dist/js/icons/automation-icon';\nimport { InProgressIconConfig } from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { CheckCircleIconConfig } from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\nimport styles from './styles';\nimport { DescriptionList } from './DescriptionList';\n\nexport const ExecutiveSecondPage = () => {\n\n    const stateDescription = [\n        {\n            title: 'Optimized',\n            description: 'Performing at an optimal level',\n            iconPath: CheckCircleIconConfig.svgPath,\n            iconScale: 0.014,\n            fillColor: 'green'\n        },\n        {\n            title: 'Under pressure',\n            description: 'Peaking occasionally',\n            iconPath: TachometerAltIconConfig.svgPath,\n            iconScale: 0.014,\n            fillColor: '#030303'\n        },\n        {\n            title: 'Undersized',\n            description: 'Using more than 80% of system resources',\n            iconPath: AngleDoubleDownIconConfig.svgPath,\n            iconScale: 0.014,\n            fillColor: 'red'\n        },\n        {\n            title: 'Oversized',\n            description: 'Using less than 20% of system resources',\n            iconPath: AngleDoubleUpIconConfig.svgPath,\n            iconScale: 0.014,\n            fillColor: '#f09800'\n        },\n        {\n            title: 'Idling',\n            description: 'Consuming less than 5% of resources',\n            iconPath: AutomationIconConfig.svgPath,\n            iconScale: 0.008,\n            fillColor: '#030303'\n        },\n        {\n            title: 'Waiting for data',\n            description: 'Data has not been received or is being processed. Initial data processing takes up to 24 hours.',\n            iconPath: InProgressIconConfig.svgPath,\n            iconScale: 0.008,\n            fillColor: '#2B9AF3'\n        }\n    ];\n\n    const conditionsDescription = [\n        {\n            title: 'CPU pressure',\n            description: 'CPU registered peaks higher than 20% over several one-minute time periods'\n        },\n        {\n            title: 'Disk I/O  pressure',\n            description: 'Disk I/O registered peaks higher than 20% over several one-minute time periods'\n        },\n        {\n            title: 'RAM pressure',\n            description: 'RAM registered peaks higher than 20% over several one-minute time periods'\n        }\n    ];\n\n    return <Fragment key=\"second-page\">\n        <Text style={styles.execHeading}>Description of states</Text>\n        {\n            stateDescription.map(\n                (state) => <DescriptionList\n                    key={state.title}\n                    title={state.title}\n                    description={state.description}\n                    iconPath={state.iconPath}\n                    iconScale={state.iconScale}\n                    fillColor={state.fillColor} />)\n        }\n\n        <Text style={styles.execHeading}>Description of conditions</Text>\n        {\n            conditionsDescription.map(\n                (condition) => <DescriptionList\n                    key={condition.title}\n                    title={condition.title}\n                    description={condition.description}/>)\n        }\n    </Fragment>;\n};\n\n","import React, { Fragment, useState } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport ExportIcon from '@patternfly/react-icons/dist/js/icons/export-icon';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ExecutiveFirstPage } from './Common/ExecutiveFirstPage';\nimport { ExecutiveSecondPage } from './Common/ExecutiveSecondPage';\nimport propTypes from 'prop-types';\nimport { REPORT_NOTIFICATIONS } from '../../constants';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport =  async () =>{\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportResponse = await fetchExecutiveReport();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n            return [\n                <ExecutiveFirstPage key='executive-first-page' data={executiveReportResponse} />,\n                <ExecutiveSecondPage key='executive-second-page'/>\n            ];\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <DownloadButton\n                label={\n                    loading\n                        ? 'Loading...'\n                        : 'Download executive report'\n                }\n                reportName={'Resource optimization service report'}\n                type=\"\"\n                fileName={`Resource-Optimization-Executive-Report--${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`}\n                size=\"A4\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateExecutivePDFReport()}\n                buttonProps={{\n                    variant: 'link',\n                    component: 'a',\n                    icon: <ExportIcon className=\"iconOverride\" />,\n                    className: 'downloadButtonOverride',\n                    isAriaDisabled: isDisabled,\n                    ...(loading ? { isDisabled: true } : null)\n                }}\n            />\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            osFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetOSFilterList = deletedOSFilters[0]?.chips.map((chip) => {\n                return chip?.name;\n            });\n\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetOSFilterList.includes(filterName));\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications());\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const { os: OSFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue,\n            orderBy, orderDirection, disableExport } = this.state;\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={this.state.isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: stateFilterValue,\n                                osFilter: this.state.osFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection,\n                                    nameFilterValue: config.filters?.hostnameOrId\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter,\n                                        osFilter: config.osFilter\n                                    }\n                                );\n\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n\n                                const disableExport = results?.meta?.count === 0;\n                                this.setState(() => ({\n                                    disableExport\n                                }));\n\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: stateFilterValue\n                                        }\n                                    },\n                                    {\n                                        label: OSFObject.label,\n                                        type: OSFObject.type,\n                                        value: `checkbox-os`,\n                                        filterValues: {\n                                            items: OSFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateOSFilter(values),\n                                            value: this.state.osFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            exportConfig={{\n                                isDisabled: disableExport,\n                                extraItems: [\n                                    <li key='pdf-button-item' role='menuitem'>\n                                        <Button\n                                            key='pdf-download-button'\n                                            variant='none'\n                                            className=\"pf-c-dropdown__menu-item\"\n                                            onClick={() => this.setExportSystemsPDF(true)}>\n                                            Export as PDF\n                                        </Button>\n                                    </li>\n                                ],\n                                ouiaId: 'export',\n                                onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                        {exportSystemsPDF &&\n                            <DownloadSystemsPDFReport\n                                showButton={false}\n                                onSuccess={() => this.setExportSystemsPDF(false)}\n                                filters={{\n                                    stateFilter: stateFilterValue,\n                                    hostnameOrId: nameFilterValue,\n                                    osFilter: osFilterValue\n                                }}\n                                orderBy={orderBy}\n                                orderHow={orderDirection}\n                            />\n                        }\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader className='ros-page-header'>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                    <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                : this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, EXECUTIVE_REPORT_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    await window.insights.chrome.auth.getUser();\n\n    const url = new URL(`${ROS_API_ROOT}${EXECUTIVE_REPORT_API}`,  window.location.origin);\n\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","Bullseye","EmptyState","className","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","Stack","hasGutter","StackItem","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","formatData","data","type","systemsRowsData","rowKeys","reportRowKeys","pdfRowKeys","systemItem","rowData","rowKey","rowValue","toString","percentageKeys","dateStringByType","Date","push","responseToJSONData","JSON","stringify","responseToCSVData","items","header","Object","keys","join","row","fieldName","generateFilterText","filters","filterText","filterSeparatorOnLine","hasStateFilter","stateFilter","length","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","concat","sort","getSystemsReportFileName","currentDate","toISOString","replace","split","SYSTEMS_REPORT_FILE_NAME","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occuranceHeading","execInfoText","columnBuilder","value","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useDispatch","start","REPORT_NOTIFICATIONS","success","failure","useEffect","addNotification","generateSystemsPDFReport","firstPageCount","PDF_RECORDS_PER_PAGE","otherPageCount","fetchSystemParams","fetchSystems","systemsResponse","clearNotifications","pdfData","firstPageProps","splice","meta","count","otherPages","systemsPage","reportName","SYSTEMS_PDF_REPORT_TITLE","fileName","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","showNotification","clearNotification","downloadFile","IconCanvas","width","height","padding","iconScale","iconPath","CircleIconConfig","fillColor","paint","path","scale","fill","ExecutiveFirstPage","conditionsCount","conditions_count","nonOptimizedCount","non_optimized_count","totalCount","total_count","optimizedCount","systems_per_state","optimized","bullet","ioOccuranceTableData","ramOccuranceTableData","cpuOccuranceTableData","formattedReportData","systemsPerState","conditions","stateChartData","stateTableData","conditionsChartData","conditionsTableData","condtionsInfo","io","name","occurances","memory","cpu","stateNameMapping","idling","oversized","under_pressure","undersized","waiting_for_data","state","stateName","percentage","x","y","condition","conditionName","Math","floor","underPressureValue","undersizedValue","oversizedValue","formatExecutiveReportData","chartType","subTitle","colorSchema","legendHeader","showLabels","labels","DescriptionList","Dl","Dt","Dd","ExecutiveSecondPage","stateDescription","CheckCircleIconConfig","TachometerAltIconConfig","AngleDoubleDownIconConfig","AngleDoubleUpIconConfig","AutomationIconConfig","InProgressIconConfig","DownloadExecutivePDFReport","loading","setLoading","generateExecutivePDFReport","fetchExecutiveReport","executiveReportResponse","label","buttonProps","isAriaDisabled","RosPage","setState","stateFilterValue","osFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","clearStateQueryParams","resetFiltersList","chips","chip","activeStateFilters","filterName","includes","resetOSFilterList","activeOSFilters","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","sortingHeader","display_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","processQueryParams","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","url","URL","window","history","replaceState","origin","pathname","hash","fetchParams","auth","getUser","params","limit","offset","order_by","order_how","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","notification","SFObject","CUSTOM_FILTERS","OSFObject","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","filterValues","_e","values","updateStateFilter","updateOSFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","role","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","fetchSystemHistory","EXECUTIVE_REPORT_API","loadSystemInfo","loadSysRecs"],"sourceRoot":""}