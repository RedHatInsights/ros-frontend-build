{"version":3,"file":"js/RosPage.384fd88d9e15e27ea617.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Constants.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Routes/RosPage/useFeatureFlag.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nexport const ServiceNotConfigured = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <AsynComponent\n            appId=\"ros_zero_state\"\n            appName=\"dashboard\"\n            module=\"./AppZeroState\"\n            scope=\"dashboard\"\n            ErrorComponent={<ErrorState />}\n            app=\"Resource_Optimization\"\n        />\n    </Suspense>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","// Reports\n\nexport const SYSTEMS_PDF_REPORT_TITLE = 'Insights Resource Optimization Systems Report';\nexport const SYSTEMS_REPORT_FILE_NAME = 'resource_optimization--';\nexport const EXECUTIVE_REPORT_FILE_NAME = 'Resource-Optimization-Executive-Report--';\n\nexport const pdfRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'report_date'];\n\nexport const reportRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'cloud_provider', 'instance_type', 'idling_time', 'report_date', 'groups'];\n\nexport const percentageKeys = ['performance_utilization.cpu', 'performance_utilization.memory', 'idling_time'];\n\nexport const PDF_RECORDS_PER_PAGE = {\n    firstPageCount: 16,\n    otherPageCount: 22\n\n};\n\nexport const REPORT_NOTIFICATIONS = {\n    start: {\n        variant: 'info',\n        title: 'Generating data. Download may take a moment to start.'\n    },\n    success: {\n        variant: 'success',\n        title: 'Export successful'\n    },\n    failure: {\n        variant: 'danger',\n        autoDismiss: false,\n        title: 'Export failed. Please try exporting again.'\n    }\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from './Constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue;\n            if (rowKey === 'groups') {\n                rowValue =  get(systemItem, rowKey, []);\n                rowValue = rowValue.length === 0  ? 'N/A' : rowValue[0].name;\n\n            } else {\n                rowValue =   get(systemItem, rowKey, '');\n                rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n                rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n                rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n            }\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\n","import { StyleSheet } from '@react-pdf/renderer';\nimport global_BorderColor_300 from '@patternfly/react-tokens/dist/js/global_BorderColor_300';  /* eslint-disable-line camelcase */\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occurrenceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 7,\n        color: '#6A6E73'\n    },\n    instanceTypeHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 20\n    },\n    instanceTypeHeadingFirst: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B'\n    },\n    instanceTypeDesc: {\n        fontSize: 10,\n        textAlign: 'left',\n        marginBottom: 4\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    tableRowBackground: {\n        backgroundColor: global_BorderColor_300.value  /* eslint-disable-line camelcase */\n    },\n    instanceTableHeading: {\n        fontSize: 10,\n        color: '#6A6E73',\n        paddingBottom: 4,\n        fontWeight: 'bold'\n    },\n    bold: {\n        fontFamily: 'Helvetica-Bold',\n        fontWeight: 700\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf');\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters)\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import React, { Fragment, useState } from 'react';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport { EXECUTIVE_REPORT_FILE_NAME, REPORT_NOTIFICATIONS } from './Constants';\nimport { Button } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport = async () =>{\n        const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`;\n        const fileName = `${EXECUTIVE_REPORT_FILE_NAME}${currentDate}`;\n\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportBlob = await fetchExecutiveReport();\n            const url = window.URL.createObjectURL(executiveReportBlob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n            setLoading(false);\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <Button\n                variant=\"link\"\n                icon={<ExportIcon />}\n                iconPosition=\"left\"\n                onClick={() => generateExecutivePDFReport()}\n                isDisabled={loading || isDisabled}\n                className='downloadButtonOverride'>\n                {  loading\n                    ? 'Loading...'\n                    : 'Download executive report'\n                }\n            </Button>\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM,\n    SERVICE_NAME\n} from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport useFeatureFlag from './useFeatureFlag';\nimport { displayGroup } from '../../Components/RosTable/RenderColumn';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true,\n            osFilterValue: [],\n            OSFObject: {}\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            group_name: 'group_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome?.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n        this.processFilterValues();\n        if (this.props.groupsEnabled) {\n            SYSTEM_TABLE_COLUMNS.splice(1, 0,  {\n                key: 'groups',\n                title: 'Group',\n                modalTitle: 'Group',\n                dataLabel: 'Group',\n                renderFunc: (data) => displayGroup(data),\n                isChecked: true,\n                isDisabled: false,\n                isShownByDefault: true,\n                props: { isStatic: true }\n            });\n        }\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    processFilterValues() {\n        let osObject = {};\n        osObject.label = 'Operating system';\n        osObject.type = conditionalFilterType.checkbox;\n        osObject.filterValues = {};\n\n        // API call to systems endpoint\n        this.fetchSystems({\n            perPage: -1,\n            orderBy: 'os',\n            orderHow: SortByDirection.desc\n        }).then((response) => {\n            osObject.filterValues.items = Array.from(new Set((response.data).reduce((filtered, system) => {\n                if (system.os) {\n                    filtered.push(system.os);\n                }\n\n                return filtered;\n            }, []))).map(os => {\n                return { label: os, value: os.split(' ')[1] };\n            });\n\n            if (osObject.filterValues.items.length === 0) {\n                osObject.filterValues.items = [{ label: 'No versions available' }];\n                osObject.type = conditionalFilterType.group;\n            }\n\n            this.setState({\n                OSFObject: osObject\n            });\n        });\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        let params = {\n            limit: fetchParams.perPage,\n            ...fetchParams?.page && {\n                offset: (fetchParams.page - 1) * fetchParams.perPage\n            },\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n            query.append('group_name', groupFilterValue);\n        });\n\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetFiltersList = deletedOSFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications());\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue,\n            orderBy, orderDirection, disableExport, isColumnModalOpen,\n            OSFObject } = this.state;\n\n        const customFilterConfig = {\n            items: [\n                {\n                    label: SFObject.label,\n                    type: SFObject.type,\n                    value: `checkbox-state`,\n                    filterValues: {\n                        items: SFObject.filterValues.items,\n                        onChange: (_e, values) => this.updateStateFilter(values),\n                        value: stateFilterValue\n                    }\n                },\n                {\n                    label: OSFObject.label,\n                    type: OSFObject.type,\n                    value: `checkbox-os`,\n                    filterValues: {\n                        items: OSFObject.filterValues?.items,\n                        onChange: (_e, values) => this.updateOSFilter(values),\n                        value: osFilterValue\n                    }\n                }\n            ]\n        };\n\n        return (\n            this.props.showConfigSteps\n                ? <ServiceNotConfigured />\n                : <React.Fragment>\n                    <PageHeader className='ros-page-header'>\n                        <PageHeaderTitle title='Resource Optimization'/>\n                        <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                    </PageHeader>\n\n                    <Main>\n                        <Card className='pf-t-light  pf-m-opaque-100'>\n                            <CardBody>\n                                <ManageColumnsModal\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={this.setColumnModalOpen}\n                                    modalColumns={this.props.columns}\n                                    saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                                />\n                                <InventoryTable\n                                    disableDefaultColumns\n                                    ref={this.inventory}\n                                    hasCheckbox={ false }\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        className: 'ros-systems-table'\n                                    }}\n                                    variant=\"compact\"\n                                    hideFilters={{ all: true, name: false, hostGroupFilter: false }}\n                                    autoRefresh= {true}\n                                    customFilters={{\n                                        stateFilter: stateFilterValue,\n                                        osFilter: osFilterValue\n                                    }}\n                                    columns={activeColumns}\n                                    getEntities={async (_items, config) => {\n                                        this.setState(() => ({\n                                            orderBy: config.orderBy,\n                                            orderDirection: config.orderDirection,\n                                            nameFilterValue: config.filters?.hostnameOrId\n                                        }));\n                                        const results = await this.fetchSystems(\n                                            {\n                                                page: config.page, perPage: config.per_page,\n                                                orderBy: this.sortingHeader[config.orderBy],\n                                                orderHow: config.orderDirection,\n                                                filters: config.filters,\n                                                stateFilter: config.stateFilter,\n                                                osFilter: config.osFilter,\n                                                groupFilter: config?.filters?.hostGroupFilter // the group filter is set by Inventory\n                                            }\n                                        );\n\n                                        const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                        const invSystems = await this.fetchInventoryDetails(invIds, {\n                                            ...config,\n                                            orderBy: undefined,\n                                            orderDirection: undefined,\n                                            page: 1,\n                                            hasItems: true\n                                        });\n\n                                        const disableExport = results?.meta?.count === 0;\n                                        this.setState(() => ({\n                                            disableExport\n                                        }));\n\n                                        return {\n                                            results: results.data.map((system) => {\n                                                const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                                return ({\n                                                    ...invRec,\n                                                    ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                                    ...system\n                                                });\n                                            }),\n                                            total: results.meta.count,\n                                            page: config.page,\n                                            per_page: config.per_page /* eslint-disable-line camelcase */\n                                        };\n                                    }}\n                                    onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                        this.setState({\n                                            getEntities: api?.getEntities\n                                        });\n                                        register({\n                                            ...mergeWithEntities(\n                                                entitiesReducer(\n                                                    INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                                )\n                                            )\n                                        });\n                                        this.props.setSort(orderBy, orderDirection, 'CHANGE_SORT');\n                                    }}\n                                    expandable='true'\n                                    filterConfig={customFilterConfig}\n                                    activeFiltersConfig={{\n                                        filters: this.getActiveFilterConfig(),\n                                        onDelete: this.onDeleteFilters\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '',\n                                            {\n                                                label: 'Manage columns',\n                                                onClick: () => this.setColumnModalOpen(true)\n                                            }\n                                        ]\n                                    }}\n                                    exportConfig={{\n                                        isDisabled: disableExport,\n                                        extraItems: [\n                                            <li key='pdf-button-item' role='menuitem'>\n                                                <Button\n                                                    key='pdf-download-button'\n                                                    variant='none'\n                                                    className=\"pf-c-dropdown__menu-item\"\n                                                    onClick={() => this.setExportSystemsPDF(true)}>\n                                                Export to PDF\n                                                </Button>\n                                            </li>\n                                        ],\n                                        ouiaId: 'export',\n                                        onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                                    }}\n                                    onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                                >\n                                </InventoryTable>\n                                {exportSystemsPDF &&\n                                <DownloadSystemsPDFReport\n                                    showButton={false}\n                                    onSuccess={() => this.setExportSystemsPDF(false)}\n                                    filters={{\n                                        stateFilter: stateFilterValue,\n                                        hostnameOrId: nameFilterValue,\n                                        osFilter: osFilterValue\n                                    }}\n                                    orderBy={orderBy}\n                                    orderHow={orderDirection}\n                                />\n                                }\n                            </CardBody>\n                        </Card>\n                    </Main>\n                </React.Fragment>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.hasRead === false\n                            ? <NotAuthorized serviceName={SERVICE_NAME} />\n                            : this.renderConfigStepsOrTable()\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    chrome: PropTypes.object,\n    groupsEnabled: PropTypes.bool\n};\n\nconst RosPageWithChrome =  props => {\n    const chrome = useChrome();\n    const groupsEnabled = useFeatureFlag('hbi.ui.inventory-groups');\n\n    return (\n        <RosPage {...props} chrome={ chrome } groupsEnabled={groupsEnabled} />\n    );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPageWithChrome));\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n    const { flagsReady } = useFlagsStatus();\n    const isFlagEnabled = useFlag(flag);\n    return flagsReady ? isFlagEnabled : false;\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n        query.append('group_name', groupFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","Suspense","fallback","Bullseye","Spinner","appId","appName","module","scope","ErrorComponent","app","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","variant","description","TextContent","Text","component","TextVariants","Split","hasGutter","SplitItem","Button","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","pdfRowKeys","reportRowKeys","percentageKeys","REPORT_NOTIFICATIONS","autoDismiss","formatData","data","type","systemsRowsData","rowKeys","systemItem","rowData","rowKey","rowValue","length","name","toString","includes","dateStringByType","Date","push","responseToJSONData","JSON","stringify","responseToCSVData","items","header","Object","keys","join","row","fieldName","generateFilterText","filters","filterText","filterSeparatorOnLine","hasStateFilter","stateFilter","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","concat","sort","getSystemsReportFileName","currentDate","toISOString","replace","split","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occurrenceHeading","execInfoText","instanceTypeHeading","instanceTypeHeadingFirst","instanceTypeDesc","flexRow","tableRowBackground","backgroundColor","global_BorderColor_300","instanceTableHeading","fontWeight","bold","fontFamily","columnBuilder","value","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useDispatch","start","success","failure","useEffect","addNotification","generateSystemsPDFReport","firstPageCount","otherPageCount","fetchSystemParams","fetchSystems","systemsResponse","clearNotifications","pdfData","firstPageProps","splice","meta","count","otherPages","systemsPage","reportName","fileName","size","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","showNotification","clearNotification","downloadFile","DownloadExecutivePDFReport","loading","setLoading","generateExecutivePDFReport","a","fetchExecutiveReport","executiveReportBlob","url","window","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","remove","icon","iconPosition","className","RosPage","setState","stateFilterValue","osFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","clearStateQueryParams","resetFiltersList","chips","chip","activeStateFilters","state","filterName","activeOSFilters","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","OSFObject","sortingHeader","display_name","group_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","chrome","this","hideGlobalFilter","appAction","isROSConfigured","processQueryParams","processFilterValues","groupsEnabled","SYSTEM_TABLE_COLUMNS","dataLabel","renderFunc","displayGroup","isStatic","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","osObject","conditionalFilterType","filterValues","then","response","Array","from","Set","reduce","filtered","system","label","history","replaceState","origin","pathname","hash","fetchParams","params","limit","offset","order_by","order_how","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","groupFilter","groupFilterValue","fetch","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","records","getEntities","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","notification","SFObject","CUSTOM_FILTERS","activeColumns","getActiveColumns","customFilterConfig","_e","values","updateStateFilter","updateOSFilter","showConfigSteps","PageHeader","PageHeaderTitle","Main","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","hostGroupFilter","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","undefined","hasItems","invSystems","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","setSort","expandable","filterConfig","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","role","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","permissions","hasRead","NotAuthorized","serviceName","SERVICE_NAME","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","flagsReady","isFlagEnabled","useChrome","useFlagsStatus","useFlag","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","fetchSystemHistory","CRC_PDF_GENERATE_API","method","headers","service","template","blob","loadSystemInfo","loadSysRecs"],"sourceRoot":""}