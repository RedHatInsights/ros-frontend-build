{"version":3,"file":"js/RosPage.1649764838960.75d44f7d8017bfbaa83c.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","import { StyleSheet } from '@react-pdf/renderer';\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    osCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 0.8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst buildSystemsHeader = () => {\n\n    const headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            let styleArr = index === 0 ? [styles.systemNameCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_REPORT_PER_PAGE, SYSTEMS_PDF_REPORT_TITLE } from '../../constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\n\nconst generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n    const { systemsReportFirstPage, systemsReportRestPages } = PDF_REPORT_PER_PAGE;\n\n    // Table rows\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        orderBy,\n        orderHow\n    };\n    const systemsResponse = await fetchSystems(fetchSystemParams);\n    const pdfData = formatData(systemsResponse.data, 'pdf');\n\n    // first page description and data\n    const totalSystems = systemsResponse?.meta?.count;\n    const filterText = generateFilterText(filters);\n    const firstPageData =  pdfData.splice(0, systemsReportFirstPage);\n\n    const firstPage = <SystemsFirstPage\n        data={firstPageData}\n        totalSystems={totalSystems}\n        filterText={filterText} />;\n\n    const otherPages = [];\n\n    while (pdfData.length > 0) {\n        otherPages.push(pdfData.splice(0, systemsReportRestPages));\n    }\n\n    return [\n        firstPage,\n        ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n    ];\n\n};\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow) => {\n\n    const fileName = getSystemsReportFileName();\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        orderBy,\n        orderHow\n    };\n\n    const systemsResponse = await fetchSystems(fetchSystemParams);\n\n    const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n    downloadFile(data, fileName, format);\n\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n\n        return activeFilters.length > 0\n            ? [{\n                category: 'State',\n                chips: activeFilters\n            }]\n            : [];\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, orderBy, orderDirection } = this.state;\n\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue\n        };\n\n        downloadReport(fileType, filters, orderBy, orderDirection);\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue,\n            orderBy, orderDirection, disableExport } = this.state;\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={this.state.isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: stateFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection,\n                                    nameFilterValue: config.filters?.hostnameOrId\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter\n                                    }\n                                );\n\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n\n                                const disableExport = results?.meta?.count === 0;\n                                this.setState(() => ({\n                                    disableExport\n                                }));\n\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: stateFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            exportConfig={{\n                                isDisabled: disableExport,\n                                extraItems: [<Button\n                                    key='pdf-download-button' variant='plain'\n                                    onClick={() => this.setExportSystemsPDF(true)}>\n                                        Export as PDF\n                                </Button>],\n                                ouiaId: 'export',\n                                onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                        {exportSystemsPDF &&\n                            <DownloadSystemsPDFReport\n                                showButton={false}\n                                onSuccess={() => this.setExportSystemsPDF(false)}\n                                filters={{\n                                    stateFilter: stateFilterValue,\n                                    hostnameOrId: nameFilterValue\n                                }}\n                                orderBy={orderBy}\n                                orderHow={orderDirection}\n                            />\n                        }\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                :  this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload))\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","className","icon","WrenchIcon","headingLevel","size","hasGutter","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","osCell","headerStyle","display","flexDirection","justifyContent","rowStyle","columnBuilder","value","style","SystemsTablePage","data","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","rowValue","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","filterText","generateSystemsPDFReport","filters","orderBy","orderHow","systemsReportFirstPage","PDF_REPORT_PER_PAGE","systemsReportRestPages","fetchSystemParams","stateFilter","fetchSystems","systemsResponse","pdfData","formatData","meta","count","generateFilterText","firstPageData","splice","firstPage","otherPages","length","push","systemsPage","DownloadSystemsPDFReport","props","reportFileName","getSystemsReportFileName","reportName","SYSTEMS_PDF_REPORT_TITLE","type","fileName","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","responseToJSONData","responseToCSVData","downloadFile","RosPage","setState","stateFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","clearStateQueryParams","resetFiltersList","chips","chip","name","activeStateFilters","state","filterName","includes","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","sortingHeader","display_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","processQueryParams","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","url","URL","window","history","replaceState","origin","pathname","toString","hash","fetchParams","auth","getUser","params","limit","offset","order_by","order_how","hostnameOrId","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","SFObject","CUSTOM_FILTERS","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","items","label","filterValues","_e","values","updateStateFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","dispatch","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","loadSystemInfo","loadSysRecs"],"sourceRoot":""}