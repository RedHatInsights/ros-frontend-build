{"version":3,"file":"js/621.03541084e2aa4f79a72c.js","mappings":"waAMMA,GAAUC,EAAAA,EAAAA,OAAK,kBAAM,uGACrBC,GAAkBD,EAAAA,EAAAA,OAAK,kBAAM,uGAEtBE,EAAS,kBAClB,kBAAC,EAAAC,SAAD,CAAUC,SAAU,kBAACC,EAAA,EAAD,KAChB,kBAACC,EAAAA,QAAD,QAEA,kBAAC,EAAAC,OAAD,KACI,kBAAC,EAAAC,MAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWZ,IACjC,kBAAC,EAAAS,MAAD,CAAOE,KAAME,EAAAA,GAAAA,EAAuBD,UAAWV,IAC/C,kBAAC,EAAAO,MAAD,KACI,kBAAC,EAAAK,SAAD,CAAUC,GAAIF,EAAAA,GAAAA,QAM9BV,EAAOa,UAAY,CACfC,WAAYC,IAAAA,MAAgB,CACxBC,QAASD,IAAAA,MAAgB,CACrBE,KAAMF,IAAAA,U,+CCfX,IAAMG,GAAoBC,EAAAA,EAAAA,iBAE3BC,EAAAA,SAAAA,G,waACF,aAAc,0BACV,gBACKC,MAAQ,CACTC,wBAAoBC,EACpBC,sBAAsB,GAJhB,E,4DAQUC,GACpBC,KAAKC,SAAS,CACVL,mBAAoBG,EACpBD,sBAAsB,M,oCAIhBI,EAAYC,GACtB,IAAIC,GAAgB,EAQpB,OANAD,EAAeE,SAAQ,SAACC,GAChBJ,IAAeI,IACfF,GAAgB,MAIjBA,I,0CAGU,YACjBG,EAAAA,EAAAA,IAAS,CACLC,cAAeC,EAAAA,GACfC,oBAAAA,EAAAA,GACAC,kBAAAA,EAAAA,GACAC,oBAAAA,EAAAA,KACJC,SAASC,OAAOC,OAChBF,SAASC,OAAOE,YAAY,OAC5BhB,KAAKiB,WAAaJ,SAASC,OAAOI,GAAG,kBAAkB,SAACC,GAChC,QAAhBA,EAAMC,MACN,EAAKC,MAAM/B,QAAQC,KAAnB,WAA4B+B,SAASC,QAArC,OAA8CD,SAASE,OAEvD,EAAKH,MAAM/B,QAAQC,KAAnB,WAA4B4B,EAAMC,OAAlC,OAA0CE,SAASC,QAAnD,OAA4DD,SAASE,UAG7E,cAAC,oGACgCX,SAASC,OAAOW,mBAAmB,OADnE,OACSC,EADT,OAEG,EAAKC,wBACDD,EAAeE,MAAK,gBAAG1B,EAAH,EAAGA,WAAH,OAAoB,EAAKE,cAAcF,EAAY,CAAC,UAAW,mBAH1F,0CAAD,K,6CAU+B,mBAApBF,KAAKiB,YACZjB,KAAKiB,e,+BAIH,MAGuBjB,KAAKL,MAD9BC,EAFE,EAEFA,mBAEJ,OAJM,EAGFE,qBAGM,kBAACN,EAAkBqC,SAAnB,CACEC,MAAQ,CACJxB,YAAa,CACTyB,YAAanC,KAGrB,kBAAC,KAAD,MACA,kBAACtB,EAAD,CAAQc,WAAaY,KAAKqB,SAE5B,S,EAzEZ3B,CAAYsC,EAAAA,WA8ElBtC,EAAIP,UAAY,CACZG,QAASD,IAAAA,QAQb,SAAe4C,EAAAA,EAAAA,aAAYC,EAAAA,EAAAA,UAAAA,CAAUxC,K,+CClGjCyC,E,+BAEG,SAASpB,IACZ,GAAIoB,EACA,MAAM,IAAIC,MAAM,6BAFa,2BAAZC,EAAY,yBAAZA,EAAY,gBAkBjC,OAbAF,EAAW,IAAIG,EAAAA,GAAgB,GAApB,CACPC,KADO,OAEJF,IAkBJ,SAAS9B,IAAmB,MAC/B,OAAO,EAAA4B,GAAS5B,SAAT","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/store/index.js"],"sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Suspense, lazy } from 'react';\nimport { routes as paths } from '../package.json';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst RosPage = lazy(() => import(/* webpackChunkName: \"RosPage\" */ './Routes/RosPage/RosPage'));\nconst RosSystemDetail = lazy(() => import(/* webpackChunkName: \"RosSystemDetail\" */ './Routes/RosSystemDetail/RosSystemDetail'));\n\nexport const Routes = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <Switch>\n            <Route exact path='/' component={RosPage} />\n            <Route path={paths.rosSystemDetail} component={RosSystemDetail} />\n            <Route>\n                <Redirect to={paths.rosPage} />\n            </Route>\n        </Switch>\n    </Suspense>\n);\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        history: PropTypes.shape({\n            push: PropTypes.func\n        })\n    })\n};\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { systemRecsReducer, systemDetailReducer, isConfiguredReducer } from './store/reducers';\nimport { register } from './store';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasReadPermissions: undefined,\n            arePermissionsLoaded: false\n        };\n    }\n\n    handlePermissionsUpdate(hasRead) {\n        this.setState({\n            hasReadPermissions: hasRead,\n            arePermissionsLoaded: true\n        });\n    }\n\n    hasPermission(permission, permissionList) {\n        let hasPermission = false;\n\n        permissionList.forEach((permissions) => {\n            if (permission === permissions) {\n                hasPermission = true;\n            }\n        });\n\n        return hasPermission;\n    };\n\n    componentDidMount () {\n        register({\n            notifications: notificationsReducer,\n            systemDetailReducer,\n            systemRecsReducer,\n            isConfiguredReducer });\n        insights.chrome.init();\n        insights.chrome.identifyApp('ros');\n        this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.navId === 'ros') {\n                this.props.history.push(`/${location.search}${location.hash}`);\n            } else {\n                this.props.history.push(`/${event.navId}${location.search}${location.hash}`);\n            }\n        });\n        (async () => {\n            const rosPermissions = await insights.chrome.getUserPermissions('ros');\n            this.handlePermissionsUpdate(\n                rosPermissions.some(({ permission }) => this.hasPermission(permission, ['ros:*:*', 'ros:*:read']))\n            );\n        })();\n\n    }\n\n    componentWillUnmount () {\n        if (typeof this.unregister === 'function') {\n            this.unregister();\n        }\n    }\n\n    render () {\n        const {\n            hasReadPermissions,\n            arePermissionsLoaded } = this.state;\n        return (\n            arePermissionsLoaded\n                ? <PermissionContext.Provider\n                    value={ {\n                        permissions: {\n                            systemsRead: hasReadPermissions\n                        }\n                    } }>\n                    <NotificationsPortal />\n                    <Routes childProps={ this.props } />\n                </PermissionContext.Provider>\n                : null\n        );\n    }\n}\n\nApp.propTypes = {\n    history: PropTypes.object\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter (connect()(App));\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    // registry.register({ rosSystemsTableState: rosSystemsTableRootReducer });\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n"],"names":["RosPage","lazy","RosSystemDetail","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","exact","path","component","paths","Redirect","to","propTypes","childProps","PropTypes","history","push","PermissionContext","createContext","App","state","hasReadPermissions","undefined","arePermissionsLoaded","hasRead","this","setState","permission","permissionList","hasPermission","forEach","permissions","register","notifications","notificationsReducer","systemDetailReducer","systemRecsReducer","isConfiguredReducer","insights","chrome","init","identifyApp","unregister","on","event","navId","props","location","search","hash","getUserPermissions","rosPermissions","handlePermissionsUpdate","some","Provider","value","systemsRead","Component","withRouter","connect","registry","Error","middleware","ReducerRegistry","promiseMiddleware"],"sourceRoot":""}