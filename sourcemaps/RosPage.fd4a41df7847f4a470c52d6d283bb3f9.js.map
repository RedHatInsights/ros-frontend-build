{"version":3,"file":"js/RosPage.xxxxxxxxxxxxxxxxxxxx.js","mappings":"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","sources":["webpack:///./src/Components/RosTable/ExpandedRow.js","webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/store/entitiesReducer.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Constants.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Routes/RosPage/useFeatureFlag.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React from 'react';\nimport propTypes from 'prop-types';\nimport {\n    DescriptionList,\n    DescriptionListTerm,\n    DescriptionListGroup,\n    DescriptionListDescription\n} from '@patternfly/react-core';\nimport { NO_DATA_VALUE } from '../../constants';\n\nexport const ExpandedRow = ({ inventoryId, cloudProvider, instanceType, idlingTime }) =>  {\n\n    const cloudProviderValue = cloudProvider === null ? NO_DATA_VALUE : cloudProvider;\n    const instanceTypeValue = instanceType === null ? NO_DATA_VALUE : instanceType;\n    const idlingTimeValue = idlingTime === null ? NO_DATA_VALUE : `${idlingTime}%`;\n\n    const inlineFieldsArray = [\n        { label: 'Provider', value: cloudProviderValue },\n        { label: 'Instance type', value: instanceTypeValue },\n        { label: 'Idling time', value: idlingTimeValue }\n    ];\n\n    return (\n        <DescriptionList className='expanded-row' isCompact isHorizontal>\n            <DescriptionListGroup id={inventoryId}>\n                {inlineFieldsArray.map((field, index) => (\n                    <React.Fragment key={index}>\n                        <DescriptionListTerm>{ field.label }</DescriptionListTerm>\n                        <DescriptionListDescription>{ field.value }</DescriptionListDescription>\n                    </React.Fragment>\n                ))}\n            </DescriptionListGroup>\n        </DescriptionList>\n    );\n};\n\nExpandedRow.propTypes = {\n    inventoryId: propTypes.string,\n    cloudProvider: propTypes.string,\n    instanceType: propTypes.string,\n    idlingTime: propTypes.string\n};\n","import React, { Suspense } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\nimport AsynComponent from '@redhat-cloud-services/frontend-components/AsyncComponent';\nimport ErrorState from '@redhat-cloud-services/frontend-components/ErrorState';\n\nexport const ServiceNotConfigured = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <AsynComponent\n            appId=\"ros_zero_state\"\n            appName=\"dashboard\"\n            module=\"./AppZeroState\"\n            scope=\"dashboard\"\n            ErrorComponent={<ErrorState />}\n            app=\"Resource_Optimization\"\n        />\n    </Suspense>\n);\n","import { ExpandedRow } from '../Components/RosTable/ExpandedRow';\nimport { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport React from 'react';\n\nconst addExpandedView = (rowData) => {\n    const {\n        id, cloud_provider: cloudProvider, instance_type: instanceType,\n        idling_time: idlingTime\n    } = rowData;\n    return (<ExpandedRow { ...{ id, cloudProvider, instanceType, idlingTime } } />);\n};\n\nfunction modifyInventory(columns, state) {\n\n    return {\n        ...state,\n        columns,\n        rows: state.rows.map((row) => ({\n            ...row,\n            children: addExpandedView(row)\n        })),\n        loaded: true\n    };\n}\n\nconst openExpandedView = (state, action) => {\n    return {\n        ...state,\n        rows: state.rows.map(row => ({\n            ...row,\n            isOpen: row.id === action.payload.id ? action.payload.isOpen : row.isOpen\n        }))\n    };\n};\n\nexport const entitiesReducer = ({ LOAD_ENTITIES_FULFILLED }, columns) => applyReducerHash({\n    [LOAD_ENTITIES_FULFILLED]: (state) =>  modifyInventory(columns, state),\n    ['EXPAND_ROW']: openExpandedView\n});\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","// Reports\n\nexport const SYSTEMS_PDF_REPORT_TITLE = 'Insights Resource Optimization Systems Report';\nexport const SYSTEMS_REPORT_FILE_NAME = 'resource_optimization--';\nexport const EXECUTIVE_REPORT_FILE_NAME = 'Resource-Optimization-Executive-Report--';\n\nexport const pdfRowKeys = ['display_name', 'groups', 'os', 'performance_utilization.cpu', 'performance_utilization.memory',\n    'performance_utilization.max_io', 'number_of_suggestions', 'state', 'report_date'];\n\nexport const reportRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'cloud_provider', 'instance_type', 'idling_time', 'report_date', 'groups'];\n\nexport const percentageKeys = ['performance_utilization.cpu', 'performance_utilization.memory', 'idling_time'];\n\nexport const PDF_RECORDS_PER_PAGE = {\n    firstPageCount: 16,\n    otherPageCount: 22\n\n};\n\nexport const REPORT_NOTIFICATIONS = {\n    start: {\n        variant: 'info',\n        title: 'Generating data. Download may take a moment to start.'\n    },\n    success: {\n        variant: 'success',\n        title: 'Export successful'\n    },\n    failure: {\n        variant: 'danger',\n        autoDismiss: false,\n        title: 'Export failed. Please try exporting again.'\n    }\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from './Constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type, isWorkSpaceEnabled = false) => {\n\n    const systemsRowsData = [];\n    let NoGroupValue = 'No group';\n\n    if (isWorkSpaceEnabled) {\n        NoGroupValue = 'No workspace';\n    }\n\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue;\n            if (rowKey === 'groups') {\n                rowValue =  get(systemItem, rowKey, []);\n                rowValue = rowValue.length === 0  ? NoGroupValue : rowValue[0].name;\n\n            } else {\n                rowValue =   get(systemItem, rowKey, '');\n                rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n                rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n                rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n            }\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data, isWorkSpaceEnabled) => {\n    const systemsRowsData = formatData(data, 'json', isWorkSpaceEnabled);\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data, isWorkSpaceEnabled) => {\n    const items =  formatData(data, 'json', isWorkSpaceEnabled);\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters, isWorkSpaceEnabled = false) => {\n    let filterText  = '';\n    const groupOrWorkspace = isWorkSpaceEnabled ? 'Groups:' : 'Workspaces:';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n    const hasgroupFilter = filters?.groupFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter || hasgroupFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasgroupFilter ? filterText.concat(`${groupOrWorkspace} ${filters.groupFilter.toString()}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\n","import { StyleSheet } from '@react-pdf/renderer';\nimport global_BorderColor_300 from '@patternfly/react-tokens/dist/js/global_BorderColor_300';  /* eslint-disable-line camelcase */\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingLeft: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 4\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingLeft: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occurrenceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 7,\n        color: '#6A6E73'\n    },\n    instanceTypeHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 20\n    },\n    instanceTypeHeadingFirst: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B'\n    },\n    instanceTypeDesc: {\n        fontSize: 10,\n        textAlign: 'left',\n        marginBottom: 4\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    tableRowBackground: {\n        backgroundColor: global_BorderColor_300.value  /* eslint-disable-line camelcase */\n    },\n    instanceTableHeading: {\n        fontSize: 10,\n        color: '#6A6E73',\n        paddingBottom: 4,\n        fontWeight: 'bold'\n    },\n    bold: {\n        fontFamily: 'Helvetica-Bold',\n        fontWeight: 700\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport 'fast-text-encoding';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'Group', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = (isWorkSpaceEnabled = false) => {\n    if (isWorkSpaceEnabled) {\n        headerContent.splice(1, 1, 'Workspace');\n    }\n\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page, isWorkSpaceEnabled = false }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader(isWorkSpaceEnabled);\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number,\n    isWorkSpaceEnabled: propTypes.bool\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText, isWorkSpaceEnabled }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} isWorkSpaceEnabled={isWorkSpaceEnabled} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string,\n    isWorkSpaceEnabled: propTypes.bool\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, isWorkSpaceEnabled, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            groupFilter: filters.groupFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf', isWorkSpaceEnabled);\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters, isWorkSpaceEnabled),\n            isWorkSpaceEnabled\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}\n                page={index + 1} isWorkSpaceEnabled={isWorkSpaceEnabled}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string,\n    isWorkSpaceEnabled: propTypes.bool\n\n};\n","import React, { Fragment, useState } from 'react';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport { EXECUTIVE_REPORT_FILE_NAME, REPORT_NOTIFICATIONS } from './Constants';\nimport { Button } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport = async () =>{\n        const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`;\n        const fileName = `${EXECUTIVE_REPORT_FILE_NAME}${currentDate}`;\n\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportBlob = await fetchExecutiveReport();\n            const url = window.URL.createObjectURL(executiveReportBlob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n            setLoading(false);\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <Button\n                variant=\"link\"\n                icon={<ExportIcon />}\n                iconPosition=\"left\"\n                onClick={() => generateExecutivePDFReport()}\n                isDisabled={loading || isDisabled}\n                className='downloadButtonOverride'>\n                {  loading\n                    ? 'Loading...'\n                    : 'Download executive report'\n                }\n            </Button>\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    PAGE,\n    PER_PAGE,\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM,\n    SERVICE_NAME\n} from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\nimport { useLocation } from 'react-router-dom';\nimport useFeatureFlag from './useFeatureFlag';\nimport { displayWorkspace } from '../../Components/RosTable/RenderColumn';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: PER_PAGE,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            groupFilterValue: [],\n            disableExport: true,\n            osFilterValue: [],\n            OSFObject: {}\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            groups: 'group_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome?.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n        this.processFilterValues();\n        if (this.props.isWorkSpaceEnabled) {\n            SYSTEM_TABLE_COLUMNS.splice(1, 1,  {\n                key: 'groups',\n                title: 'Workspace',\n                modalTitle: 'Workspace',\n                dataLabel: 'Workspace',\n                renderFunc: (data) => displayWorkspace(data),\n                isChecked: true,\n                isDisabled: false,\n                isShownByDefault: true,\n                props: { isStatic: true }\n            });\n        }\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    processFilterValues() {\n        let osObject = {};\n        osObject.label = 'Operating system';\n        osObject.type = conditionalFilterType.checkbox;\n        osObject.filterValues = {};\n\n        // API call to systems endpoint\n        this.fetchSystems({\n            perPage: -1,\n            orderBy: 'os',\n            orderHow: SortByDirection.desc\n        }).then((response) => {\n            osObject.filterValues.items = Array.from(new Set((response.data).reduce((filtered, system) => {\n                if (system.os) {\n                    filtered.push(system.os);\n                }\n\n                return filtered;\n            }, []))).map(os => {\n                return { label: os, value: os.split(' ')[1] };\n            });\n\n            if (osObject.filterValues.items.length === 0) {\n                osObject.filterValues.items = [{ label: 'No versions available' }];\n                osObject.type = conditionalFilterType.group;\n            }\n\n            this.setState({\n                OSFObject: osObject\n            });\n        });\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        let params = {\n            limit: fetchParams.perPage,\n            ...fetchParams?.page && {\n                offset: (fetchParams.page - 1) * fetchParams.perPage\n            },\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n            query.append('group_name', groupFilterValue);\n        });\n\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetFiltersList = deletedOSFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications(), this.props.isWorkSpaceEnabled);\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue, groupFilterValue,\n            orderBy, orderDirection, disableExport, isColumnModalOpen,\n            OSFObject } = this.state;\n\n        const customFilterConfig = {\n            items: [\n                {\n                    label: SFObject.label,\n                    type: SFObject.type,\n                    value: `checkbox-state`,\n                    filterValues: {\n                        items: SFObject.filterValues.items,\n                        onChange: (_e, values) => this.updateStateFilter(values),\n                        value: stateFilterValue\n                    }\n                },\n                {\n                    label: OSFObject.label,\n                    type: OSFObject.type,\n                    value: `checkbox-os`,\n                    filterValues: {\n                        items: OSFObject.filterValues?.items,\n                        onChange: (_e, values) => this.updateOSFilter(values),\n                        value: osFilterValue\n                    }\n                }\n            ]\n        };\n\n        return (\n            this.props.showConfigSteps\n                ? <ServiceNotConfigured />\n                : <React.Fragment>\n                    <PageHeader className='ros-page-header'>\n                        <PageHeaderTitle title='Resource Optimization'/>\n                        <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                    </PageHeader>\n\n                    <Main>\n                        <Card className='pf-t-light  pf-m-opaque-100'>\n                            <CardBody>\n                                <ManageColumnsModal\n                                    isModalOpen={isColumnModalOpen}\n                                    setModalOpen={this.setColumnModalOpen}\n                                    modalColumns={this.props.columns}\n                                    saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                                />\n                                <InventoryTable\n                                    disableDefaultColumns\n                                    ref={this.inventory}\n                                    hasCheckbox={ false }\n                                    tableProps={{\n                                        canSelectAll: false,\n                                        className: 'ros-systems-table'\n                                    }}\n                                    variant=\"compact\"\n                                    hideFilters={{ all: true, name: false, hostGroupFilter: false }}\n                                    autoRefresh= {true}\n                                    customFilters={{\n                                        stateFilter: stateFilterValue,\n                                        osFilter: osFilterValue\n                                    }}\n                                    columns={activeColumns}\n                                    getEntities={async (_items, config) => {\n                                        this.setState(() => ({\n                                            orderBy: config.orderBy,\n                                            orderDirection: config.orderDirection,\n                                            nameFilterValue: config.filters?.hostnameOrId,\n                                            groupFilterValue: config?.filters?.hostGroupFilter // the group filter is set by Inventory\n                                        }));\n                                        const results = await this.fetchSystems(\n                                            {\n                                                page: config.page, perPage: config.per_page,\n                                                orderBy: this.sortingHeader[config.orderBy],\n                                                orderHow: config.orderDirection,\n                                                filters: config.filters,\n                                                stateFilter: config.stateFilter,\n                                                osFilter: config.osFilter,\n                                                groupFilter: config?.filters?.hostGroupFilter // the group filter is set by Inventory\n                                            }\n                                        );\n\n                                        const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                        const invSystems = await this.fetchInventoryDetails(invIds, {\n                                            ...config,\n                                            orderBy: undefined,\n                                            orderDirection: undefined,\n                                            page: PAGE,\n                                            hasItems: true\n                                        });\n\n                                        const disableExport = results?.meta?.count === 0;\n                                        this.setState(() => ({\n                                            disableExport\n                                        }));\n\n                                        return {\n                                            results: results.data.map((system) => {\n                                                const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                                return ({\n                                                    ...invRec,\n                                                    ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                                    ...system\n                                                });\n                                            }),\n                                            total: results.meta.count,\n                                            page: config.page,\n                                            per_page: config.per_page /* eslint-disable-line camelcase */\n                                        };\n                                    }}\n                                    onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                        this.setState({\n                                            getEntities: api?.getEntities\n                                        });\n                                        register({\n                                            ...mergeWithEntities(\n                                                entitiesReducer(\n                                                    INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                                )\n                                            )\n                                        });\n                                        this.props.setSort(orderBy, orderDirection, 'CHANGE_SORT');\n                                    }}\n                                    expandable='true'\n                                    filterConfig={customFilterConfig}\n                                    activeFiltersConfig={{\n                                        filters: this.getActiveFilterConfig(),\n                                        onDelete: this.onDeleteFilters\n                                    }}\n                                    actionsConfig={{\n                                        actions: [\n                                            '',\n                                            {\n                                                label: 'Manage columns',\n                                                onClick: () => this.setColumnModalOpen(true)\n                                            }\n                                        ]\n                                    }}\n                                    exportConfig={{\n                                        isDisabled: disableExport,\n                                        extraItems: [\n                                            <li key='pdf-button-item' role='menuitem'>\n                                                <Button\n                                                    key='pdf-download-button'\n                                                    variant='none'\n                                                    className=\"pf-v5-c-dropdown pf-v5-c-dropdown__menu-item\"\n                                                    onClick={() => this.setExportSystemsPDF(true)}>\n                                                Export to PDF\n                                                </Button>\n                                            </li>\n                                        ],\n                                        ouiaId: 'export',\n                                        onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                                    }}\n                                    onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                                >\n                                </InventoryTable>\n                                {exportSystemsPDF &&\n                                <DownloadSystemsPDFReport\n                                    showButton={false}\n                                    onSuccess={() => this.setExportSystemsPDF(false)}\n                                    filters={{\n                                        stateFilter: stateFilterValue,\n                                        hostnameOrId: nameFilterValue,\n                                        osFilter: osFilterValue,\n                                        groupFilter: groupFilterValue\n                                    }}\n                                    orderBy={orderBy}\n                                    orderHow={orderDirection}\n                                    isWorkSpaceEnabled={this.props.isWorkSpaceEnabled}\n                                />\n                                }\n                            </CardBody>\n                        </Card>\n                    </Main>\n                </React.Fragment>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.hasRead === false\n                            ? <NotAuthorized serviceName={SERVICE_NAME} />\n                            : this.renderConfigStepsOrTable()\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    chrome: PropTypes.object,\n    isWorkSpaceEnabled: PropTypes.bool\n};\n\nconst RosPageWithChrome =  props => {\n    const chrome = useChrome();\n    const location = useLocation();\n    const isWorkSpaceEnabled = useFeatureFlag('platform.rbac.groups-to-workspaces-rename');\n\n    return (\n        <RosPage {...props} chrome={ chrome } isWorkSpaceEnabled={isWorkSpaceEnabled} location={ location }/>\n    );\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(RosPageWithChrome);\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification, isWorkSpaceEnabled) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data, isWorkSpaceEnabled)\n            : responseToCSVData(systemsResponse.data, isWorkSpaceEnabled);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import { useFlag, useFlagsStatus } from '@unleash/proxy-client-react';\n\nexport default (flag) => {\n    const { flagsReady } = useFlagsStatus();\n    const isFlagEnabled = useFlag(flag);\n    return flagsReady ? isFlagEnabled : false;\n};\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API, SUGGESTED_INSTANCE_TYPES_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        groups: 'group_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    fetchParams?.groupFilter?.forEach((groupFilterValue) => {\n        query.append('group_name', groupFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n\nexport const fetchSuggestedInstanceTypes = async (fetchParams) => {\n    const { page, perPage, activeSortColumnKey, activeSortDirection } = fetchParams || {};\n\n    let url = new URL(\n        ROS_API_ROOT + SUGGESTED_INSTANCE_TYPES_API,\n        window.location.origin\n    );\n\n    let params = {\n        page,\n        per_page: perPage, /* eslint-disable-line camelcase */\n        order_by: activeSortColumnKey, /* eslint-disable-line camelcase */\n        order_how: activeSortDirection, /* eslint-disable-line camelcase */\n        ...fetchParams?.instanceTypeName  && {\n            instance_type: fetchParams.instanceTypeName /* eslint-disable-line camelcase */\n        }\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n    return response;\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured, fetchSuggestedInstanceTypes } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n\nexport const loadSuggestedInstanceTypes = (params) =>({\n    type: 'LOAD_SUGGESTED_INSTANCE_TYPES',\n    payload: fetchSuggestedInstanceTypes(params)\n});\n"],"names":["ExpandedRow","inventoryId","cloudProvider","instanceType","idlingTime","inlineFieldsArray","label","value","DescriptionList","className","isCompact","isHorizontal","DescriptionListGroup","id","map","field","index","key","DescriptionListTerm","DescriptionListDescription","propTypes","ServiceNotConfigured","Suspense","fallback","Bullseye","Spinner","A","appId","appName","module","scope","ErrorComponent","app","addExpandedView","rowData","cloud_provider","instance_type","idling_time","openExpandedView","state","action","rows","row","isOpen","payload","entitiesReducer","LOAD_ENTITIES_FULFILLED","columns","children","loaded","modifyInventory","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","currentColumns","setCurrentColumns","useState","handleCancel","Modal","title","onClose","variant","description","TextContent","Text","component","TextVariants","p","Split","hasGutter","SplitItem","Button","isInline","onClick","column","isChecked","isShownByDefault","actions","DataList","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","isRequired","pdfRowKeys","reportRowKeys","percentageKeys","PDF_RECORDS_PER_PAGE","firstPageCount","otherPageCount","REPORT_NOTIFICATIONS","start","success","failure","autoDismiss","formatData","data","type","isWorkSpaceEnabled","systemsRowsData","NoGroupValue","rowKeys","systemItem","rowKey","rowValue","get","length","name","toString","includes","dateStringByType","Date","push","generateFilterText","filters","filterText","groupOrWorkspace","filterSeparatorOnLine","hasStateFilter","stateFilter","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","hasgroupFilter","groupFilter","concat","sort","getSystemsReportFileName","toISOString","replace","split","create","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingLeft","flex","headerCell","systemNameCell","paddingRight","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occurrenceHeading","execInfoText","instanceTypeHeading","instanceTypeHeadingFirst","instanceTypeDesc","flexRow","tableRowBackground","backgroundColor","global_BorderColor_300","instanceTableHeading","fontWeight","bold","fontFamily","columnBuilder","style","headerContent","SystemsTablePage","page","systemsHeader","splice","item","styleArr","styles","buildSystemsHeader","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useEffect","reportName","fileName","size","orientation","allPagesHaveTitle","asyncFunction","async","fetchSystemParams","systemsResponse","pdfData","firstPageProps","meta","count","otherPages","systemsPage","generateSystemsPDFReport","DownloadExecutivePDFReport","loading","setLoading","icon","iconPosition","executiveReportBlob","url","window","URL","createObjectURL","a","document","createElement","href","download","body","appendChild","click","remove","error","generateExecutivePDFReport","RosPage","constructor","super","this","perPage","orderDirection","desc","stateFilterValue","isColumnModalOpen","exportSystemsPDF","nameFilterValue","groupFilterValue","disableExport","osFilterValue","OSFObject","sortingHeader","display_name","groups","os","number_of_suggestions","report_date","chunkSize","inventory","fetchSystems","bind","componentDidMount","chrome","hideGlobalFilter","appAction","isROSConfigured","processQueryParams","processFilterValues","dataLabel","renderFunc","isStatic","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","setState","osObject","checkbox","filterValues","then","response","items","Array","from","Set","reduce","filtered","system","group","clearStateQueryParams","delete","history","replaceState","origin","pathname","hash","fetchParams","params","limit","offset","order_by","order_how","query","forEach","append","fetch","res","ok","Error","statusText","json","chunkIdsArray","ids","idsChunks","fetchInventoryDetails","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","records","getEntities","idsInBatches","Promise","all","updateStateFilter","updateOSFilter","onDeleteFilters","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","resetFiltersList","chips","chip","activeStateFilters","filterName","activeOSFilters","getActiveFilterConfig","activeFilters","setColumnModalOpen","modalState","getActiveColumns","setExportSystemsPDF","onExportOptionSelect","fileType","addNotification","clearNotifications","format","showNotification","clearNotification","JSON","stringify","responseToJSONData","header","Object","keys","join","fieldName","responseToCSVData","downloadFile","downloadReport","notification","renderConfigStepsOrTable","SFObject","activeColumns","customFilterConfig","_e","values","showConfigSteps","PageHeader","PageHeaderTitle","Main","Card","CardBody","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","hostGroupFilter","autoRefresh","customFilters","_items","config","inventory_id","invSystems","undefined","hasItems","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","setSort","expandable","filterConfig","activeFiltersConfig","onDelete","actionsConfig","exportConfig","extraItems","role","ouiaId","onSelect","_event","onExpandClick","_i","expandRow","showButton","onSuccess","render","Consumer","permissions","hasRead","NotAuthorized","serviceName","isConfiguredReducer","systemColumnsReducer","actionType","orderByKey","orderByDirection","direction","useChrome","useLocation","flag","flagsReady","useFlagsStatus","isFlagEnabled","useFlag","useFeatureFlag","handleErrors","result","fetchSystemDetail","fetchSystemRecommendations","options","trim","resp","status","hasError","fetchSystemHistory","fetchExecutiveReport","method","headers","service","template","blob","fetchSuggestedInstanceTypes","activeSortColumnKey","activeSortDirection","instanceTypeName","loadSystemInfo","loadSysRecs","loadIsConfiguredInfo","loadSuggestedInstanceTypes"],"sourceRoot":""}