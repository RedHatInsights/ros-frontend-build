{"version":3,"file":"js/208.c21eece83836c40cf3c5.js","mappings":"gYAKaA,EAAoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAQC,EAAX,EAAWA,MAAOC,EAAlB,EAAkBA,MAAOC,EAAzB,EAAyBA,KAAMC,EAA/B,EAA+BA,QAASC,EAAxC,EAAwCA,KAAMC,EAA9C,EAA8CA,MAA9C,OAC7B,kBAACC,EAAA,GAAD,CAAYC,QAAUJ,EAAUK,EAAAA,GAAAA,MAA0BA,EAAAA,GAAAA,OACpDN,GAAQ,kBAACO,EAAA,EAAD,CACNP,KAAOA,EACPF,MAAQA,GAAgB,KACxBU,UAAYP,EAAU,yBAA2B,OAErD,kBAACQ,EAAA,GAAD,CACIC,aAAeT,EAAU,KAAO,KAChCU,KAAOV,EAAU,KAAO,MAEtBE,GAEN,kBAACS,EAAA,EAAD,KACMV,MAAAA,OADN,EACMA,EAAMW,KAAK,MACXd,GAEJF,IAIVD,EAAkBkB,UAAY,CAC1BjB,OAAQkB,IAAAA,OACRjB,MAAOiB,IAAAA,OACPhB,MAAOgB,IAAAA,OACPf,KAAMe,IAAAA,IACNd,QAASc,IAAAA,KACTb,KAAMa,IAAAA,MACNZ,MAAOY,IAAAA,Q,qCCvBX,IAAMC,EAAqB,SAACC,GACxB,OACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,GAAD,CAAMC,UAAWC,EAAAA,GAAAA,EAAgBb,UAAU,eACvC,kBAACW,EAAA,GAAD,KAAM,oDACLF,EAAIK,QAET,kBAACH,EAAA,GAAD,CAAMC,UAAWC,EAAAA,GAAAA,EAAgBb,UAAU,WACvC,kBAACW,EAAA,GAAD,KAAM,+CACLF,EAAIM,cAMfC,EAAAA,SAAAA,G,waACF,WAAYC,GAAO,0BACf,cAAMA,IACDC,MAAQ,CACTC,QAAS,CAAC,CAAExB,MAAO,OAAQyB,eAAgB,CAACC,EAAAA,cAC5CC,KAAM,EAAKC,cAEf,EAAKC,WAAa,EAAKA,WAAWC,KAAhB,QANH,E,+CASRC,EAAOC,EAAQC,GAAQ,IACtBN,EAASO,KAAKX,MAAdI,KAKRA,EAAKK,GAAQC,OAASA,EACtBC,KAAKC,SAAS,CACVR,KAAAA,M,mCAKJ,IAAMS,EAAWF,KAAKZ,MAAMe,gBAC5B,OAAID,GAAgC,IAApBA,EAASE,OACd,IAAQF,GAAU,SAACtB,EAAKyB,GAC3B,MAAO,CACH,CACIC,GAAID,EACJN,OAAkB,IAAVM,EACRE,MAAO,CAAC,CAAEzC,MAAOc,EAAI4B,eAEzB,CACID,MAAO,CAAC,CAAEzC,MAAOa,EAAmBC,KACpC6B,OAAgB,EAARJ,OAKb,CACH,CACIK,YAAY,EACZH,MAAO,CACH,CACInB,MAAO,CAAEuB,QAAS,GAClB7C,MAAO,kBAAC8C,EAAA,EAAD,CAAYzC,UAAU,oBACzB,kBAACZ,EAAD,CAAmBO,MAAM,iBACrBD,KAAM,CACF,wDAEJF,KAAMkD,EAAAA,Y,+BAS7B,MACqBb,KAAKX,MAAvBC,EADH,EACGA,QAASG,EADZ,EACYA,KACjB,OACI,kBAAC,EAAAqB,MAAD,CAAO,aAAW,mBAAmBnB,WAAYK,KAAKL,WAClD3B,QAAQ,UACRyB,KAAMA,EAAMc,MAAOjB,EAASnB,UAAU,6BACtC,kBAAC,EAAA4C,YAAD,MACA,kBAAC,EAAAC,UAAD,W,EAlEV7B,CAA6B8B,IAAAA,WAyEnC9B,EAAqBV,UAAY,CAC7B0B,gBAAiB1B,IAAAA,OAGrB","sources":["webpack:///./src/Components/EmptyStateDisplay/EmptyStateDisplay.js","webpack:///./src/Components/SystemDetail/RecommendationsTable.js"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, Title } from '@patternfly/react-core';\n\nexport const EmptyStateDisplay = ({ button, color, error, icon, isSmall, text, title }) => (\n    <EmptyState variant={ isSmall ? EmptyStateVariant.small : EmptyStateVariant.large }>\n        { icon && <EmptyStateIcon\n            icon={ icon }\n            color={ color ? color : null }\n            className={ isSmall ? 'small-empty-state-icon' : null }\n        /> }\n        <Title\n            headingLevel={ isSmall ? 'h5' : 'h1' }\n            size={ isSmall ? 'md' : 'lg' }\n        >\n            { title }\n        </Title>\n        <EmptyStateBody>\n            { text?.join('\\n') }\n            { error }\n        </EmptyStateBody>\n        { button }\n    </EmptyState>\n);\n\nEmptyStateDisplay.propTypes = {\n    button: PropTypes.object,\n    color: PropTypes.string,\n    error: PropTypes.string,\n    icon: PropTypes.any,\n    isSmall: PropTypes.bool,\n    text: PropTypes.array,\n    title: PropTypes.string\n};\n","import React from 'react';\nimport { Table, TableHeader, TableBody, expandable } from '@patternfly/react-table';\nimport propTypes from 'prop-types';\nimport { flatMap } from 'lodash';\nimport { EmptyTable } from '@redhat-cloud-services/frontend-components/EmptyTable';\nimport { EmptyStateDisplay } from '../EmptyStateDisplay/EmptyStateDisplay';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { TextContent, Text, TextVariants } from '@patternfly/react-core';\nimport './RecommendationsTable.scss';\n\nconst renderExpandedView = (row) => {\n    return (\n        <TextContent>\n            <Text component={TextVariants.p} className=\"newline tab\">\n                <Text><strong>Detected issues</strong></Text>\n                {row.reason}\n            </Text>\n            <Text component={TextVariants.p} className=\"newline\">\n                <Text><strong>Suggestion</strong></Text>\n                {row.resolution}\n            </Text>\n        </TextContent>\n    );\n};\n\nclass RecommendationsTable extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            columns: [{ title: 'Name', cellFormatters: [expandable] }],\n            rows: this.createRows()\n        };\n        this.onCollapse = this.onCollapse.bind(this);\n    }\n\n    onCollapse(event, rowKey, isOpen) {\n        const { rows } = this.state;\n        /**\n         * Please do not use rowKey as row index for more complex tables.\n         * Rather use some kind of identifier like ID passed with each row.\n         */\n        rows[rowKey].isOpen = isOpen;\n        this.setState({\n            rows\n        });\n    }\n\n    createRows() {\n        const rowsData = this.props.recommendations;\n        if (rowsData && rowsData.length !== 0) {\n            return flatMap(rowsData, (row, index) => {\n                return [\n                    {\n                        id: index,\n                        isOpen: index === 0 ? true : false,\n                        cells: [{ title: row.description }]\n                    },\n                    {\n                        cells: [{ title: renderExpandedView(row) }],\n                        parent: index * 2\n                    }\n                ];\n            });\n        } else {\n            return [\n                {\n                    heightAuto: true,\n                    cells: [\n                        {\n                            props: { colSpan: 7 },\n                            title: <EmptyTable className='recs-table-empty'>\n                                <EmptyStateDisplay title=\"No suggestions\"\n                                    text={[\n                                        'This system isn\\'t affected by any known suggestions.'\n                                    ]}\n                                    icon={CheckCircleIcon}/>\n                            </EmptyTable>\n                        }\n                    ]\n                }\n            ];\n        }\n    }\n\n    render() {\n        const { columns, rows } = this.state;\n        return (\n            <Table aria-label=\"Expandable table\" onCollapse={this.onCollapse}\n                variant='compact'\n                rows={rows} cells={columns} className=\"ros-recommendations-table\">\n                <TableHeader />\n                <TableBody />\n            </Table>\n        );\n\n    }\n}\n\nRecommendationsTable.propTypes = {\n    recommendations: propTypes.array\n};\n\nexport default RecommendationsTable;\n"],"names":["EmptyStateDisplay","button","color","error","icon","isSmall","text","title","EmptyState","variant","EmptyStateVariant","EmptyStateIcon","className","Title","headingLevel","size","EmptyStateBody","join","propTypes","PropTypes","renderExpandedView","row","TextContent","Text","component","TextVariants","reason","resolution","RecommendationsTable","props","state","columns","cellFormatters","expandable","rows","createRows","onCollapse","bind","event","rowKey","isOpen","this","setState","rowsData","recommendations","length","index","id","cells","description","parent","heightAuto","colSpan","EmptyTable","CheckCircleIcon","Table","TableHeader","TableBody","React"],"sourceRoot":""}