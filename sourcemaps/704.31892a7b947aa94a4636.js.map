{"version":3,"sources":["webpack:///./src/constants.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"names":["ROS_API_ROOT","IS_CONFIGURED_API","SYSTEMS_API_ROOT","RECOMMENDATION_RATING_API","NEGATIVE_FEEDBACK","NEUTRAL_FEEDBACK","POSITIVE_FEEDBACK","handleErrors","response","ok","Error","statusText","fetchSystemDetail","inventoryId","url","URL","window","location","origin","insights","chrome","auth","getUser","then","fetch","res","json","result","fetchSystemRecommendations","options","params","limit","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","loadSystemInfo","type","payload","loadSysRecs","loadIsConfiguredInfo"],"mappings":"oLAAO,IAAMA,EAAe,cACfC,EAAoB,iBACpBC,EAAmB,WACnBC,EAA4B,UAC5BC,GAAqB,EACrBC,EAAmB,EACnBC,EAAoB,G,qqBCJ1B,SAASC,EAAaC,GACzB,IAAKA,EAASC,GACV,MAAMC,MAAMF,EAASG,YAGzB,OAAOH,EAGJ,IAeMI,EAAoB,SAAAC,GAC7B,IAAIC,EAAM,IAAIC,IACVf,KAAeE,KAAf,WAAsCW,GACtCG,OAAOC,SAASC,QASpB,OAPeF,OAAOG,SAASC,OAAOC,KACrCC,UACAC,MAAK,kBACFC,MAAMV,GAAKS,KAAKhB,GACfgB,MAAK,SAAAE,GAAG,OAAKA,EAAIC,UAAQH,MAAK,SAAAI,GAAM,OAAIA,SAMpCC,EAA6B,SAACf,GAA8B,IAAjBgB,EAAiB,uDAAP,GAC1DC,EAAS,CACTC,MAAOF,EAAQG,QACfC,QAASJ,EAAQK,KAAO,GAAKL,EAAQG,SAErCH,EAAQM,aAAeN,EAAQM,YAAYC,SAC3CN,EAAS,EAAH,KAAQA,GAAR,IAAgBK,YAAaN,EAAQM,eAG/C,IAAIrB,EAAM,IAAIC,IACVf,KAAeE,KAAf,WAAsCW,EAAtC,oBACAG,OAAOC,SAASC,QAEpBJ,EAAIuB,OAAS,IAAIC,gBAAgBR,GAAQS,WACzC,IAAI/B,EAAWQ,OAAOG,SAASC,OAAOC,KACrCC,UACAC,MAAK,kBACFC,MAAMV,GAAKS,MAAK,SAACiB,GACb,IAAKA,EAAK/B,IAAsB,MAAhB+B,EAAKC,OACjB,MAAO,CAAEC,UAAU,GAChB,IAAKF,EAAK/B,GACb,MAAMC,MAAM8B,EAAK7B,YAGrB,OAAO6B,EAAKd,UAEfH,MAAK,SAAAI,GAAM,OAAIA,QAGpB,OAAOnB,GCnEEmC,EAAiB,SAAA9B,GAAW,MAAK,CAC1C+B,KAAM,uBACNC,QAASjC,EAAkBC,KAGlBiC,EAAc,SAACjC,EAAaiB,GAAd,MAA0B,CACjDc,KAAM,oCACNC,QAASjB,EAA2Bf,EAAaiB,KAGxCiB,EAAuB,iBAAO,CACvCH,KAAM,0BACNC,SDHI/B,EAAM,IAAIC,IACVf,KAAeC,KACfe,OAAOC,SAASC,QAELF,OAAOG,SAASC,OAAOC,KACrCC,UACAC,MAAK,kBACFC,MAAMV,GAAKS,KAAKhB,GACfgB,MAAK,SAAAE,GAAG,OAAKA,EAAIC,UAAQH,MAAK,SAAAI,GAAM,OAAIA,UATlB,IACvBb","file":"js/704.18304af30ddaa44c272d.js","sourcesContent":["export const ROS_API_ROOT = '/api/ros/v0';\nexport const IS_CONFIGURED_API = '/is_configured';\nexport const SYSTEMS_API_ROOT = '/systems';\nexport const RECOMMENDATION_RATING_API = '/rating';\nexport const NEGATIVE_FEEDBACK = -1;\nexport const NEUTRAL_FEEDBACK = 0;\nexport const POSITIVE_FEEDBACK = 1;\n","import { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/recommendations`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n"],"sourceRoot":""}