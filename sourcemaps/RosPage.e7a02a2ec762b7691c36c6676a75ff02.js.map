{"version":3,"file":"js/RosPage.1681209595799.7b076efe7877851c25b9.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Constants.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","// Reports\n\nexport const SYSTEMS_PDF_REPORT_TITLE = 'Insights Resource Optimization Systems Report';\nexport const SYSTEMS_REPORT_FILE_NAME = 'resource_optimization--';\nexport const EXECUTIVE_REPORT_FILE_NAME = 'Resource-Optimization-Executive-Report--';\n\nexport const pdfRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'report_date'];\n\nexport const reportRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'cloud_provider', 'instance_type', 'idling_time', 'report_date'];\n\nexport const percentageKeys = ['performance_utilization.cpu', 'performance_utilization.memory', 'idling_time'];\n\nexport const PDF_RECORDS_PER_PAGE = {\n    firstPageCount: 16,\n    otherPageCount: 22\n\n};\n\nexport const REPORT_NOTIFICATIONS = {\n    start: {\n        variant: 'info',\n        title: 'Generating data. Download may take a moment to start.'\n    },\n    success: {\n        variant: 'success',\n        title: 'Export successful'\n    },\n    failure: {\n        variant: 'danger',\n        autoDismiss: false,\n        title: 'Export failed. Please try exporting again.'\n    }\n};\n\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from './Constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue =  get(systemItem, rowKey, '');\n            rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n            rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n            rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\n","import { StyleSheet } from '@react-pdf/renderer';\nimport global_BorderColor_300 from '@patternfly/react-tokens/dist/js/global_BorderColor_300';  /* eslint-disable-line camelcase */\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occurrenceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 7,\n        color: '#6A6E73'\n    },\n    instanceTypeHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 20\n    },\n    instanceTypeHeadingFirst: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B'\n    },\n    instanceTypeDesc: {\n        fontSize: 10,\n        textAlign: 'left',\n        marginBottom: 4\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    tableRowBackground: {\n        backgroundColor: global_BorderColor_300.value  /* eslint-disable-line camelcase */\n    },\n    instanceTableHeading: {\n        fontSize: 10,\n        color: '#6A6E73',\n        paddingBottom: 4,\n        fontWeight: 'bold'\n    },\n    bold: {\n        fontFamily: 'Helvetica-Bold',\n        fontWeight: 700\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf');\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters)\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import React, { Fragment, useState } from 'react';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport propTypes from 'prop-types';\nimport { EXECUTIVE_REPORT_FILE_NAME, REPORT_NOTIFICATIONS } from './Constants';\nimport { Button } from '@patternfly/react-core';\nimport { ExportIcon } from '@patternfly/react-icons';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport = async () =>{\n        const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`;\n        const fileName = `${EXECUTIVE_REPORT_FILE_NAME}${currentDate}`;\n\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportBlob = await fetchExecutiveReport();\n            const url = window.URL.createObjectURL(executiveReportBlob);\n            const a = document.createElement('a');\n            a.href = url;\n            a.download = fileName;\n            document.body.appendChild(a);\n            a.click();\n            a.remove();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n            setLoading(false);\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <Button\n                variant=\"link\"\n                icon={<ExportIcon />}\n                iconPosition=\"left\"\n                onClick={() => generateExecutivePDFReport()}\n                isDisabled={loading || isDisabled}\n                className='downloadButtonOverride'>\n                {  loading\n                    ? 'Loading...'\n                    : 'Download executive report'\n                }\n            </Button>\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\nimport { useChrome } from '@redhat-cloud-services/frontend-components/useChrome';\nimport { conditionalFilterType } from '@redhat-cloud-services/frontend-components';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true,\n            osFilterValue: [],\n            OSFObject: {}\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization | Red Hat Insights';\n        const chrome = this.props.chrome;\n        chrome?.hideGlobalFilter?.(true);\n        chrome?.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n        this.processOsVersion();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    processOsVersion() {\n        let osObject = {};\n        osObject.label = 'Operating system';\n        osObject.type = conditionalFilterType.checkbox;\n        osObject.filterValues = {};\n        this.fetchSystems({\n            perPage: -1,\n            orderBy: 'os',\n            orderHow: SortByDirection.desc\n        }).then((response) => {\n            osObject.filterValues.items = Array.from(new Set((response.data).reduce((filtered, system) => {\n                if (system.os) {\n                    filtered.push(system.os);\n                }\n\n                return filtered;\n            }, []))).map(os => {\n                return { label: os, value: os.split(' ')[1] };\n            });\n\n            if (osObject.filterValues.items.length === 0) {\n                osObject.filterValues.items = [{ label: 'No versions available' }];\n                osObject.type = conditionalFilterType.group;\n            }\n\n            this.setState({\n                OSFObject: osObject\n            });\n        });\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        let params = {\n            limit: fetchParams.perPage,\n            ...fetchParams?.page && {\n                offset: (fetchParams.page - 1) * fetchParams.perPage\n            },\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetFiltersList = deletedOSFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications());\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue,\n            orderBy, orderDirection, disableExport, isColumnModalOpen, OSFObject } = this.state;\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: stateFilterValue,\n                                osFilter: osFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection,\n                                    nameFilterValue: config.filters?.hostnameOrId\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter,\n                                        osFilter: config.osFilter\n                                    }\n                                );\n\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    orderBy: undefined,\n                                    orderDirection: undefined,\n                                    page: 1,\n                                    hasItems: true\n                                });\n\n                                const disableExport = results?.meta?.count === 0;\n                                this.setState(() => ({\n                                    disableExport\n                                }));\n\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(orderBy, orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: stateFilterValue\n                                        }\n                                    },\n                                    {\n                                        label: OSFObject.label,\n                                        type: OSFObject.type,\n                                        value: `checkbox-os`,\n                                        filterValues: {\n                                            items: OSFObject.filterValues?.items,\n                                            onChange: (_e, values) => this.updateOSFilter(values),\n                                            value: osFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            exportConfig={{\n                                isDisabled: disableExport,\n                                extraItems: [\n                                    <li key='pdf-button-item' role='menuitem'>\n                                        <Button\n                                            key='pdf-download-button'\n                                            variant='none'\n                                            className=\"pf-c-dropdown__menu-item\"\n                                            onClick={() => this.setExportSystemsPDF(true)}>\n                                            Export to PDF\n                                        </Button>\n                                    </li>\n                                ],\n                                ouiaId: 'export',\n                                onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                        {exportSystemsPDF &&\n                            <DownloadSystemsPDFReport\n                                showButton={false}\n                                onSuccess={() => this.setExportSystemsPDF(false)}\n                                filters={{\n                                    stateFilter: stateFilterValue,\n                                    hostnameOrId: nameFilterValue,\n                                    osFilter: osFilterValue\n                                }}\n                                orderBy={orderBy}\n                                orderHow={orderDirection}\n                            />\n                        }\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader className='ros-page-header'>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                    <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                : this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func,\n    chrome: PropTypes.object\n};\n\nconst RosPageWithChrome =  props => {\n    const chrome = useChrome();\n\n    return (\n        <RosPage {...props} chrome={ chrome } />\n    );\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPageWithChrome));\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, CRC_PDF_GENERATE_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = fetch(url).then((resp) => {\n        if (!resp.ok && resp.status === 404) {\n            return { hasError: true };\n        } else if (!resp.ok) {\n            throw Error(resp.statusText);\n        }\n\n        return resp.json();\n    })\n    .then(result => result);\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = fetch(url).then(handleErrors)\n    .then(res =>  res.json()).then(result => result);\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    const url = new URL(CRC_PDF_GENERATE_API,  window.location.origin);\n\n    return fetch(url, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n\n        body: JSON.stringify({\n            service: 'ros',\n            template: 'executiveReport'\n        })\n    })\n    .then(handleErrors)\n    .then((response) => response.blob());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","Bullseye","EmptyState","className","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","Stack","hasGutter","StackItem","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","pdfRowKeys","reportRowKeys","percentageKeys","REPORT_NOTIFICATIONS","autoDismiss","formatData","data","type","systemsRowsData","rowKeys","systemItem","rowData","rowKey","rowValue","toString","includes","dateStringByType","Date","push","responseToJSONData","JSON","stringify","responseToCSVData","items","header","Object","keys","join","row","fieldName","generateFilterText","filters","filterText","filterSeparatorOnLine","hasStateFilter","stateFilter","length","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","concat","sort","getSystemsReportFileName","currentDate","toISOString","replace","split","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occurrenceHeading","execInfoText","instanceTypeHeading","instanceTypeHeadingFirst","instanceTypeDesc","flexRow","tableRowBackground","backgroundColor","global_BorderColor_300","instanceTableHeading","fontWeight","bold","fontFamily","columnBuilder","value","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useDispatch","start","success","failure","useEffect","addNotification","generateSystemsPDFReport","firstPageCount","otherPageCount","fetchSystemParams","fetchSystems","systemsResponse","clearNotifications","pdfData","firstPageProps","splice","meta","count","otherPages","systemsPage","reportName","fileName","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","showNotification","clearNotification","downloadFile","DownloadExecutivePDFReport","loading","setLoading","generateExecutivePDFReport","a","fetchExecutiveReport","executiveReportBlob","url","window","URL","createObjectURL","document","createElement","download","body","appendChild","click","remove","iconPosition","RosPage","setState","stateFilterValue","osFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","clearStateQueryParams","resetFiltersList","chips","chip","name","activeStateFilters","state","filterName","activeOSFilters","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","OSFObject","sortingHeader","display_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","chrome","this","hideGlobalFilter","appAction","isROSConfigured","processQueryParams","processOsVersion","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","osObject","conditionalFilterType","filterValues","then","response","Array","from","Set","reduce","filtered","system","label","history","replaceState","origin","pathname","hash","fetchParams","params","limit","offset","order_by","order_how","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","fetch","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","records","getEntities","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","notification","SFObject","CUSTOM_FILTERS","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","undefined","hasItems","invSystems","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","_e","values","updateStateFilter","updateOSFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","role","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","useChrome","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","fetchSystemHistory","CRC_PDF_GENERATE_API","method","headers","service","template","blob","loadSystemInfo","loadSysRecs"],"sourceRoot":""}