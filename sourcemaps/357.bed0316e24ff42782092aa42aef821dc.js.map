{"version":3,"file":"js/357.1645023360469.e42aee4f0cd8d6d27da2.js","mappings":"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","sources":["webpack:///./src/Routes.js","webpack:///./src/App.js","webpack:///./src/AppEntry.js","webpack:///./src/bootstrap.js","webpack:///./src/store/index.js","webpack:///./src/store/systemDetail.js","webpack:///./src/store/systemRecs.js","webpack:///./src/store/isConfigured.js","webpack:///./node_modules/react-redux/es/hooks/useSelector.js"],"sourcesContent":["import { Redirect, Route, Switch } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport React, { Suspense, lazy } from 'react';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n\nconst RosPage = lazy(() => import(/* webpackChunkName: \"RosPage\" */ './Routes/RosPage/RosPage'));\nconst RosSystemDetail = lazy(() => import(/* webpackChunkName: \"RosSystemDetail\" */ './Routes/RosSystemDetail/RosSystemDetail'));\n\nexport const Routes = () => (\n    <Suspense fallback={<Bullseye>\n        <Spinner />\n    </Bullseye>}>\n        <Switch>\n            <Route exact path='/' component={RosPage} />\n            <Route path='/:inventoryId' component={RosSystemDetail} />\n            <Route>\n                <Redirect to='/ros' />\n            </Route>\n        </Switch>\n    </Suspense>\n);\n\nRoutes.propTypes = {\n    childProps: PropTypes.shape({\n        history: PropTypes.shape({\n            push: PropTypes.func\n        })\n    })\n};\n","import PropTypes from 'prop-types';\nimport React, { createContext, Component } from 'react';\nimport { withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Routes } from './Routes';\nimport './App.scss';\nimport NotificationsPortal from '@redhat-cloud-services/frontend-components-notifications/NotificationPortal';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { systemRecsReducer, systemDetailReducer, isConfiguredReducer } from './store/reducers';\nimport { register } from './store';\n\nexport const PermissionContext = createContext();\n\nclass App extends Component {\n    constructor() {\n        super();\n        this.state = {\n            hasReadPermissions: undefined,\n            arePermissionsLoaded: false\n        };\n    }\n\n    handlePermissionsUpdate(hasRead) {\n        this.setState({\n            hasReadPermissions: hasRead,\n            arePermissionsLoaded: true\n        });\n    }\n\n    hasPermission(permission, permissionList) {\n        let hasPermission = false;\n\n        permissionList.forEach((permissions) => {\n            if (permission === permissions) {\n                hasPermission = true;\n            }\n        });\n\n        return hasPermission;\n    };\n\n    componentDidMount () {\n        register({\n            notifications: notificationsReducer,\n            systemDetailReducer,\n            systemRecsReducer,\n            isConfiguredReducer });\n        insights.chrome.init();\n        insights.chrome.identifyApp('ros');\n        this.unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n            if (event.navId === 'ros') {\n                this.props.history.push(`/${location.search}${location.hash}`);\n            } else {\n                this.props.history.push(`/${event.navId}${location.search}${location.hash}`);\n            }\n        });\n        (async () => {\n            const rosPermissions = await insights.chrome.getUserPermissions('ros');\n            this.handlePermissionsUpdate(\n                rosPermissions.some(({ permission }) => this.hasPermission(permission, ['ros:*:*', 'ros:*:read']))\n            );\n        })();\n\n    }\n\n    componentWillUnmount () {\n        if (typeof this.unregister === 'function') {\n            this.unregister();\n        }\n    }\n\n    render () {\n        const {\n            hasReadPermissions,\n            arePermissionsLoaded } = this.state;\n        return (\n            arePermissionsLoaded\n                ? <PermissionContext.Provider\n                    value={ {\n                        permissions: {\n                            systemsRead: hasReadPermissions\n                        }\n                    } }>\n                    <NotificationsPortal />\n                    <Routes childProps={ this.props } />\n                </PermissionContext.Provider>\n                : null\n        );\n    }\n}\n\nApp.propTypes = {\n    history: PropTypes.object\n};\n\n/**\n * withRouter: https://reacttraining.com/react-router/web/api/withRouter\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default withRouter (connect()(App));\n","import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from './store';\nimport App from './App';\nimport { getBaseName } from '@redhat-cloud-services/frontend-components-utilities/helpers';\nimport logger from 'redux-logger';\n\nconst RosApp = () => (\n    <Provider store={ process.env.NODE_ENV !== 'production' ? init(logger).getStore() : init().getStore() }>\n        <Router basename={ getBaseName(window.location.pathname, 2) }>\n            <App />\n        </Router>\n    </Provider>\n);\n\nexport default RosApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport RosApp from './AppEntry';\n\nReactDOM.render(\n    <RosApp />,\n    document.getElementById('root')\n);\n","import { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/Registry';\nimport promiseMiddleware from 'redux-promise-middleware';\nlet registry;\n\nexport function init (...middleware) {\n    registry = getRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst initialState = {};\n\nexport default applyReducerHash({\n    LOAD_ROS_SYSTEM_INFO_PENDING: (state) => ({ ...state, systemInfo: {}, loading: true }),\n    LOAD_ROS_SYSTEM_INFO_FULFILLED: (state, { payload }) => {\n        return {\n            ...state,\n            loading: false,\n            systemInfo: payload\n        };\n    }\n}, initialState);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst initialState = {\n    loading: false,\n    recommendationsData: [],\n    systemRecError: {},\n    totalRecommendations: 0,\n    emptyState: false\n};\n\nexport default applyReducerHash({\n    FETCH_SYSTEM_RECOMMENDATIONS_LIST_PENDING: (state) => ({ ...state, loading: true }),\n    FETCH_SYSTEM_RECOMMENDATIONS_LIST_FULFILLED: (state, action) => {\n        if (action.payload.hasError) {\n            return { ...state, loading: false, emptyState: true };\n        } else {\n            return {\n                ...state,\n                loading: false,\n                recommendationsData: action.payload.data,\n                totalRecommendations: action.payload.meta.count\n            };\n        }\n    },\n    FETCH_SYSTEM_RECOMMENDATIONS_LIST_REJECTED: (state, action) => ({\n        ...state, loading: false,  emptyState: true, systemRecError: action.payload\n    })\n}, initialState);\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\n\nconst initialState = {\n    loaded: false,\n    serverError: {},\n    serverCode: '',\n    showConfigSteps: false\n};\n\nexport default applyReducerHash({\n    LOAD_IS_CONFIGURED_INFO_PENDING: (state) => ({ ...state, loaded: true }),\n    LOAD_IS_CONFIGURED_INFO_FULFILLED: (state, action) => {\n        return {\n            ...state,\n            loaded: false,\n            showConfigSteps: action.payload.success ? false : true,\n            serverCode: action.payload.code\n        };\n    },\n    LOAD_IS_CONFIGURED_INFO_REJECTED: (state, action) => ({\n        ...state, loaded: false,  serverError: action.payload\n    })\n}, initialState);\n","import { useReducer, useRef, useMemo, useContext } from 'react';\nimport { useReduxContext as useDefaultReduxContext } from './useReduxContext';\nimport Subscription from '../utils/Subscription';\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect';\nimport { ReactReduxContext } from '../components/Context';\n\nvar refEquality = function refEquality(a, b) {\n  return a === b;\n};\n\nfunction useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub) {\n  var _useReducer = useReducer(function (s) {\n    return s + 1;\n  }, 0),\n      forceRender = _useReducer[1];\n\n  var subscription = useMemo(function () {\n    return new Subscription(store, contextSub);\n  }, [store, contextSub]);\n  var latestSubscriptionCallbackError = useRef();\n  var latestSelector = useRef();\n  var latestSelectedState = useRef();\n  var selectedState;\n\n  try {\n    if (selector !== latestSelector.current || latestSubscriptionCallbackError.current) {\n      selectedState = selector(store.getState());\n    } else {\n      selectedState = latestSelectedState.current;\n    }\n  } catch (err) {\n    if (latestSubscriptionCallbackError.current) {\n      err.message += \"\\nThe error may be correlated with this previous error:\\n\" + latestSubscriptionCallbackError.current.stack + \"\\n\\n\";\n    }\n\n    throw err;\n  }\n\n  useIsomorphicLayoutEffect(function () {\n    latestSelector.current = selector;\n    latestSelectedState.current = selectedState;\n    latestSubscriptionCallbackError.current = undefined;\n  });\n  useIsomorphicLayoutEffect(function () {\n    function checkForUpdates() {\n      try {\n        var newSelectedState = latestSelector.current(store.getState());\n\n        if (equalityFn(newSelectedState, latestSelectedState.current)) {\n          return;\n        }\n\n        latestSelectedState.current = newSelectedState;\n      } catch (err) {\n        // we ignore all errors here, since when the component\n        // is re-rendered, the selectors are called again, and\n        // will throw again, if neither props nor store state\n        // changed\n        latestSubscriptionCallbackError.current = err;\n      }\n\n      forceRender({});\n    }\n\n    subscription.onStateChange = checkForUpdates;\n    subscription.trySubscribe();\n    checkForUpdates();\n    return function () {\n      return subscription.tryUnsubscribe();\n    };\n  }, [store, subscription]);\n  return selectedState;\n}\n/**\r\n * Hook factory, which creates a `useSelector` hook bound to a given context.\r\n *\r\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\r\n * @returns {Function} A `useSelector` hook bound to the specified context.\r\n */\n\n\nexport function createSelectorHook(context) {\n  if (context === void 0) {\n    context = ReactReduxContext;\n  }\n\n  var useReduxContext = context === ReactReduxContext ? useDefaultReduxContext : function () {\n    return useContext(context);\n  };\n  return function useSelector(selector, equalityFn) {\n    if (equalityFn === void 0) {\n      equalityFn = refEquality;\n    }\n\n    if (process.env.NODE_ENV !== 'production' && !selector) {\n      throw new Error(\"You must pass a selector to useSelectors\");\n    }\n\n    var _useReduxContext = useReduxContext(),\n        store = _useReduxContext.store,\n        contextSub = _useReduxContext.subscription;\n\n    return useSelectorWithStoreAndSubscription(selector, equalityFn, store, contextSub);\n  };\n}\n/**\r\n * A hook to access the redux store's state. This hook takes a selector function\r\n * as an argument. The selector is called with the store state.\r\n *\r\n * This hook takes an optional equality comparison function as the second parameter\r\n * that allows you to customize the way the selected state is compared to determine\r\n * whether the component needs to be re-rendered.\r\n *\r\n * @param {Function} selector the selector function\r\n * @param {Function=} equalityFn the function that will be used to determine equality\r\n *\r\n * @returns {any} the selected state\r\n *\r\n * @example\r\n *\r\n * import React from 'react'\r\n * import { useSelector } from 'react-redux'\r\n *\r\n * export const CounterComponent = () => {\r\n *   const counter = useSelector(state => state.counter)\r\n *   return <div>{counter}</div>\r\n * }\r\n */\n\nexport var useSelector =\n/*#__PURE__*/\ncreateSelectorHook();"],"names":["RosPage","lazy","RosSystemDetail","Routes","Suspense","fallback","Bullseye","Spinner","Switch","Route","exact","path","component","Redirect","to","propTypes","childProps","PropTypes","history","push","PermissionContext","createContext","App","state","hasReadPermissions","undefined","arePermissionsLoaded","hasRead","this","setState","permission","permissionList","hasPermission","forEach","permissions","register","notifications","notificationsReducer","systemDetailReducer","systemRecsReducer","isConfiguredReducer","insights","chrome","init","identifyApp","unregister","on","event","navId","props","location","search","hash","getUserPermissions","rosPermissions","handlePermissionsUpdate","some","Provider","value","systemsRead","Component","withRouter","connect","store","getStore","basename","getBaseName","window","pathname","ReactDOM","document","getElementById","registry","middleware","getRegistry","promiseMiddleware","applyReducerHash","LOAD_ROS_SYSTEM_INFO_PENDING","systemInfo","loading","LOAD_ROS_SYSTEM_INFO_FULFILLED","payload","FETCH_SYSTEM_RECOMMENDATIONS_LIST_PENDING","FETCH_SYSTEM_RECOMMENDATIONS_LIST_FULFILLED","action","hasError","emptyState","recommendationsData","data","totalRecommendations","meta","count","FETCH_SYSTEM_RECOMMENDATIONS_LIST_REJECTED","systemRecError","LOAD_IS_CONFIGURED_INFO_PENDING","loaded","LOAD_IS_CONFIGURED_INFO_FULFILLED","showConfigSteps","success","serverCode","code","LOAD_IS_CONFIGURED_INFO_REJECTED","serverError","refEquality","a","b","createSelectorHook","context","useReduxContext","useContext","selector","equalityFn","_useReduxContext","contextSub","selectedState","forceRender","useReducer","s","subscription","useMemo","latestSubscriptionCallbackError","useRef","latestSelector","latestSelectedState","current","getState","err","message","stack","checkForUpdates","newSelectedState","onStateChange","trySubscribe","tryUnsubscribe","useSelectorWithStoreAndSubscription","useSelector"],"sourceRoot":""}