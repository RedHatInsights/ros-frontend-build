{"version":3,"file":"js/RosSystemDetail.1649764838960.75d44f7d8017bfbaa83c.js","mappings":"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","sources":["webpack:///./src/Components/SystemDetail/SystemDetail.js","webpack:///./src/store/entityDetailReducer.js","webpack:///./src/Components/RecommendationRating/RecommendationRating.js","webpack:///./src/Routes/RosSystemDetail/RosSystemDetail.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import React, { Suspense, useEffect, useState, Fragment  } from 'react';\nimport PropTypes from 'prop-types';\nimport { Provider, useSelector } from 'react-redux';\nconst SystemRecommendations = React.lazy(() => import('./SystemRecommendations'));\nimport { systemRecsReducer } from '../../store/reducers';\nimport { Bullseye, Spinner } from '@patternfly/react-core';\n/**\n * This is a dumb component that only recieves properties from a smart component.\n * Dumb components are usually functions and not classes.\n *\n * @param props the props given by the smart component.\n */\n\nconst SystemDetail = (props) => {\n    const inventoryId = useSelector(({ entityDetails }) => entityDetails?.entity?.id);\n\n    return (\n        <Suspense fallback=\"\">\n            <SystemRecommendations inventoryId={ inventoryId } {...props}/>\n        </Suspense>\n    );\n};\n\nconst SystemDetailWrapper = ({ getRegistry, ...props }) => {\n    const [Wrapper, setWrapper] = useState();\n    useEffect(() => {\n        if (getRegistry) {\n            getRegistry()?.register?.({ systemRecsReducer });\n        }\n\n        setWrapper(() => getRegistry ? Provider : Fragment);\n    }, [getRegistry]);\n\n    return Wrapper ? <Wrapper { ...getRegistry && { store: getRegistry().getStore() } }>\n        <SystemDetail { ...props } /></Wrapper> : <Bullseye><Spinner size=\"xl\" /></Bullseye>;\n\n};\n\nSystemDetailWrapper.propTypes = {\n    getRegistry: PropTypes.func\n};\n\nexport default SystemDetailWrapper;\n","import { applyReducerHash } from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry';\nimport SystemDetail from '../Components/SystemDetail/SystemDetail';\n\nconst defaultState = { loaded: false };\n\nconst entityLoaded = (state) => {\n    return {\n        ...state,\n        loaded: true,\n        activeApps: [\n            {\n                title: 'Resource optimization',\n                name: 'resource optimization',\n                component: SystemDetail\n            }\n        ]\n    };\n};\n\nexport const entityDetailReducer = ({ LOAD_ENTITY_FULFILLED }) => applyReducerHash(\n    {\n        [LOAD_ENTITY_FULFILLED]: entityLoaded\n    },\n    defaultState\n);\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button } from '@patternfly/react-core';\nimport { OutlinedThumbsUpIcon } from '@patternfly/react-icons';\nimport { OutlinedThumbsDownIcon } from '@patternfly/react-icons';\nimport { ThumbsUpIcon } from '@patternfly/react-icons';\nimport { ThumbsDownIcon } from '@patternfly/react-icons';\n\nimport './RecommendationRating.scss';\nimport {\n    ROS_API_ROOT,\n    RECOMMENDATION_RATING_API,\n    NEUTRAL_FEEDBACK,\n    POSITIVE_FEEDBACK,\n    NEGATIVE_FEEDBACK  } from '../../constants';\n\nconst RecommendationRating = ({ system }) => {\n    const [rating, setRating] = useState(system.rating);\n    const [submitted, setSubmitted] = useState(false);\n    const updateRecommendationRating = async (newRating) => {\n        const calculatedRating = rating === newRating ? NEUTRAL_FEEDBACK : newRating;\n        try {\n\n            // POST request using fetch with error handling\n            const requestOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({\n                    inventory_id: system.inventoryId, /* eslint-disable-line camelcase */\n                    rating: calculatedRating\n                })\n            };\n\n            await fetch(`${ROS_API_ROOT}${RECOMMENDATION_RATING_API}`, requestOptions);\n            setRating(calculatedRating);\n            setSubmitted(true);\n            setTimeout(() => setSubmitted(false), 3000);\n        } catch (error) {\n            console.error(error); // eslint-disable-line no-console\n        }\n    };\n\n    return <span className='ratingSpanOverride'>\n        Is this suggestion helpful?\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-up\"\n            onClick={() => updateRecommendationRating(POSITIVE_FEEDBACK)}\n            ouiaId=\"thumbsUp\">\n            {rating === POSITIVE_FEEDBACK ? <ThumbsUpIcon className='like' size='sm' /> :\n                <OutlinedThumbsUpIcon size='sm' />}\n        </Button>\n        <Button\n            variant=\"plain\"\n            aria-label=\"thumbs-down\"\n            onClick={() => updateRecommendationRating(NEGATIVE_FEEDBACK)}\n            ouiaId=\"thumbsDown\">\n            {rating === NEGATIVE_FEEDBACK ? <ThumbsDownIcon className='dislike' size='sm' /> :\n                <OutlinedThumbsDownIcon size='sm' />}\n        </Button>\n        {submitted && 'Thank you for your feedback!'}\n    </span>;\n};\n\nRecommendationRating.propTypes = {\n    system: PropTypes.object\n};\n\nexport default RecommendationRating;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter, Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Grid, GridItem, Breadcrumb, BreadcrumbItem } from '@patternfly/react-core';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { PageHeader } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { InventoryDetailHead, AppInfo, DetailWrapper } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport { loadSystemInfo } from '../../store/actions';\nimport { entityDetailReducer } from '../../store/entityDetailReducer';\nimport './ros-details-page.scss';\nimport { ExpandedRow } from '../../Components/RosTable/ExpandedRow';\nimport RecommendationRating from '../../Components/RecommendationRating/RecommendationRating';\nimport { SystemState } from '../../Components/RosTable/SystemState';\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { PermissionContext } from '../../App';\nimport {\n    DescriptionList,\n    DescriptionListTerm,\n    DescriptionListGroup,\n    DescriptionListDescription\n} from '@patternfly/react-core';\n\nclass RosSystemDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inventoryId: this.props.match.params.inventoryId\n        };\n    }\n\n    async componentDidMount() {\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('system-detail');\n        await this.props.loadSystemInfo(this.state.inventoryId);\n        document.title = this.props.rosSystemInfo.display_name;\n    }\n\n    renderChildrenNode() {\n        if (this.props.rosSystemInfo) {\n            const {\n                cloud_provider: cloudProvider,\n                instance_type: instanceType,\n                idling_time: idlingTime,\n                rating,\n                state: state\n            } = this.props.rosSystemInfo;\n            const { inventoryId } = this.props.match.params;\n            return (\n                <Grid className='ros-system-info'>\n                    <GridItem>\n                        <DescriptionList className='expanded-row' isCompact isHorizontal>\n                            <DescriptionListGroup>\n                                <DescriptionListTerm>State</DescriptionListTerm>\n                                <DescriptionListDescription>\n                                    <SystemState stateValue={ state }/>\n                                </DescriptionListDescription>\n                            </DescriptionListGroup>\n                        </DescriptionList>\n                    </GridItem>\n                    <GridItem>\n                        <ExpandedRow\n                            { ...{ cloudProvider, instanceType, idlingTime, inventoryId } }\n                        />\n                    </GridItem>\n                    <GridItem>\n                        <RecommendationRating system={ { ...{ rating, inventoryId } } } />\n                    </GridItem>\n                </Grid>\n            );\n        } else {\n            return null;\n        }\n    }\n\n    render() {\n        const entity = this.props.entity;\n        return (\n            <React.Fragment>\n                <PermissionContext.Consumer>\n                    { value =>\n                        value.permissions.systemsRead === false\n                            ? <NotAuthorized serviceName='Resource Optimization'/>\n                            : <DetailWrapper\n                                onLoad={({ mergeWithDetail, INVENTORY_ACTION_TYPES }) => {\n                                    register(mergeWithDetail(\n                                        entityDetailReducer(INVENTORY_ACTION_TYPES)\n                                    ));\n                                }}\n                                className='rosDetailWrapper'\n                            >\n                                <PageHeader>\n                                    <Breadcrumb ouiaId=\"system-detail\">\n                                        <BreadcrumbItem>\n                                            <Link to='/'>Resource Optimization</Link>\n                                        </BreadcrumbItem>\n                                        <BreadcrumbItem isActive>\n                                            <div className=\"ins-c-inventory__detail--breadcrumb-name\">\n                                                { entity ? entity.display_name : null }\n                                            </div>\n                                        </BreadcrumbItem>\n                                    </Breadcrumb>\n                                    <InventoryDetailHead\n                                        hideBack\n                                        showDelete={ false }\n                                        hideInvDrawer\n                                    />\n                                    { this.renderChildrenNode() }\n                                </PageHeader>\n                                <Main>\n                                    <Grid gutter=\"md\">\n                                        <GridItem span={12}>\n                                            <AppInfo showTags fallback=\"\" />\n                                        </GridItem>\n                                    </Grid>\n                                </Main>\n                            </DetailWrapper>\n                    }\n                </PermissionContext.Consumer>\n            </React.Fragment>\n        );\n    }\n};\n\nRosSystemDetail.propTypes = {\n    match: PropTypes.any,\n    entity: PropTypes.object,\n    loading: PropTypes.bool,\n    rosSystemInfo: PropTypes.object,\n    loadSystemInfo: PropTypes.func\n};\n\nconst mapStateToProps = (state, props) => {\n    return {\n        entity: state.entityDetails && state.entityDetails.entity,\n        loading: state.systemDetailReducer?.loading,\n        rosSystemInfo: state.systemDetailReducer?.systemInfo,\n        ...props\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        loadSystemInfo: (uuid) => dispatch(loadSystemInfo(uuid))\n    };\n}\n\nexport default withRouter(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps)(RosSystemDetail)\n);\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["SystemRecommendations","React","SystemDetail","props","inventoryId","useSelector","entityDetails","entity","id","Suspense","fallback","SystemDetailWrapper","getRegistry","useState","Wrapper","setWrapper","useEffect","register","systemRecsReducer","Provider","Fragment","store","getStore","Spinner","size","propTypes","PropTypes","defaultState","loaded","entityLoaded","state","activeApps","title","name","component","RecommendationRating","system","rating","setRating","submitted","setSubmitted","updateRecommendationRating","newRating","calculatedRating","NEUTRAL_FEEDBACK","requestOptions","method","headers","body","JSON","stringify","inventory_id","fetch","ROS_API_ROOT","RECOMMENDATION_RATING_API","setTimeout","console","error","className","Button","variant","onClick","POSITIVE_FEEDBACK","ouiaId","NEGATIVE_FEEDBACK","RosSystemDetail","match","params","insights","chrome","hideGlobalFilter","appAction","this","loadSystemInfo","document","rosSystemInfo","display_name","cloudProvider","cloud_provider","instanceType","instance_type","idlingTime","idling_time","Grid","GridItem","DescriptionList","isCompact","isHorizontal","DescriptionListGroup","DescriptionListTerm","DescriptionListDescription","SystemState","stateValue","ExpandedRow","value","permissions","systemsRead","NotAuthorized","serviceName","DetailWrapper","onLoad","mergeWithDetail","INVENTORY_ACTION_TYPES","LOAD_ENTITY_FULFILLED","applyReducerHash","entityDetailReducer","PageHeader","Breadcrumb","BreadcrumbItem","Link","to","isActive","InventoryDetailHead","hideBack","showDelete","hideInvDrawer","renderChildrenNode","Main","gutter","span","AppInfo","showTags","loading","withRouter","connect","systemDetailReducer","systemInfo","dispatch","uuid","handleErrors","response","ok","Error","statusText","isROSConfigured","url","URL","IS_CONFIGURED_API","window","location","origin","auth","getUser","then","res","json","result","fetchSystemDetail","SYSTEMS_API_ROOT","fetchSystemRecommendations","options","limit","perPage","offset","page","description","trim","search","URLSearchParams","toString","resp","status","hasError","fetchSystems","fetchParams","orderBy","orderHow","order_by","os","number_of_suggestions","report_date","order_how","SortByDirection","filters","hostnameOrId","query","stateFilter","forEach","stateFilterValue","append","type","payload","loadSysRecs","loadIsConfiguredInfo","changeSystemColumns"],"sourceRoot":""}