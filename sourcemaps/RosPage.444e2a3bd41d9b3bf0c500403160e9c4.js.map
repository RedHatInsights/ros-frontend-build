{"version":3,"file":"js/RosPage.1669295420540.a6ff0ae120664124cdb6.js","mappings":"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","sources":["webpack:///./src/Components/ServiceNotConfigured/ServiceNotConfigured.js","webpack:///./src/Components/Modals/ManageColumnsModal.js","webpack:///./src/Components/Reports/Constants.js","webpack:///./src/Components/Reports/Util.js","webpack:///./src/Components/Reports/Common/styles.js","webpack:///./src/Components/Reports/Common/SystemsTablePage.js","webpack:///./src/Components/Reports/Common/SystemsFirstPage.js","webpack:///./src/Components/Reports/SystemsPDFReport.js","webpack:///./src/Components/Reports/DownloadReport.js","webpack:///./src/Components/Reports/Common/IconCanvas.js","webpack:///./src/Components/Reports/Common/ExecutiveFirstPage.js","webpack:///./src/Components/Reports/Common/InstancesTable.js","webpack:///./src/Components/Reports/Common/ExecutiveSecondPage.js","webpack:///./src/Components/Reports/Common/DescriptionList.js","webpack:///./src/Components/Reports/Common/ExecutiveThirdPage.js","webpack:///./src/Components/Reports/ExecutivePDFReport.js","webpack:///./src/Routes/RosPage/RosPage.js","webpack:///./src/Utilities/api.js","webpack:///./src/store/actions.js"],"sourcesContent":["import {\n    Bullseye, EmptyState, EmptyStateBody,\n    EmptyStateIcon, Title, Stack,\n    StackItem, Button\n} from '@patternfly/react-core';\nimport { WrenchIcon } from '@patternfly/react-icons';\nimport React from 'react';\nimport { GETTING_STARTED_URL } from '../../constants';\nimport './ServiceNotConfigured.scss';\n\nexport const ServiceNotConfigured = () => (\n    <Bullseye>\n        <EmptyState className=\"empty-state-not-configured\">\n            <EmptyStateIcon icon={WrenchIcon} />\n            <Title headingLevel=\"h5\" size=\"lg\">\n              Resource optimization isn&apos;t configured yet\n            </Title>\n            <EmptyStateBody>\n                <Bullseye>\n                    <Stack hasGutter>\n                        <StackItem>\n                            Resource Optimization requires installing and configuring Performance Co-Pilot on\n                            the client system.\n                        </StackItem>\n                        <StackItem>\n                            Check the documentation to find how to configure Resource Optimization with Ansible. An\n                            alternative method which does not require Ansible is also described.\n                        </StackItem>\n                        <StackItem>\n                            After configuring Resource Optimization, it may take up to 24 hours until suggestions\n                            are available.\n                        </StackItem>\n                    </Stack>\n                </Bullseye>\n            </EmptyStateBody>\n            <Button\n                component=\"a\"\n                href={GETTING_STARTED_URL}\n                target=\"_blank\"\n                variant=\"primary\">\n                Getting started documentation\n            </Button>\n        </EmptyState>\n    </Bullseye>\n);\n","import React, { useState } from 'react';\nimport propTypes from 'prop-types';\nimport {\n    Button,\n    DataList,\n    DataListCell,\n    DataListCheck,\n    DataListItem,\n    DataListItemCells,\n    DataListItemRow,\n    Modal,\n    Split,\n    SplitItem,\n    Text,\n    TextContent,\n    TextVariants\n} from '@patternfly/react-core';\n\nexport const ManageColumnsModal = ({ modalColumns, isModalOpen, setModalOpen, saveColumns }) => {\n\n    const [currentColumns, setCurrentColumns] = useState(modalColumns);\n\n    const handleSave = () => {\n        setModalOpen(false);\n        saveColumns(currentColumns);\n    };\n\n    const handleCancel = () => {\n        setModalOpen(false);\n        setCurrentColumns(modalColumns);\n    };\n\n    const handleSelectAll = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: true })));\n    };\n\n    const handleResetToDefault = () => {\n        setCurrentColumns(currentColumns.map(column => ({ ...column, isChecked: column.isShownByDefault ?? false })));\n    };\n\n    const onCheckChange = (index) => {\n        const newColumns = [...currentColumns];\n        const changedColumn = { ...newColumns[index] };\n\n        changedColumn.isChecked = !changedColumn.isChecked;\n        newColumns[index] = changedColumn;\n\n        setCurrentColumns(newColumns);\n\n    };\n\n    return (\n        <Modal\n            title='Manage columns'\n            onClose={handleCancel}\n            isOpen={isModalOpen}\n            variant='small'\n            description={\n                <TextContent>\n                    <Text component={TextVariants.p}>Selected categories will be displayed in the table</Text>\n                    <Split hasGutter>\n                        <SplitItem>\n                            <Button isInline onClick={handleSelectAll} variant=\"link\">\n                                Select all\n                            </Button>\n                        </SplitItem>\n                        <SplitItem>\n                            <Button isInline onClick={handleResetToDefault} variant=\"link\">\n                                Reset to default\n                            </Button>\n                        </SplitItem>\n\n                    </Split>\n                </TextContent>\n            }\n            actions={[\n                <Button key=\"save\" variant=\"primary\" onClick={handleSave}>\n                    Save\n                </Button>,\n                <Button key=\"cancel\" variant=\"secondary\" onClick={handleCancel}>\n                    Cancel\n                </Button>\n            ]}\n        >\n            <DataList aria-label=\"Column management table\" id=\"column-management-table\" isCompact>\n                {\n                    currentColumns.map((column, index)=>\n                        <DataListItem key={column.key}>\n                            <DataListItemRow>\n                                <DataListCheck\n                                    checked={column.isChecked}\n                                    id={`checkbox-${index}`}\n                                    onChange={() => onCheckChange(index)}\n                                    isDisabled={column.isDisabled}\n                                />\n                                <DataListItemCells\n                                    dataListCells={[\n                                        <DataListCell key={`column-table-item-${index}`}>\n                                            <label>\n                                                {column.modalTitle}\n                                            </label>\n                                        </DataListCell>\n                                    ]}\n                                />\n                            </DataListItemRow>\n                        </DataListItem>\n                    )}\n            </DataList>\n        </Modal>\n    );\n\n};\n\nManageColumnsModal.propTypes = {\n    modalColumns: propTypes.arrayOf(propTypes.object).isRequired,\n    isModalOpen: propTypes.bool.isRequired,\n    setModalOpen: propTypes.func.isRequired,\n    saveColumns: propTypes.func.isRequired\n\n};\n\n","import { TachometerAltIconConfig } from '@patternfly/react-icons/dist/js/icons/tachometer-alt-icon';\nimport { AngleDoubleDownIconConfig } from '@patternfly/react-icons/dist/js/icons/angle-double-down-icon';\nimport { AngleDoubleUpIconConfig } from '@patternfly/react-icons/dist/js/icons/angle-double-up-icon';\nimport { AutomationIconConfig } from '@patternfly/react-icons/dist/js/icons/automation-icon';\nimport { InProgressIconConfig } from '@patternfly/react-icons/dist/js/icons/in-progress-icon';\nimport { CheckCircleIconConfig } from '@patternfly/react-icons/dist/js/icons/check-circle-icon';\n\n// Reports\n\nexport const SYSTEMS_PDF_REPORT_TITLE = 'Insights Resource Optimization Systems Report';\nexport const SYSTEMS_REPORT_FILE_NAME = 'resource_optimization--';\n\nexport const pdfRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'report_date'];\n\nexport const reportRowKeys = ['display_name', 'os', 'performance_utilization.cpu', 'performance_utilization.memory', 'performance_utilization.max_io',\n    'number_of_suggestions', 'state', 'cloud_provider', 'instance_type', 'idling_time', 'report_date'];\n\nexport const percentageKeys = ['performance_utilization.cpu', 'performance_utilization.memory', 'idling_time'];\n\nexport const PDF_RECORDS_PER_PAGE = {\n    firstPageCount: 16,\n    otherPageCount: 22\n\n};\n\nexport const REPORT_NOTIFICATIONS = {\n    start: {\n        variant: 'info',\n        title: 'Generating data. Download may take a moment to start.'\n    },\n    success: {\n        variant: 'success',\n        title: 'Export successful'\n    },\n    failure: {\n        variant: 'danger',\n        autoDismiss: false,\n        title: 'Export failed. Please try exporting again.'\n    }\n};\n\nexport const sysStatesDescription = [\n    {\n        title: 'Optimized',\n        description: 'Performing at an optimal level',\n        iconPath: CheckCircleIconConfig.svgPath,\n        iconScale: 0.014,\n        fillColor: 'green'\n    },\n    {\n        title: 'Under pressure',\n        description: 'Peaking occasionally',\n        iconPath: TachometerAltIconConfig.svgPath,\n        iconScale: 0.014,\n        fillColor: '#030303'\n    },\n    {\n        title: 'Undersized',\n        description: 'Using more than 80% of system resources',\n        iconPath: AngleDoubleDownIconConfig.svgPath,\n        iconScale: 0.014,\n        fillColor: 'red'\n    },\n    {\n        title: 'Oversized',\n        description: 'Using less than 20% of system resources',\n        iconPath: AngleDoubleUpIconConfig.svgPath,\n        iconScale: 0.014,\n        fillColor: '#f09800'\n    },\n    {\n        title: 'Idling',\n        description: 'Consuming less than 5% of resources',\n        iconPath: AutomationIconConfig.svgPath,\n        iconScale: 0.008,\n        fillColor: '#030303'\n    },\n    {\n        title: 'Waiting for data',\n        description: 'Data has not been received or is being processed. Initial data processing takes up to 24 hours.',\n        iconPath: InProgressIconConfig.svgPath,\n        iconScale: 0.008,\n        fillColor: '#2B9AF3'\n    }\n];\n\nexport const conditionsDescription = [\n    {\n        title: 'CPU pressure',\n        description: 'CPU registered peaks higher than 20% over several one-minute time periods'\n    },\n    {\n        title: 'Disk I/O  pressure',\n        description: 'Disk I/O registered peaks higher than 20% over several one-minute time periods'\n    },\n    {\n        title: 'RAM pressure',\n        description: 'RAM registered peaks higher than 20% over several one-minute time periods'\n    }\n];\n","import { get } from 'lodash';\nimport { pdfRowKeys, percentageKeys, reportRowKeys, SYSTEMS_REPORT_FILE_NAME } from './Constants';\nimport { dateStringByType } from '@redhat-cloud-services/frontend-components/DateFormat/helper';\n\nexport const formatData = (data, type) => {\n\n    const systemsRowsData = [];\n    const rowKeys = type === 'json' ?  reportRowKeys : pdfRowKeys;\n\n    data.map((systemItem) => {\n        let rowData = type === 'json' ? {} : [];\n\n        rowKeys.map((rowKey) =>{\n            let rowValue =  get(systemItem, rowKey, '');\n            rowValue = (rowValue === null || rowValue === -1) ?  'N/A' : rowValue.toString();\n            rowValue = (rowValue !== 'N/A' && percentageKeys.includes(rowKey)) ? `${rowValue}%` : rowValue;\n            rowValue = (rowKey === 'report_date') ? dateStringByType('exact')(new Date(rowValue)) : rowValue;\n\n            if (type === 'json') {\n                rowData[rowKey] = rowValue;\n            } else if (type === 'pdf') {\n                rowData.push(rowValue);\n            }\n        });\n\n        systemsRowsData.push(rowData);\n    });\n\n    return systemsRowsData;\n\n};\n\nexport const responseToJSONData = (data) => {\n    const systemsRowsData = formatData(data, 'json');\n    return JSON.stringify(systemsRowsData);\n};\n\nexport const responseToCSVData = (data) => {\n    const items =  formatData(data, 'json');\n    const header = Object.keys(items[0]);\n    const csvData = [\n        header.join(','), // header row first\n        ...items.map(row => header.map(fieldName => row[fieldName]).join(','))\n    ].join('\\r\\n');\n\n    return csvData;\n};\n\nexport const generateFilterText = (filters) => {\n    let filterText  = '';\n    const filterSeparatorOnLine = '\\n';\n    const hasStateFilter = filters?.stateFilter?.length > 0;\n    const hasNameFilter =  filters?.hostnameOrId?.length > 0;\n    const hasOsFilter =  filters?.osFilter?.length > 0;\n\n    if (hasStateFilter || hasNameFilter || hasOsFilter) {\n        filterText = `${filterSeparatorOnLine}Filters applied${filterSeparatorOnLine}`;\n        filterText = hasNameFilter ? filterText.concat(`Name: ${filters.hostnameOrId}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasStateFilter ? filterText.concat(`State: ${filters.stateFilter.toString()}${filterSeparatorOnLine}`) : filterText;\n        filterText = hasOsFilter ? filterText.concat(`Operating System: ${filters.osFilter.sort().toString()}${filterSeparatorOnLine}`) : filterText;\n    }\n\n    return filterText;\n\n};\n\nexport const getSystemsReportFileName = () =>  {\n    const currentDate = `${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc`;\n    const reportFileName = `${SYSTEMS_REPORT_FILE_NAME}${currentDate}`;\n\n    return reportFileName;\n};\n\nexport const formatExecutiveReportData = (data) => {\n\n    const { systems_per_state: systemsPerState, conditions } = data;\n\n    const stateChartData = [];\n    const stateTableData = [['# of systems']];\n\n    const conditionsChartData = [];\n    const conditionsTableData = [['# of occurrences']];\n\n    const conditionsInfo = {\n        io: {\n            name: 'Disk IO',\n            occurrences: []\n        },\n        memory: {\n            name: 'RAM',\n            occurrences: []\n        },\n        cpu: {\n            name: 'CPU',\n            occurrences: []\n        }\n    };\n\n    const stateNameMapping = {\n        idling: 'Idling',\n        oversized: 'Oversized',\n        under_pressure: 'Under pressure', /* eslint-disable-line camelcase */\n        undersized: 'Undersized',\n        waiting_for_data: 'Waiting for data', /* eslint-disable-line camelcase */\n        optimized: 'Optimized'\n    };\n\n    Object.keys(systemsPerState).map((state) => {\n        const stateName = stateNameMapping[state];\n        const percentage = systemsPerState[state]?.percentage;\n        const count = systemsPerState[state]?.count;\n\n        stateChartData.push({ x: stateName, y: percentage });\n        stateTableData.push([`${count} (${percentage}% of total)`]);\n    });\n\n    Object.keys(conditions).map((condition) => {\n        const conditionName = conditionsInfo[condition].name;\n        const percentage = Math.floor(conditions[condition]?.percentage);\n        const count = conditions[condition]?.count;\n\n        conditionsChartData.push({ x: conditionName, y: percentage });\n        conditionsTableData.push([`${count}`]);\n\n        const underPressureValue = (conditions[condition].under_pressure !== null) ? conditions[condition].under_pressure : 0;\n        const undersizedValue = (conditions[condition].undersized !== null) ? conditions[condition].undersized : 0;\n        const oversizedValue = (conditions[condition].oversized !== null) ? conditions[condition].oversized : 0;\n\n        conditionsInfo[condition].occurrences.push(['Under pressure', `${underPressureValue}*`]);\n        if (undersizedValue !== -1 && oversizedValue !== -1) {\n            conditionsInfo[condition].occurrences.push(['Undersized', `${undersizedValue}`]);\n            conditionsInfo[condition].occurrences.push(['Oversized', `${oversizedValue}`]);\n        }\n    });\n\n    return { stateChartData, stateTableData, conditionsChartData, conditionsTableData, conditionsInfo };\n};\n\nexport const pluralize = (count, singular, plural) => {\n    if (!plural) {\n        plural = `${singular}s`;\n    }\n\n    return `${count === 1 ? singular : plural}`;\n};\n","import { StyleSheet } from '@react-pdf/renderer';\nimport global_BorderColor_300 from '@patternfly/react-tokens/dist/js/global_BorderColor_300';  /* eslint-disable-line camelcase */\n\nexport default StyleSheet.create({\n    bodyCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2,\n        flex: 1\n    },\n    headerCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1\n    },\n    systemNameCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 2.5,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    lastReportedCell: {\n        textAlign: 'left',\n        fontSize: 8,\n        flex: 1.2,\n        paddingBottom: 2,\n        paddingTop: 2,\n        paddingRight: 2\n    },\n    headerStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'space-around'\n    },\n\n    rowStyle: {\n        display: 'flex',\n        flexDirection: 'row',\n        justifyContent: 'center'\n    },\n    execHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginBottom: 4,\n        marginTop: 10\n    },\n    occurrenceHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 12,\n        marginBottom: -4\n    },\n    execInfoText: {\n        flex: 1,\n        textAlign: 'right',\n        fontSize: 7,\n        color: '#6A6E73'\n    },\n    instanceTypeHeading: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B',\n        marginTop: 20\n    },\n    instanceTypeHeadingFirst: {\n        textAlign: 'left',\n        fontSize: 10,\n        color: '#C9190B'\n    },\n    instanceTypeDesc: {\n        fontSize: 10,\n        textAlign: 'left',\n        marginBottom: 4\n    },\n    flexRow: {\n        display: 'flex',\n        flexDirection: 'row'\n    },\n    tableRowBackground: {\n        backgroundColor: global_BorderColor_300.value  /* eslint-disable-line camelcase */\n    },\n    instanceTableHeading: {\n        fontSize: 10,\n        color: '#6A6E73',\n        paddingBottom: 4,\n        fontWeight: 'bold'\n    },\n    bold: {\n        fontFamily: 'Helvetica-Bold',\n        fontWeight: 700\n    }\n\n});\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\n\nconst columnBuilder = ({ value, style, key }) => <Text key={key} style={style}>{value}</Text>;\n\nconst headerContent = ['Name', 'OS', 'CPU utilization', 'Memory utilization', 'I/O utilization', 'Suggestions', 'State', 'Last reported'];\n\nconst buildSystemsHeader = () => {\n    const formattedHeader = headerContent.map((item, index) => {\n        let styleArr = item === 'Name' ? [styles.systemNameCell] : item === 'Last reported' ? [styles.lastReportedCell] : [styles.headerCell];\n        return columnBuilder({ value: item, style: styleArr, key: `${index}-${item}` });\n    });\n\n    return formattedHeader;\n\n};\n\nconst buildSystemsRows = (rowsData) => {\n    const systemsRows =  rowsData.map((rowItem) => {\n        const formattedRows = rowItem.map((rowValue, index) => {\n            const nameIndex = headerContent.indexOf('Name');\n            const lastReportedIndex = headerContent.indexOf('Last reported');\n            let styleArr = index === nameIndex ? [styles.systemNameCell]\n                : index === lastReportedIndex ? [styles.lastReportedCell] : [styles.bodyCell];\n            return columnBuilder({ value: rowValue, style: styleArr, key: `${index}-${rowValue}` });\n        });\n        return formattedRows;\n    });\n\n    return systemsRows;\n};\n\nexport const SystemsTablePage = ({ data, page }) => {\n\n    // Table header\n    const systemsHeader = buildSystemsHeader();\n\n    // Table Rows\n    const systemsRows = buildSystemsRows(data);\n\n    return <Fragment key={page}>\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={[\n                        systemsHeader,\n                        ... systemsRows\n                    ]}\n                />\n            </Column>\n        </Section>\n    </Fragment>;\n\n};\n\nSystemsTablePage.propTypes = {\n    data: propTypes.array,\n    page: propTypes.number\n};\n\ncolumnBuilder.propTypes = {\n    value: propTypes.string,\n    style: propTypes.array,\n    key: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { SystemsTablePage } from './SystemsTablePage';\n\nexport const SystemsFirstPage = ({ data, totalSystems, filterText }) => {\n\n    return <Fragment key=\"first-section\">\n        <Section>\n            <Column>\n                {`This report identified ${totalSystems} ${totalSystems > 1 ? 'RHEL systems' : 'RHEL system' }. ${filterText}`}\n            </Column>\n        </Section>\n        <SystemsTablePage data={data} page={0} />\n    </Fragment>;\n};\n\nSystemsFirstPage.propTypes = {\n    data: propTypes.array,\n    totalSystems: propTypes.number,\n    filterText: propTypes.string\n};\n","import React, { useEffect } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { PDF_RECORDS_PER_PAGE, REPORT_NOTIFICATIONS, SYSTEMS_PDF_REPORT_TITLE } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { formatData, generateFilterText, getSystemsReportFileName } from './Util';\nimport propTypes from 'prop-types';\nimport { SystemsTablePage } from './Common/SystemsTablePage';\nimport { SystemsFirstPage } from './Common/SystemsFirstPage';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nexport const DownloadSystemsPDFReport = ({ filters, orderBy, orderHow, ...props }) => {\n    const reportFileName = getSystemsReportFileName();\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    useEffect(() => {\n        dispatch(addNotification(start));\n    }, []); // eslint-disable-line react-hooks/exhaustive-deps\n\n    const generateSystemsPDFReport = async (filters, orderBy, orderHow) => {\n\n        const { firstPageCount, otherPageCount } = PDF_RECORDS_PER_PAGE;\n\n        // Table rows\n        const fetchSystemParams = {\n            filters,\n            stateFilter: filters.stateFilter,\n            osFilter: filters.osFilter,\n            orderBy,\n            orderHow\n        };\n\n        let systemsResponse;\n        try {\n            systemsResponse = await fetchSystems(fetchSystemParams);\n        }\n        catch {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n\n            return [];\n        }\n\n        const pdfData = formatData(systemsResponse.data, 'pdf');\n\n        // first page description and data props\n        const firstPageProps = {\n            data: pdfData.splice(0, firstPageCount),\n            totalSystems: systemsResponse?.meta?.count,\n            filterText: generateFilterText(filters)\n        };\n\n        const otherPages = [];\n\n        while (pdfData.length > 0) {\n            otherPages.push(pdfData.splice(0, otherPageCount));\n        }\n\n        dispatch(clearNotifications());\n        dispatch(addNotification(success));\n\n        return [\n            <SystemsFirstPage key='first-page' {...firstPageProps} />,\n            ...otherPages.map((systemsPage, index) => <SystemsTablePage key={index} data={systemsPage}  page={index + 1}/>)\n        ];\n\n    };\n\n    return (\n        <div>\n            <DownloadButton\n                {...props}\n                reportName={SYSTEMS_PDF_REPORT_TITLE}\n                type=\"\"\n                fileName={`${reportFileName}.pdf`}\n                size=\"A4\"\n                orientation=\"landscape\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateSystemsPDFReport(filters, orderBy, orderHow)}\n            />\n        </div>\n    );\n\n};\n\nDownloadSystemsPDFReport.propTypes = {\n    filters: propTypes.object,\n    orderBy: propTypes.string,\n    orderHow: propTypes.string\n\n};\n","import { downloadFile } from '@redhat-cloud-services/frontend-components-utilities/helpers/helpers';\nimport { REPORT_NOTIFICATIONS } from './Constants';\nimport { fetchSystems } from '../../Utilities/api';\nimport { getSystemsReportFileName, responseToCSVData, responseToJSONData } from './Util';\n\nexport const downloadReport = async (format, filters, orderBy, orderHow, showNotification, clearNotification) => {\n\n    const fileName = getSystemsReportFileName();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    showNotification(start);\n\n    const fetchSystemParams = {\n        filters,\n        stateFilter: filters.stateFilter,\n        osFilter: filters.osFilter,\n        orderBy,\n        orderHow\n    };\n\n    try {\n        const systemsResponse = await fetchSystems(fetchSystemParams);\n\n        const data = format === 'json' ? responseToJSONData(systemsResponse.data) : responseToCSVData(systemsResponse.data);\n\n        downloadFile(data, fileName, format);\n\n        clearNotification();\n        showNotification(success);\n    }\n    catch (error) {\n        clearNotification();\n        showNotification(failure);\n\n        throw `${error}`;\n    }\n\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Canvas } from '@react-pdf/renderer';\nimport { CircleIconConfig } from '@patternfly/react-icons/dist/js/icons/circle-icon';\n\nexport const IconCanvas = ({ width = 15, height = 10, padding = 2,\n    iconScale = 0.014, iconPath = CircleIconConfig.svgPath, fillColor = '#8BC1F7' }) => {\n\n    return (\n        <Canvas\n            style={{\n                width,\n                height,\n                padding\n            }}\n            paint={({ path, scale }) => {\n                scale(iconScale);\n                path(iconPath).fill(fillColor);\n            }}\n        />\n    );\n};\n\nIconCanvas.propTypes = {\n    width: propTypes.number,\n    height: propTypes.number,\n    padding: propTypes.number,\n    iconScale: propTypes.number,\n    iconPath: propTypes.string,\n    fillColor: propTypes.string\n};\n","import React, { Fragment } from 'react';\nimport propTypes from 'prop-types';\nimport { Section, Column, Chart, Table } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { Text, View } from '@react-pdf/renderer';\nimport { formatExecutiveReportData, pluralize } from '../Util';\nimport styles from './styles';\nimport { IconCanvas } from './IconCanvas';\n\nconst renderOccurrenceBreakdown = (conditionsInfo) => {\n\n    const ioOccurenceTableData = [\n        [\n            <View key={'disk-io-title'} style={styles.flexRow}>\n                <IconCanvas fillColor='#8BC1F7'/>\n                <Text>Disk I/O</Text>\n            </View>\n\n        ]\n    ];\n\n    const ramOccurrenceTableData = [\n        [\n            <View key={'memory-title'}  style={styles.flexRow}>\n                <IconCanvas fillColor='#002F5D'/>\n                <Text>RAM</Text>\n            </View>\n\n        ]\n    ];\n\n    const cpuOccurrenceTableData = [\n        [\n            <View key={'cpu-title'} style={styles.flexRow}>\n                <IconCanvas fillColor='#0066CC'/>\n                <Text>CPU</Text>\n            </View>\n\n        ]\n    ];\n\n    ioOccurenceTableData.push(...conditionsInfo.io.occurrences);\n    ramOccurrenceTableData.push(...conditionsInfo.memory.occurrences);\n    cpuOccurrenceTableData.push(...conditionsInfo.cpu.occurrences);\n\n    return <View>\n        <Text style={styles.occurrenceHeading}>Breakdown of occurences</Text>\n\n        <Section>\n            <Column>\n                <Table\n                    withHeader\n                    rows={ioOccurenceTableData}\n                />\n            </Column>\n            <Column style={{ flex: 0.2 }} />\n            <Column>\n                <Table\n                    withHeader\n                    rows={ramOccurrenceTableData}\n                />\n            </Column>\n            <Column style={{ flex: 0.2 }} />\n            <Column>\n                <Table\n                    withHeader\n                    rows={cpuOccurrenceTableData}\n                />\n            </Column>\n        </Section>\n\n        {/* eslint-disable-next-line max-len */}\n        <Text style={styles.execInfoText}>Under pressure (*) conditions are only reported for systems where Kernel Pressure Stall Information is enabled. Check the documentation for details.*</Text>\n        <Text style={styles.execInfoText}>Description of conditions are on the second page of the report*</Text>\n\n    </View>;\n};\n\nexport const ExecutiveFirstPage = ({ data }) => {\n    const { conditions_count: conditionsCount, non_optimized_count: nonOptimizedCount,\n        total_count: totalCount, stale_count: staleCount } = data?.meta;\n    const optimizedCount = data?.systems_per_state?.optimized?.count;   /* eslint-disable-line camelcase */\n    const newLine = '\\n';\n\n    const formattedReportData = formatExecutiveReportData(data);\n\n    const { stateChartData, stateTableData, conditionsChartData,  conditionsTableData, conditionsInfo } = formattedReportData;\n\n    return <Fragment key=\"first-page\">\n        <Text>\n            This executive summary highlights the performance for your registered systems included in the resource optimization service.\n        </Text>\n\n        {/* {Total Systems} */}\n        <Text style={styles.execHeading}>Registered systems</Text>\n        {/* eslint-disable-next-line max-len */}\n        <Text>\n            {/* eslint-disable-next-line max-len */}\n            <Text>{`There ${pluralize(totalCount, 'is', 'are')}`}</Text><Text style={styles.bold}>{` ${totalCount} registered ${pluralize(totalCount, 'system')} `}</Text><Text>{`in the resource optimization service.${newLine}`}</Text>\n            {/* eslint-disable-next-line max-len */}\n            <Text style={styles.bold}>{`${optimizedCount}`}</Text><Text>{` of ${totalCount} ${pluralize(totalCount, 'system')} ${pluralize(optimizedCount, 'is', 'are')} identified as `}</Text><Text style={styles.bold}>optimized, </Text>\n            {/* eslint-disable-next-line max-len */}\n            <Text style={styles.bold}>{`${nonOptimizedCount}`}</Text><Text>{` of ${totalCount} ${pluralize(totalCount, 'system')} as having a `}</Text><Text style={styles.bold}>non-optimal</Text><Text>{` state.${newLine}`}</Text>\n            {/* eslint-disable-next-line max-len */}\n            <Text style={styles.bold}>{`${staleCount}`}</Text><Text>{` of ${totalCount} ${pluralize(totalCount, 'system')} ${pluralize(staleCount, 'is', 'are')} `}</Text><Text style={styles.bold}>stale*</Text>\n        </Text>\n\n        <Text style={styles.execInfoText}>Suggestions for stale systems might no longer apply due to systems not being refreshed in 7 days.*</Text>\n\n        <Text style={styles.execHeading}>Breakdown of registered systems</Text>\n\n        <Section>\n            <Column>\n                <Chart\n                    chartType=\"pie\"\n                    subTitle=\"Non-optimal\"\n                    title={nonOptimizedCount}\n                    data={stateChartData}\n                    colorSchema={'multi'}\n                    legendHeader={'State'}\n                    showLabels={false}\n                    labels={() => ''}\n                />\n            </Column>\n            <Column>\n                <Table\n                    withHeader\n                    rows={stateTableData}\n                />\n            </Column>\n        </Section>\n        <Text style={styles.execInfoText}>Description of states are on the last page of the report*</Text>\n\n        <Text style={styles.execHeading}>System performance issues</Text>\n        <Text>{`There are ${conditionsCount} system performance issues.`}</Text>\n\n        <Section>\n            <Column>\n                <Chart\n                    chartType=\"donut\"\n                    subTitle=\"Conditions\"\n                    title={conditionsCount}\n                    data={conditionsChartData}\n                    colorSchema={'blue'}\n                    legendHeader={'Conditions'}\n                    showLabels={false}\n                />\n            </Column>\n            <Column>\n                <Table\n                    withHeader\n                    rows={conditionsTableData}\n                />\n            </Column>\n        </Section>\n\n        {renderOccurrenceBreakdown(conditionsInfo)}\n\n    </Fragment>;\n};\n\nExecutiveFirstPage.propTypes = {\n    data: propTypes.object\n};\n\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\nimport styles from './styles';\n\nexport const InstancesTable = ({ id, instanceDetails, heading, description }) => {\n    return (\n        <View>\n            <Text style={id === 'current_instance_types' ? styles.instanceTypeHeadingFirst : styles.instanceTypeHeading}>{heading}</Text>\n            <Text style={styles.instanceTypeDesc}>{description}</Text>\n            <View key={id} style={styles.flexRow}>\n                <Text style={[{ width: 100 }, styles.instanceTableHeading]}>Instance type</Text>\n                <Text style={[{ width: 80 }, styles.instanceTableHeading]}>\n                    {`# of ${ id === 'historical_instance_types' ? 'times' : 'systems'}`}\n                </Text>\n                <Text style={[{ flex: 1 }, styles.instanceTableHeading]}>Description</Text>\n            </View>\n            {\n                instanceDetails.length > 0 ?\n                    instanceDetails.map(\n                        (instanceDetail, index) => <View key={`${id}-${index}`} style={{\n                            ...styles.flexRow,\n                            ...(index % 2 && { ...styles.tableRowBackground }) }}>\n                            <Text style={{ width: 100 }}>{instanceDetail.type}</Text>\n                            <Text style={{ width: 80, paddingLeft: 4 }}>{instanceDetail.count}</Text>\n                            <Text style={{ flex: 1 }}>{instanceDetail.desc}</Text>\n                        </View>)\n                    : <Text style={styles.instanceTableHeading}>No data available.</Text>\n            }\n        </View>\n    );\n};\n\nInstancesTable.propTypes = {\n    id: propTypes.string,\n    instanceDetails: propTypes.array,\n    heading: propTypes.string,\n    description: propTypes.string\n};\n\n","import React, { Fragment } from 'react';\nimport { InstancesTable } from './InstancesTable';\nimport propTypes from 'prop-types';\n\nexport const ExecutiveSecondPage = ({ data }) => {\n\n    const { current: currentData, suggested: suggestedData,\n        historical: historicalData } =  data?.instance_types_highlights;  /* eslint-disable-line camelcase */\n    const { stale_count: staleCount } = data?.meta;\n\n    const instanceTableDetails = [\n        {\n            id: 'current_instance_types',\n            heading: 'Most used current instance types',\n            description: 'Based on instances that are already reporting data.',\n            data: currentData\n        },\n        {\n            id: 'suggested_instance_types',\n            heading: 'Most suggested instance types (yesterday)',\n            description: 'Yesterday we identified these instance types.',\n            data: suggestedData\n        },\n        {\n            id: 'historical_instance_types',\n            heading: 'Most suggested instance types (45 days)',\n            description: 'In the last 45 days we suggested you these instances # of times. ',\n            staleDescription: 'Some of the instances are now identified as stale (more than 7 days not reporting data).',\n            data: historicalData\n        }\n    ];\n\n    return <Fragment key=\"third-page\">\n        {\n            instanceTableDetails.map(\n                (instanceTable, index) => <InstancesTable\n                    key={`${index}-${instanceTable.id}`}\n                    id={instanceTable.id}\n                    instanceDetails={instanceTable.data}\n                    heading={instanceTable.heading}\n                    description={staleCount > 0 && instanceTable.id.includes('historical')\n                        ? `${instanceTable.description}${instanceTable.staleDescription}`\n                        : `${instanceTable.description}` }\n                />\n            )\n        }\n    </Fragment>;\n};\n\nExecutiveSecondPage.propTypes = {\n    data: propTypes.object\n};\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { Text, View } from '@react-pdf/renderer';\nimport {  Dl, Dt, Dd } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport { IconCanvas } from './IconCanvas';\n\nexport const DescriptionList = ({ id, title, description, iconPath, iconScale, fillColor }) => {\n\n    return (\n        <Dl key={id}>\n            <Dt>\n                <View style={{ display: 'flex',\n                    flexDirection: 'row' }}>\n                    {\n                        iconPath ? <IconCanvas iconPath={iconPath} iconScale={iconScale} fillColor={fillColor}/> : null\n                    }\n                    <Text>{title}</Text>\n                </View>\n            </Dt>\n            <Dd>{description}</Dd>\n        </Dl>\n    );\n};\n\nDescriptionList.propTypes = {\n    id: propTypes.string,\n    title: propTypes.string,\n    description: propTypes.string,\n    iconPath: propTypes.string,\n    iconScale: propTypes.number,\n    fillColor: propTypes.string\n};\n\n","import React, { Fragment } from 'react';\nimport { Text } from '@react-pdf/renderer';\nimport styles from './styles';\nimport { DescriptionList } from './DescriptionList';\nimport { conditionsDescription, sysStatesDescription } from '../Constants';\n\nexport const ExecutiveThirdPage = () => {\n\n    return <Fragment key=\"second-page\">\n        <Text style={styles.execHeading}>Description of states</Text>\n        {\n            sysStatesDescription.map(\n                (state, index) => <DescriptionList\n                    key={`${index}-${state.title}`}\n                    id={state.title}\n                    title={state.title}\n                    description={state.description}\n                    iconPath={state.iconPath}\n                    iconScale={state.iconScale}\n                    fillColor={state.fillColor} />)\n        }\n\n        <Text style={styles.execHeading}>Description of conditions</Text>\n        {\n            conditionsDescription.map(\n                (condition, index) => <DescriptionList\n                    key={`${index}-${condition.title}`}\n                    id={condition.title}\n                    title={condition.title}\n                    description={condition.description}/>)\n        }\n    </Fragment>;\n};\n\n","import React, { Fragment, useState } from 'react';\nimport { DownloadButton } from '@redhat-cloud-services/frontend-components-pdf-generator';\nimport ExportIcon from '@patternfly/react-icons/dist/js/icons/export-icon';\nimport './ExecutiveePDFReport.scss';\nimport { fetchExecutiveReport } from '../../Utilities/api';\nimport { useDispatch } from 'react-redux';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { ExecutiveFirstPage } from './Common/ExecutiveFirstPage';\nimport { ExecutiveSecondPage } from './Common/ExecutiveSecondPage';\nimport { ExecutiveThirdPage } from './Common/ExecutiveThirdPage';\nimport propTypes from 'prop-types';\nimport { REPORT_NOTIFICATIONS } from './Constants';\n\nexport const DownloadExecutivePDFReport = ({ isDisabled }) => {\n    const [loading, setLoading] = useState(false);\n    const dispatch = useDispatch();\n    const { start, success, failure } = REPORT_NOTIFICATIONS;\n\n    const generateExecutivePDFReport =  async () =>{\n        try {\n            setLoading(true);\n            dispatch(addNotification(start));\n\n            const executiveReportResponse = await fetchExecutiveReport();\n\n            dispatch(clearNotifications());\n            dispatch(addNotification(success));\n            setLoading(false);\n\n            return [\n                <ExecutiveFirstPage key='executive-first-page' data={executiveReportResponse} />,\n                <ExecutiveSecondPage key='executive-second-page' data={executiveReportResponse} />,\n                <ExecutiveThirdPage key='executive-third-page' />\n            ];\n\n        }\n        catch (error) {\n            dispatch(clearNotifications());\n            dispatch(addNotification(failure));\n        }\n\n    };\n\n    return (\n        <Fragment>\n            <DownloadButton\n                label={\n                    loading\n                        ? 'Loading...'\n                        : 'Download executive report'\n                }\n                reportName={'Resource optimization service report'}\n                type=\"\"\n                fileName={`Resource-Optimization-Executive-Report--${new Date().toISOString().replace(/[T:]/g, '-').split('.')[0]}-utc.pdf`}\n                size=\"A4\"\n                allPagesHaveTitle={false}\n                asyncFunction={() => generateExecutivePDFReport()}\n                buttonProps={{\n                    variant: 'link',\n                    component: 'a',\n                    icon: <ExportIcon className=\"iconOverride\" />,\n                    className: 'downloadButtonOverride',\n                    isAriaDisabled: isDisabled,\n                    ...(loading ? { isDisabled: true } : null)\n                }}\n                ErrorComponent= {(error) => <div>\n                    <h2> Error while loading executive report </h2>\n                    {error?.message && <p>{error.message}</p>}\n                </div>}\n            />\n        </Fragment>\n    );\n};\n\nDownloadExecutivePDFReport.propTypes = {\n    isDisabled: propTypes.bool\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withRouter } from 'react-router-dom';\nimport { PageHeader, PageHeaderTitle } from '@redhat-cloud-services/frontend-components/PageHeader';\nimport { Main } from '@redhat-cloud-services/frontend-components/Main';\nimport { Button, Card, CardBody } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { connect } from 'react-redux';\nimport { InventoryTable } from '@redhat-cloud-services/frontend-components/Inventory';\nimport { register } from '../../store';\nimport './ros-page.scss';\nimport { entitiesReducer } from '../../store/entitiesReducer';\nimport { changeSystemColumns, loadIsConfiguredInfo } from '../../store/actions';\nimport {\n    CUSTOM_FILTERS, ROS_API_ROOT,\n    SYSTEMS_API_ROOT, SYSTEM_TABLE_COLUMNS,\n    WITH_SUGGESTIONS_PARAM, WITH_WAITING_FOR_DATA_PARAM } from '../../constants';\nimport { ServiceNotConfigured } from '../../Components/ServiceNotConfigured/ServiceNotConfigured';\nimport { PermissionContext } from '../../App';\n\nimport { NotAuthorized } from '@redhat-cloud-services/frontend-components/NotAuthorized';\nimport { ManageColumnsModal } from '../../Components/Modals/ManageColumnsModal';\nimport { DownloadSystemsPDFReport } from '../../Components/Reports/SystemsPDFReport';\nimport { downloadReport } from '../../Components/Reports/DownloadReport';\nimport {\n    addNotification,\n    clearNotifications\n} from '@redhat-cloud-services/frontend-components-notifications/redux';\nimport { DownloadExecutivePDFReport } from '../../Components/Reports/ExecutivePDFReport';\n\n/**\n * A smart component that handles all the api calls and data needed by the dumb components.\n * Smart components are usually classes.\n *\n * https://reactjs.org/docs/components-and-props.html\n * https://medium.com/@thejasonfile/dumb-components-and-smart-components-e7b33a698d43\n */\n\nclass RosPage extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            perPage: 10,\n            orderBy: 'report_date',\n            orderDirection: SortByDirection.desc,\n            stateFilterValue: [],\n            osFilterValue: [],\n            isColumnModalOpen: false,\n            exportSystemsPDF: false,\n            nameFilterValue: '',\n            disableExport: true\n        };\n\n        this.sortingHeader = {\n            display_name: 'display_name', /* eslint-disable-line camelcase */\n            os: 'os',\n            'performance_utilization.cpu': 'cpu',\n            'performance_utilization.memory': 'memory',\n            'performance_utilization.max_io': 'max_io',\n            number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n            state: 'state',\n            report_date: 'report_date' }; /* eslint-disable-line camelcase */\n\n        this.chunkSize = 50;\n        this.inventory = React.createRef();\n        this.fetchSystems = this.fetchSystems.bind(this);\n    }\n\n    async componentDidMount() {\n        document.title = 'Resource Optimization - Red Hat Insights';\n        insights.chrome?.hideGlobalFilter?.(true);\n        insights.chrome.appAction('ros-systems');\n        await this.props.isROSConfigured();\n        this.processQueryParams();\n    }\n\n    processQueryParams() {\n        const { location } = this.props;\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Waiting for data']\n            });\n        } else if (sysWithSuggestionsParam === 'true') {\n            this.setState({\n                stateFilterValue: ['Undersized', 'Oversized', 'Under pressure', 'Idling']\n            });\n        }\n    }\n\n    clearStateQueryParams() {\n        const { location } = this.props;\n        const url = new URL(window.location);\n        const queryParams = new URLSearchParams(location.search);\n        const sysWithSuggestionsParam = queryParams.get(WITH_SUGGESTIONS_PARAM);\n        const sysWithWaitingParam = queryParams.get(WITH_WAITING_FOR_DATA_PARAM);\n\n        if (sysWithWaitingParam || sysWithSuggestionsParam) {\n            queryParams.delete(WITH_SUGGESTIONS_PARAM);\n            queryParams.delete(WITH_WAITING_FOR_DATA_PARAM);\n            window.history.replaceState(null, '', `${url.origin}${url.pathname}?${queryParams.toString()}${window.location.hash}`);\n        }\n    }\n\n    async fetchSystems(fetchParams) {\n        await window.insights.chrome.auth.getUser();\n\n        let params = {\n            limit: fetchParams.perPage,\n            offset: (fetchParams.page - 1) * fetchParams.perPage,\n            order_by: fetchParams.orderBy || this.state.orderBy, /* eslint-disable-line camelcase */\n            order_how: fetchParams.orderHow || this.state.orderDirection, /* eslint-disable-line camelcase */\n            ...fetchParams?.filters?.hostnameOrId && {\n                display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n            }\n        };\n\n        let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n        let query = new URLSearchParams(params);\n        fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n            query.append('state', stateFilterValue);\n        });\n        fetchParams?.osFilter?.forEach((osFilterValue) => {\n            query.append('os', osFilterValue);\n        });\n        url.search = query.toString();\n        return fetch(url).then((res) => {\n            if (!res.ok) {\n                throw Error(res.statusText);\n            }\n\n            return res;\n        }).then(res =>  res.json());\n    }\n\n    chunkIdsArray(ids) {\n        let idsChunks = [];\n        while (ids.length) {\n            idsChunks.push(ids.splice(0, this.chunkSize));\n        }\n\n        return idsChunks;\n    }\n\n    async fetchInventoryDetails(invIds, configOptns) {\n        let results = [];\n        if (configOptns.per_page > 50 && invIds.length > 50) {\n            let recordsSubset = await this.multipleGetEntitiesRequests(invIds, configOptns);\n            recordsSubset.map((records) => {\n                results.push(...records);\n            });\n        } else {\n            const response = await this.state.getEntities?.(invIds, configOptns, false);\n            results = response.results;\n        }\n\n        return results;\n    }\n\n    async multipleGetEntitiesRequests(invIds, configOptns) {\n        const idsInBatches = this.chunkIdsArray(invIds);\n        return Promise.all(\n            idsInBatches.map(async (ids) => {\n                let resp = await this.state.getEntities?.(ids, configOptns, false);\n                let respJSON = resp.results;\n                return respJSON;\n            })\n        ).then((results) => results);\n    }\n\n    updateStateFilter = (value) => {\n        this.setState({\n            stateFilterValue: value\n        });\n    }\n    updateOSFilter = (value) => {\n        this.setState({\n            osFilterValue: value\n        });\n    }\n\n    onDeleteFilters = (e, filtersArr) => {\n        const deletedStateFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'State';\n        });\n\n        const deletedOSFilters = filtersArr.filter((filterObject) => {\n            return filterObject.category === 'Operating System';\n        });\n\n        if (deletedStateFilters.length > 0) {\n            this.clearStateQueryParams();\n            const resetFiltersList = deletedStateFilters[0]?.chips.map((chip) =>{\n                return chip?.name;\n            });\n            const activeStateFilters = this.state.stateFilterValue.filter(filterName => !resetFiltersList.includes(filterName));\n\n            this.setState ({\n                stateFilterValue: activeStateFilters\n            });\n        }\n\n        if (deletedOSFilters.length > 0) {\n            const resetOSFilterList = deletedOSFilters[0]?.chips.map((chip) => {\n                return chip?.name;\n            });\n\n            const activeOSFilters = this.state.osFilterValue.filter(filterName => !resetOSFilterList.includes(filterName));\n            this.setState ({\n                osFilterValue: activeOSFilters\n            });\n\n        }\n    }\n\n    getActiveFilterConfig = () => {\n        const activeStateFilters = this.state.stateFilterValue.map((value)=> ({ name: value }));\n        const activeOSFilters = this.state.osFilterValue.map((value)=> ({ name: value }));\n\n        const activeFilters = [];\n        if (activeStateFilters.length > 0) {\n            activeFilters.push({\n                category: 'State',\n                chips: activeStateFilters\n            });\n        }\n\n        if (activeOSFilters.length > 0) {\n            activeFilters.push({\n                category: 'Operating System',\n                chips: activeOSFilters\n            });\n        }\n\n        return activeFilters;\n    }\n\n    setColumnModalOpen = (modalState) => {\n        this.setState({\n            isColumnModalOpen: modalState\n        });\n    }\n\n    getActiveColumns = () => {\n        const { columns } = this.props;\n        return columns.filter(column => column.isChecked);\n    }\n\n    setExportSystemsPDF(exportSystemsPDF) {\n        this.setState({\n            exportSystemsPDF\n        });\n    }\n\n    onExportOptionSelect(fileType) {\n        const { stateFilterValue, nameFilterValue, osFilterValue, orderBy, orderDirection } = this.state;\n        const filters = {\n            stateFilter: stateFilterValue,\n            hostnameOrId: nameFilterValue,\n            osFilter: osFilterValue\n        };\n\n        const { addNotification, clearNotifications } = this.props;\n\n        downloadReport(fileType, filters, orderBy, orderDirection,\n            notification => addNotification(notification),\n            () => clearNotifications());\n    }\n\n    renderConfigStepsOrTable() {\n        const { state: SFObject } = CUSTOM_FILTERS;\n        const { os: OSFObject } = CUSTOM_FILTERS;\n        const activeColumns = this.getActiveColumns();\n        const { exportSystemsPDF, stateFilterValue, nameFilterValue, osFilterValue,\n            orderBy, orderDirection, disableExport } = this.state;\n\n        return (\n            this.props.showConfigSteps\n                ?   <ServiceNotConfigured/>\n                :   <Card className='pf-t-light  pf-m-opaque-100'>\n                    <CardBody>\n                        <ManageColumnsModal\n                            isModalOpen={this.state.isColumnModalOpen}\n                            setModalOpen={this.setColumnModalOpen}\n                            modalColumns={this.props.columns}\n                            saveColumns={(columns) => this.props.changeSystemColumns({ columns })}\n                        />\n                        <InventoryTable\n                            disableDefaultColumns\n                            ref={this.inventory}\n                            hasCheckbox={ false }\n                            tableProps={{\n                                canSelectAll: false,\n                                className: 'ros-systems-table'\n                            }}\n                            variant=\"compact\"\n                            hideFilters={{ all: true, name: false }}\n                            autoRefresh= {true}\n                            customFilters={{\n                                stateFilter: stateFilterValue,\n                                osFilter: this.state.osFilterValue\n                            }}\n                            columns={activeColumns}\n                            getEntities={async (_items, config) => {\n                                this.setState(() => ({\n                                    orderBy: config.orderBy,\n                                    orderDirection: config.orderDirection,\n                                    nameFilterValue: config.filters?.hostnameOrId\n                                }));\n                                const results = await this.fetchSystems(\n                                    {\n                                        page: config.page, perPage: config.per_page,\n                                        orderBy: this.sortingHeader[config.orderBy],\n                                        orderHow: config.orderDirection,\n                                        filters: config.filters,\n                                        stateFilter: config.stateFilter,\n                                        osFilter: config.osFilter\n                                    }\n                                );\n\n                                const invIds = (results.data || []).map(({ inventory_id: inventoryId }) => inventoryId);\n                                const invSystems = await this.fetchInventoryDetails(invIds, {\n                                    ...config,\n                                    page: 1,\n                                    hasItems: true\n                                });\n\n                                const disableExport = results?.meta?.count === 0;\n                                this.setState(() => ({\n                                    disableExport\n                                }));\n\n                                return {\n                                    results: results.data.map((system) => {\n                                        const invRec = invSystems.find(({ id }) => id === system.inventory_id);\n                                        return ({\n                                            ...invRec,\n                                            ...(invRec ? { isDeleted: false } : { id: system.inventory_id, isDeleted: true }),\n                                            ...system\n                                        });\n                                    }),\n                                    total: results.meta.count,\n                                    page: config.page,\n                                    per_page: config.per_page /* eslint-disable-line camelcase */\n                                };\n                            }}\n                            onLoad={({ mergeWithEntities, INVENTORY_ACTION_TYPES, api }) => {\n                                this.setState({\n                                    getEntities: api?.getEntities\n                                });\n                                register({\n                                    ...mergeWithEntities(\n                                        entitiesReducer(\n                                            INVENTORY_ACTION_TYPES, SYSTEM_TABLE_COLUMNS\n                                        )\n                                    )\n                                });\n                                this.props.setSort(this.state.orderBy, this.state.orderDirection, 'CHANGE_SORT');\n                            }}\n                            expandable='true'\n                            filterConfig={{\n                                items: [\n                                    {\n                                        label: SFObject.label,\n                                        type: SFObject.type,\n                                        value: `checkbox-state`,\n                                        filterValues: {\n                                            items: SFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateStateFilter(values),\n                                            value: stateFilterValue\n                                        }\n                                    },\n                                    {\n                                        label: OSFObject.label,\n                                        type: OSFObject.type,\n                                        value: `checkbox-os`,\n                                        filterValues: {\n                                            items: OSFObject.filterValues.items,\n                                            onChange: (_e, values) => this.updateOSFilter(values),\n                                            value: this.state.osFilterValue\n                                        }\n                                    }\n                                ]\n                            }}\n                            activeFiltersConfig={{\n                                filters: this.getActiveFilterConfig(),\n                                onDelete: this.onDeleteFilters\n                            }}\n                            actionsConfig={{\n                                actions: [\n                                    '',\n                                    {\n                                        label: 'Manage columns',\n                                        onClick: () => this.setColumnModalOpen(true)\n                                    }\n                                ]\n                            }}\n                            exportConfig={{\n                                isDisabled: disableExport,\n                                extraItems: [\n                                    <li key='pdf-button-item' role='menuitem'>\n                                        <Button\n                                            key='pdf-download-button'\n                                            variant='none'\n                                            className=\"pf-c-dropdown__menu-item\"\n                                            onClick={() => this.setExportSystemsPDF(true)}>\n                                            Export as PDF\n                                        </Button>\n                                    </li>\n                                ],\n                                ouiaId: 'export',\n                                onSelect: (_event, fileType) => this.onExportOptionSelect(fileType)\n                            }}\n                            onExpandClick={(_e, _i, isOpen, { id }) => this.props.expandRow(id, isOpen, 'EXPAND_ROW')}\n                        >\n                        </InventoryTable>\n                        {exportSystemsPDF &&\n                            <DownloadSystemsPDFReport\n                                showButton={false}\n                                onSuccess={() => this.setExportSystemsPDF(false)}\n                                filters={{\n                                    stateFilter: stateFilterValue,\n                                    hostnameOrId: nameFilterValue,\n                                    osFilter: osFilterValue\n                                }}\n                                orderBy={orderBy}\n                                orderHow={orderDirection}\n                            />\n                        }\n                    </CardBody>\n                </Card>\n        );\n    }\n\n    render() {\n        return (\n            <React.Fragment>\n                <PageHeader className='ros-page-header'>\n                    <PageHeaderTitle title='Resource Optimization'/>\n                    <DownloadExecutivePDFReport isDisabled={this.state.disableExport} />\n                </PageHeader>\n                <Main>\n                    <PermissionContext.Consumer>\n                        { value =>\n                            value.permissions.systemsRead === false\n                                ? <NotAuthorized serviceName='Resource Optimization' />\n                                : this.renderConfigStepsOrTable()\n                        }\n                    </PermissionContext.Consumer>\n                </Main>\n            </React.Fragment>\n        );\n    };\n};\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        expandRow: (id, isOpen, actionType) => dispatch({\n            type: actionType,\n            payload: { id, isOpen }\n        }),\n        setSort: (orderByKey, orderByDirection, actionType) => dispatch({\n            type: actionType,\n            payload: {\n                key: orderByKey,\n                direction: orderByDirection\n            }\n        }),\n        isROSConfigured: () => dispatch(loadIsConfiguredInfo()),\n        changeSystemColumns: (payload) => dispatch(changeSystemColumns(payload)),\n        addNotification: (payload) => dispatch(addNotification(payload)),\n        clearNotifications: () => dispatch(clearNotifications())\n    };\n}\n\nconst mapStateToProps = (state, props) => {\n    return {\n        showConfigSteps: state.isConfiguredReducer?.showConfigSteps,\n        columns: state.systemColumnsReducer.columns,\n        ...props\n    };\n};\n\nRosPage.propTypes = {\n    expandRow: PropTypes.func,\n    setSort: PropTypes.func,\n    isROSConfigured: PropTypes.func,\n    showConfigSteps: PropTypes.bool,\n    location: PropTypes.object,\n    columns: PropTypes.array,\n    changeSystemColumns: PropTypes.func,\n    addNotification: PropTypes.func,\n    clearNotifications: PropTypes.func\n};\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(RosPage));\n","import { SortByDirection } from '@patternfly/react-table';\nimport { ROS_API_ROOT, SYSTEMS_API_ROOT, IS_CONFIGURED_API, EXECUTIVE_REPORT_API } from '../constants';\n\nexport function handleErrors(response) {\n    if (!response.ok) {\n        throw Error(response.statusText);\n    }\n\n    return response;\n}\n\nexport const isROSConfigured = () => {\n    let url = new URL(\n        ROS_API_ROOT + IS_CONFIGURED_API,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemDetail = inventoryId => {\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}`,\n        window.location.origin\n    );\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystemRecommendations = (inventoryId, options = {}) => {\n    let params = {\n        limit: options.perPage,\n        offset: (options.page - 1) * options.perPage\n    };\n    if (options.description && options.description.trim()) {\n        params = { ...params, description: options.description };\n    }\n\n    let url = new URL(\n        ROS_API_ROOT + SYSTEMS_API_ROOT + `/${inventoryId}/suggestions`,\n        window.location.origin\n    );\n    url.search = new URLSearchParams(params).toString();\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then((resp) => {\n            if (!resp.ok && resp.status === 404) {\n                return { hasError: true };\n            } else if (!resp.ok) {\n                throw Error(resp.statusText);\n            }\n\n            return resp.json();\n        })\n        .then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchSystems = async (fetchParams) => {\n    await window.insights.chrome.auth.getUser();\n\n    const { perPage, orderBy, orderHow  } = fetchParams || {};\n\n    const sortingHeader = {\n        display_name: 'display_name', /* eslint-disable-line camelcase */\n        os: 'os',\n        'performance_utilization.cpu': 'cpu',\n        'performance_utilization.memory': 'memory',\n        'performance_utilization.max_io': 'max_io',\n        number_of_suggestions: 'number_of_suggestions', /* eslint-disable-line camelcase */\n        state: 'state',\n        report_date: 'report_date' /* eslint-disable-line camelcase */\n    };\n\n    let params = {\n        order_by: sortingHeader[orderBy] || 'report_date', /* eslint-disable-line camelcase */\n        order_how: orderHow || SortByDirection.desc, /* eslint-disable-line camelcase */\n        limit: perPage ? perPage : -1,\n        ...fetchParams?.page && {\n            offset: (fetchParams.page - 1) * fetchParams.perPage\n        },\n        ...fetchParams?.filters?.hostnameOrId && {\n            display_name: fetchParams.filters.hostnameOrId /* eslint-disable-line camelcase */\n        }\n    };\n\n    let url = new URL(ROS_API_ROOT + SYSTEMS_API_ROOT,  window.location.origin);\n    let query = new URLSearchParams(params);\n    fetchParams?.stateFilter?.forEach((stateFilterValue) => {\n        query.append('state', stateFilterValue);\n    });\n    fetchParams?.osFilter?.forEach((osFilterValue) => {\n        query.append('os', osFilterValue);\n    });\n    url.search = query.toString();\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n};\n\nexport const fetchSystemHistory = (inventoryId, limit) => {\n    let url = new URL(\n        `${ROS_API_ROOT}${SYSTEMS_API_ROOT}/${inventoryId}/history`,\n        window.location.origin\n    );\n    let params = {\n        limit\n    };\n\n    let query = new URLSearchParams(params);\n    url.search = query.toString();\n\n    let response = window.insights.chrome.auth\n    .getUser()\n    .then(() =>\n        fetch(url).then(handleErrors)\n        .then(res =>  res.json()).then(result => result)\n    );\n\n    return response;\n};\n\nexport const fetchExecutiveReport = async () => {\n    await window.insights.chrome.auth.getUser();\n\n    const url = new URL(`${ROS_API_ROOT}${EXECUTIVE_REPORT_API}`,  window.location.origin);\n\n    return fetch(url).then((res) => {\n        if (!res.ok) {\n            throw Error(res.statusText);\n        }\n\n        return res;\n    }).then(res =>  res.json());\n\n};\n","import { fetchSystemDetail, fetchSystemRecommendations, isROSConfigured } from '../Utilities/api';\n\nexport const loadSystemInfo = inventoryId => ({\n    type: 'LOAD_ROS_SYSTEM_INFO',\n    payload: fetchSystemDetail(inventoryId)\n});\n\nexport const loadSysRecs = (inventoryId, params) => ({\n    type: 'FETCH_SYSTEM_RECOMMENDATIONS_LIST',\n    payload: fetchSystemRecommendations(inventoryId, params)\n});\n\nexport const loadIsConfiguredInfo = () => ({\n    type: 'LOAD_IS_CONFIGURED_INFO',\n    payload: isROSConfigured()\n});\n\nexport const changeSystemColumns = (payload) =>({\n    type: 'CHANGE_SYSTEM_COLUMNS',\n    payload\n});\n"],"names":["ServiceNotConfigured","Bullseye","EmptyState","className","EmptyStateIcon","icon","WrenchIcon","Title","headingLevel","size","EmptyStateBody","Stack","hasGutter","StackItem","Button","component","href","GETTING_STARTED_URL","target","variant","ManageColumnsModal","modalColumns","isModalOpen","setModalOpen","saveColumns","useState","currentColumns","setCurrentColumns","handleCancel","Modal","title","onClose","isOpen","description","TextContent","Text","TextVariants","Split","SplitItem","isInline","onClick","map","column","isChecked","isShownByDefault","actions","key","DataList","id","isCompact","index","DataListItem","DataListItemRow","DataListCheck","checked","onChange","newColumns","changedColumn","onCheckChange","isDisabled","DataListItemCells","dataListCells","DataListCell","modalTitle","propTypes","isRequired","pdfRowKeys","reportRowKeys","percentageKeys","REPORT_NOTIFICATIONS","autoDismiss","sysStatesDescription","iconPath","CheckCircleIconConfig","iconScale","fillColor","TachometerAltIconConfig","AngleDoubleDownIconConfig","AngleDoubleUpIconConfig","AutomationIconConfig","InProgressIconConfig","conditionsDescription","formatData","data","type","systemsRowsData","rowKeys","systemItem","rowData","rowKey","rowValue","toString","includes","dateStringByType","Date","push","responseToJSONData","JSON","stringify","responseToCSVData","items","header","Object","keys","join","row","fieldName","generateFilterText","filters","filterText","filterSeparatorOnLine","hasStateFilter","stateFilter","length","hasNameFilter","hostnameOrId","hasOsFilter","osFilter","concat","sort","getSystemsReportFileName","currentDate","toISOString","replace","split","pluralize","count","singular","plural","StyleSheet","bodyCell","textAlign","fontSize","paddingBottom","paddingTop","paddingRight","flex","headerCell","systemNameCell","lastReportedCell","headerStyle","display","flexDirection","justifyContent","rowStyle","execHeading","color","marginBottom","marginTop","occurrenceHeading","execInfoText","instanceTypeHeading","instanceTypeHeadingFirst","instanceTypeDesc","flexRow","tableRowBackground","backgroundColor","global_BorderColor_300","instanceTableHeading","fontWeight","bold","fontFamily","columnBuilder","value","style","headerContent","SystemsTablePage","page","systemsHeader","item","styleArr","styles","systemsRows","rowItem","nameIndex","indexOf","lastReportedIndex","Fragment","withHeader","rows","SystemsFirstPage","totalSystems","DownloadSystemsPDFReport","orderBy","orderHow","props","reportFileName","dispatch","useDispatch","start","success","failure","useEffect","addNotification","generateSystemsPDFReport","firstPageCount","otherPageCount","fetchSystemParams","fetchSystems","systemsResponse","clearNotifications","pdfData","firstPageProps","splice","meta","otherPages","systemsPage","reportName","fileName","orientation","allPagesHaveTitle","asyncFunction","downloadReport","format","showNotification","clearNotification","downloadFile","IconCanvas","width","height","padding","CircleIconConfig","paint","path","scale","fill","ExecutiveFirstPage","conditionsCount","conditions_count","nonOptimizedCount","non_optimized_count","totalCount","total_count","staleCount","stale_count","optimizedCount","systems_per_state","optimized","formattedReportData","systemsPerState","conditions","stateChartData","stateTableData","conditionsChartData","conditionsTableData","conditionsInfo","io","name","occurrences","memory","cpu","stateNameMapping","idling","oversized","under_pressure","undersized","waiting_for_data","state","stateName","percentage","x","y","condition","conditionName","Math","floor","underPressureValue","undersizedValue","oversizedValue","formatExecutiveReportData","chartType","subTitle","colorSchema","legendHeader","showLabels","labels","ioOccurenceTableData","ramOccurrenceTableData","cpuOccurrenceTableData","renderOccurrenceBreakdown","InstancesTable","instanceDetails","heading","instanceDetail","paddingLeft","desc","ExecutiveSecondPage","instance_types_highlights","currentData","current","suggestedData","suggested","historicalData","historical","instanceTableDetails","staleDescription","instanceTable","DescriptionList","Dl","Dt","Dd","ExecutiveThirdPage","DownloadExecutivePDFReport","loading","setLoading","generateExecutivePDFReport","fetchExecutiveReport","executiveReportResponse","label","buttonProps","isAriaDisabled","ErrorComponent","error","message","RosPage","setState","stateFilterValue","osFilterValue","e","filtersArr","deletedStateFilters","filter","filterObject","category","deletedOSFilters","clearStateQueryParams","resetFiltersList","chips","chip","activeStateFilters","filterName","resetOSFilterList","activeOSFilters","activeFilters","modalState","isColumnModalOpen","columns","perPage","orderDirection","SortByDirection","exportSystemsPDF","nameFilterValue","disableExport","sortingHeader","display_name","os","number_of_suggestions","report_date","chunkSize","inventory","React","bind","document","insights","chrome","hideGlobalFilter","appAction","this","isROSConfigured","processQueryParams","location","queryParams","URLSearchParams","search","sysWithSuggestionsParam","get","WITH_SUGGESTIONS_PARAM","WITH_WAITING_FOR_DATA_PARAM","url","URL","window","history","replaceState","origin","pathname","hash","fetchParams","auth","getUser","params","limit","offset","order_by","order_how","ROS_API_ROOT","SYSTEMS_API_ROOT","query","forEach","append","fetch","then","res","ok","Error","statusText","json","ids","idsChunks","invIds","configOptns","results","per_page","multipleGetEntitiesRequests","recordsSubset","records","getEntities","response","idsInBatches","chunkIdsArray","Promise","all","resp","respJSON","fileType","notification","SFObject","CUSTOM_FILTERS","OSFObject","activeColumns","getActiveColumns","showConfigSteps","Card","CardBody","setColumnModalOpen","changeSystemColumns","InventoryTable","disableDefaultColumns","ref","hasCheckbox","tableProps","canSelectAll","hideFilters","autoRefresh","customFilters","_items","config","inventory_id","fetchInventoryDetails","hasItems","invSystems","system","invRec","find","isDeleted","total","onLoad","mergeWithEntities","INVENTORY_ACTION_TYPES","api","register","entitiesReducer","SYSTEM_TABLE_COLUMNS","setSort","expandable","filterConfig","filterValues","_e","values","updateStateFilter","updateOSFilter","activeFiltersConfig","getActiveFilterConfig","onDelete","onDeleteFilters","actionsConfig","exportConfig","extraItems","role","setExportSystemsPDF","ouiaId","onSelect","_event","onExportOptionSelect","onExpandClick","_i","expandRow","showButton","onSuccess","PageHeader","PageHeaderTitle","Main","permissions","systemsRead","NotAuthorized","serviceName","renderConfigStepsOrTable","PropTypes","withRouter","connect","isConfiguredReducer","systemColumnsReducer","actionType","payload","orderByKey","orderByDirection","direction","loadIsConfiguredInfo","handleErrors","IS_CONFIGURED_API","result","fetchSystemDetail","inventoryId","fetchSystemRecommendations","options","trim","status","hasError","fetchSystemHistory","EXECUTIVE_REPORT_API","loadSystemInfo","loadSysRecs"],"sourceRoot":""}